<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/12/09/hello-world/"/>
      <url>/2021/12/09/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="hello-world"><a href="#hello-world" class="headerlink" title="hello world!"></a>hello world!</h3><p>hello world!hello world!hello world!hello world!hello world!hello world!hello world!hello world!hello world!hello world!</p><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="test"><a href="#test" class="headerlink" title="test"></a>test</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"hello world!"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"hello world!"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"hello world!"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"hello world!"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"hello world!"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"hello world!"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> hello </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hello </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python SQLAlchemy自动生成models文件</title>
      <link href="/2021/12/08/sqlalchemy-zi-dong-sheng-cheng-models-wen-jian/"/>
      <url>/2021/12/08/sqlalchemy-zi-dong-sheng-cheng-models-wen-jian/</url>
      
        <content type="html"><![CDATA[<h2 id="安装SQLAcodegen"><a href="#安装SQLAcodegen" class="headerlink" title="安装SQLAcodegen"></a>安装SQLAcodegen</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip <span class="token function">install</span> sqlacodegen<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="python2"><a href="#python2" class="headerlink" title="python2"></a>python2</h2><p>直接执行命令在当前目录下生成models</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sqlacodegen mysql://root:123456@127.0.0.1:3306/test <span class="token operator">></span> models.py<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="python3"><a href="#python3" class="headerlink" title="python3"></a>python3</h2><p>如果是python3 会报错 <br><code>No module named &#39;MySQLdb&#39;</code> <br>这个时候安装pymysql <br>然后在sqlacodegen的<code>__init__.py</code>文件里加上</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pymysqlpymysql<span class="token punctuation">.</span>install_as_MySQLdb<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>再次执行</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux文件删除正在读写的文件</title>
      <link href="/2021/10/23/linux-shan-chu-zheng-zai-shi-yong-de-wen-jian/"/>
      <url>/2021/10/23/linux-shan-chu-zheng-zai-shi-yong-de-wen-jian/</url>
      
        <content type="html"><![CDATA[<h2 id="背景知识"><a href="#背景知识" class="headerlink" title="背景知识"></a>背景知识</h2><p>多进程环境下，打开同一个文件，进行读写操作过程中，如果其中一个进程删除这个文件，那么，另外正在读写这个文件会发生什么呢？</p><ul><li>因为文件被删除了，正在读写的进程发生异常？</li><li>正在读写的进程仍然正常读写，好像没有发现发生了什么？</li></ul><p>Linux 是通过 link 的数量来控制文件删除，只有当一个文件不存在任何 link 的时候，这个文件才会被删除。</p><p>每个文件都有 2 个 link 计数器 —— i_count 和 i_nlink。i_count 的意义是当前使用者的数量，i_nlink 的意义是介质连接的数量；或者可以理解为 i_count 是内存引用计数器，i_nlink 是硬盘引用计数器。再换句话说，当文件被某个进程引用时，i_count 就会增加；当创建文件的硬连接的时候，i_nlink 就会增加。</p><p>对于 rm 而言，就是减少 i_nlink。这里就出现一个问题，如果一个文件正在被某个进程调用，而用户却执行 rm 操作把文件删除了，会出现什么结果呢？</p><p>当用户执行 rm 操作后，ls 或者其他文件管理命令不再能够找到这个文件，但是进程却依然在继续正常执行，依然能够从文件中正确的读取内容。这是因为，<code>rm</code> 操作只是将 i_nlink 置为 0 了；由于文件被进程引用的缘故，i_count 不为 0，所以系统没有真正删除这个文件。i_nlink 是文件删除的充分条件，而 i_count 才是文件删除的必要条件。</p><p>基于以上只是，大家猜一下，如果在一个进程在打开文件写日志的时候，手动或者另外一个进程将这个日志删除，会发生什么情况？</p><p>是的，数据并没有停掉。虽然日志文件被删除了，但是有一个进程已经打开了那个文件，所以向那个文件中的写操作仍然会成功，数据仍然会提交</p><h2 id="查看已删除但是未释放空间的文件"><a href="#查看已删除但是未释放空间的文件" class="headerlink" title="查看已删除但是未释放空间的文件"></a>查看已删除但是未释放空间的文件</h2><pre class="line-numbers language-none"><code class="language-none">lsof | grep deleted<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="如何恢复已删除的正在读写的文件"><a href="#如何恢复已删除的正在读写的文件" class="headerlink" title="如何恢复已删除的正在读写的文件"></a>如何恢复已删除的正在读写的文件</h2><p>首先是找到哪些应用在使用它导致空间没有释放：</p><pre class="line-numbers language-none"><code class="language-none">lsof filename|grep deleted<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>例如，你删除了tcpdump.log，执行lsof | grep tcpdump.log，你应该能看到这样的输出：</p><p>tcpdump 2864 tcpdump 4w REG 253,0 0 671457 /root/tcpdump.log (deleted)</p><p>找到对应进程号后，直接cd /proc/pid/fd（fd中记录的是这个进程打开的所有文件的信息），pid是进程号，在通过lsof查找到被删除文件信息的时候，其中有一项是FD，这个值有最后一位去除（最后一位可能是w/r/u等表示文件状态），例如FD值为50w，则在fd路径下对应的文件是50 </p><pre class="line-numbers language-none"><code class="language-none">cp &#x2F;proc&#x2F;2864&#x2F;fd&#x2F;4  &#x2F;root&#x2F;tcpdump.log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="如何删除正在读写的文件"><a href="#如何删除正在读写的文件" class="headerlink" title="如何删除正在读写的文件"></a>如何删除正在读写的文件</h2><ol><li><p>得到进程号，如果进程不重要可以直接kill，删除文件，再重启</p></li><li><p>如果应用不能重启呢，这个时候就需要在不重启应用的情况下操作，在fd路径下直接执行:</p><pre class="line-numbers language-none"><code class="language-none">echo &quot;&quot; &gt; 50<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将文件给置空了，然后就发现空间释放了！</p></li></ol><p>  上述两个方法是针对问题发生后的解决办法，但是如何避免出现上述问题呢，暂时了解的办法是如果是某个文本占据空间太多需要删除，不要直接rm删除，用echo “” &gt; filename的方式先对文本置空，然后如果还是看不顺眼就可以直接rm删除了，此时即便还有应用在使用它，删除后也会释放空间</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>k8s搭建集群(centos)</title>
      <link href="/2021/09/15/k8s-ji-qun-da-jian/"/>
      <url>/2021/09/15/k8s-ji-qun-da-jian/</url>
      
        <content type="html"><![CDATA[<h1 id="操作系统初始化"><a href="#操作系统初始化" class="headerlink" title="操作系统初始化"></a>操作系统初始化</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 关闭防火墙</span>systemctl stop firewalldsystemctl disable firewalld<span class="token comment"># 查看防火墙状态</span>systemctl is-enabled firewalld<span class="token comment"># 关闭selinux</span><span class="token function">sed</span> -i <span class="token string">'s/enforcing/disabled/'</span> /etc/selinux/config <span class="token comment"># 永久</span>setenforce <span class="token comment"># 临时</span><span class="token comment"># 关闭swap</span>swapoff -a <span class="token comment"># 临时</span><span class="token function">sed</span> -ri <span class="token string">'s/.*swap.*/#&amp;/'</span> /etc/fstab <span class="token comment"># 永久</span><span class="token comment"># 根据规划设置主机名</span>hostnamectl set-hostname <span class="token operator">&lt;</span>hostname<span class="token operator">></span><span class="token comment"># 给master添加hosts</span><span class="token function">cat</span> <span class="token operator">>></span> /etc/hosts <span class="token operator">&lt;&lt;</span> <span class="token string">EOF192.168.56.103 master192.168.56.104 node1EOF</span><span class="token comment"># 将桥接的IPv4流量传递到iptables的链(主从都设置)</span><span class="token function">cat</span> <span class="token operator">></span> /etc/sysctl.d/k8s.conf <span class="token operator">&lt;&lt;</span> <span class="token string">EOFnet.bridge.bridge-nf-call-ip6tables = 1net.bridge.bridge-nf-call-iptables = 1EOF</span>sysctl --system <span class="token comment"># 使配置生效</span><span class="token comment"># 时间同步</span>yum <span class="token function">install</span> ntpdate -yntpdate time.windows.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="所有节点安装Docker-Kubeadm-Kubelet"><a href="#所有节点安装Docker-Kubeadm-Kubelet" class="headerlink" title="所有节点安装Docker/Kubeadm/Kubelet"></a>所有节点安装Docker/Kubeadm/Kubelet</h1><h2 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo -O /etc/yum.repos.d/docker-ce.repoyum -y <span class="token function">install</span> docker-ce-18.06.1.ce-3.el7systemctl <span class="token builtin class-name">enable</span> docker <span class="token operator">&amp;&amp;</span> systemctl start dockerdocker --version<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">cat &gt; &#x2F;etc&#x2F;docker&#x2F;daemon.json &lt;&lt; EOF&#123;&quot;registry-mirrors&quot;: [&quot;https:&#x2F;&#x2F;b9pmyelo.mirror.aliyuncs.com&quot;]&#125;EOF# 设置完成后重启dockersystemctl restart docker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="添加阿里云YUM软件源"><a href="#添加阿里云YUM软件源" class="headerlink" title="添加阿里云YUM软件源"></a>添加阿里云YUM软件源</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> <span class="token operator">></span> /etc/yum.repos.d/kubernetes.repo <span class="token operator">&lt;&lt;</span><span class="token string">EOF[kubernetes]name=Kubernetesbaseurl=http://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64enabled=1gpgcheck=0repo_gpgcheck=0gpgkey=http://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg http://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpgEOF</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="安装kubeadm、kubelet和kubectl"><a href="#安装kubeadm、kubelet和kubectl" class="headerlink" title="安装kubeadm、kubelet和kubectl"></a>安装kubeadm、kubelet和kubectl</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> -y kubeadm-1.18.0 kubelet-1.18.0 kubectl-1.18.0systemctl <span class="token builtin class-name">enable</span> kubelet<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="部署Master"><a href="#部署Master" class="headerlink" title="部署Master"></a>部署Master</h1><p>由于默认拉取的镜像地址k8s.gcr.io国内无法访问，这里指定阿里云镜像</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">kubeadm init <span class="token punctuation">\</span>--apiserver-advertise-address<span class="token operator">=</span><span class="token number">192.168</span>.56.103 <span class="token punctuation">\</span>--image-repository registry.aliyuncs.com/google_containers <span class="token punctuation">\</span>--kubernetes-version v1.18.0 <span class="token punctuation">\</span>--service-cidr<span class="token operator">=</span><span class="token number">10.96</span>.0.0/12 <span class="token punctuation">\</span>--pod-network-cidr<span class="token operator">=</span><span class="token number">10.244</span>.0.0/16<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2021/10/21/7sDEMLSUl35wPJT.png" alt="image.png"></p><p>出现successfully表示init完成，然后在master中执行第一个红框中的内容，在从节点中执行红色的内容</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> -p <span class="token environment constant">$HOME</span>/.kube<span class="token function">sudo</span> <span class="token function">cp</span> -i /etc/kubernetes/admin.conf <span class="token environment constant">$HOME</span>/.kube/config<span class="token function">sudo</span> <span class="token function">chown</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">id</span> -u<span class="token variable">)</span></span><span class="token builtin class-name">:</span><span class="token variable"><span class="token variable">$(</span><span class="token function">id</span> -g<span class="token variable">)</span></span> <span class="token environment constant">$HOME</span>/.kube/configkubeadm <span class="token function">join</span> <span class="token number">192.168</span>.56.103:6443 --token rv2k9s.tgnsqa97c7vq8rw6 <span class="token punctuation">\</span>    --discovery-token-ca-cert-hash sha256:9922cb057deafda3ab33d06903976fd1e25661dc573b9973926ddf1f920cf196<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>但是当前的节点都是NotReady状态</strong></p><h2 id="部署CNI网络插件"><a href="#部署CNI网络插件" class="headerlink" title="部署CNI网络插件"></a>部署CNI网络插件</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 此命令由于没有外网导致有的时候无法下载，故可直接使用附件中的kube-flannel.yaml</span>kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.ymlkubectl get pods -n kube-system<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="附件"><a href="#附件" class="headerlink" title="附件"></a>附件</h1><h2 id="kube-flannel"><a href="#kube-flannel" class="headerlink" title="kube-flannel"></a>kube-flannel</h2><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">apiVersion: policy&#x2F;v1beta1kind: PodSecurityPolicymetadata:  name: psp.flannel.unprivileged  annotations:    seccomp.security.alpha.kubernetes.io&#x2F;allowedProfileNames: docker&#x2F;default    seccomp.security.alpha.kubernetes.io&#x2F;defaultProfileName: docker&#x2F;default    apparmor.security.beta.kubernetes.io&#x2F;allowedProfileNames: runtime&#x2F;default    apparmor.security.beta.kubernetes.io&#x2F;defaultProfileName: runtime&#x2F;defaultspec:  privileged: false  volumes:    - configMap    - secret    - emptyDir    - hostPath  allowedHostPaths:    - pathPrefix: &quot;&#x2F;etc&#x2F;cni&#x2F;net.d&quot;    - pathPrefix: &quot;&#x2F;etc&#x2F;kube-flannel&quot;    - pathPrefix: &quot;&#x2F;run&#x2F;flannel&quot;  readOnlyRootFilesystem: false  # Users and groups  runAsUser:    rule: RunAsAny  supplementalGroups:    rule: RunAsAny  fsGroup:    rule: RunAsAny  # Privilege Escalation  allowPrivilegeEscalation: false  defaultAllowPrivilegeEscalation: false  # Capabilities  allowedCapabilities: [&#39;NET_ADMIN&#39;]  defaultAddCapabilities: []  requiredDropCapabilities: []  # Host namespaces  hostPID: false  hostIPC: false  hostNetwork: true  hostPorts:  - min: 0    max: 65535  # SELinux  seLinux:    # SELinux is unused in CaaSP    rule: &#39;RunAsAny&#39;---kind: ClusterRoleapiVersion: rbac.authorization.k8s.io&#x2F;v1beta1metadata:  name: flannelrules:  - apiGroups: [&#39;extensions&#39;]    resources: [&#39;podsecuritypolicies&#39;]    verbs: [&#39;use&#39;]    resourceNames: [&#39;psp.flannel.unprivileged&#39;]  - apiGroups:      - &quot;&quot;    resources:      - pods    verbs:      - get  - apiGroups:      - &quot;&quot;    resources:      - nodes    verbs:      - list      - watch  - apiGroups:      - &quot;&quot;    resources:      - nodes&#x2F;status    verbs:      - patch---kind: ClusterRoleBindingapiVersion: rbac.authorization.k8s.io&#x2F;v1beta1metadata:  name: flannelroleRef:  apiGroup: rbac.authorization.k8s.io  kind: ClusterRole  name: flannelsubjects:- kind: ServiceAccount  name: flannel  namespace: kube-system---apiVersion: v1kind: ServiceAccountmetadata:  name: flannel  namespace: kube-system---kind: ConfigMapapiVersion: v1metadata:  name: kube-flannel-cfg  namespace: kube-system  labels:    tier: node    app: flanneldata:  cni-conf.json: |    &#123;      &quot;name&quot;: &quot;cbr0&quot;,      &quot;cniVersion&quot;: &quot;0.3.1&quot;,      &quot;plugins&quot;: [        &#123;          &quot;type&quot;: &quot;flannel&quot;,          &quot;delegate&quot;: &#123;            &quot;hairpinMode&quot;: true,            &quot;isDefaultGateway&quot;: true          &#125;        &#125;,        &#123;          &quot;type&quot;: &quot;portmap&quot;,          &quot;capabilities&quot;: &#123;            &quot;portMappings&quot;: true          &#125;        &#125;      ]    &#125;  net-conf.json: |    &#123;      &quot;Network&quot;: &quot;10.244.0.0&#x2F;16&quot;,      &quot;Backend&quot;: &#123;        &quot;Type&quot;: &quot;vxlan&quot;      &#125;    &#125;---apiVersion: apps&#x2F;v1kind: DaemonSetmetadata:  name: kube-flannel-ds-amd64  namespace: kube-system  labels:    tier: node    app: flannelspec:  selector:    matchLabels:      app: flannel  template:    metadata:      labels:        tier: node        app: flannel    spec:      affinity:        nodeAffinity:          requiredDuringSchedulingIgnoredDuringExecution:            nodeSelectorTerms:              - matchExpressions:                  - key: kubernetes.io&#x2F;os                    operator: In                    values:                      - linux                  - key: kubernetes.io&#x2F;arch                    operator: In                    values:                      - amd64      hostNetwork: true      tolerations:      - operator: Exists        effect: NoSchedule      serviceAccountName: flannel      initContainers:      - name: install-cni        image: quay.io&#x2F;coreos&#x2F;flannel:v0.12.0-amd64        command:        - cp        args:        - -f        - &#x2F;etc&#x2F;kube-flannel&#x2F;cni-conf.json        - &#x2F;etc&#x2F;cni&#x2F;net.d&#x2F;10-flannel.conflist        volumeMounts:        - name: cni          mountPath: &#x2F;etc&#x2F;cni&#x2F;net.d        - name: flannel-cfg          mountPath: &#x2F;etc&#x2F;kube-flannel&#x2F;      containers:      - name: kube-flannel        image: quay.io&#x2F;coreos&#x2F;flannel:v0.12.0-amd64        command:        - &#x2F;opt&#x2F;bin&#x2F;flanneld        args:        - --ip-masq        - --kube-subnet-mgr        resources:          requests:            cpu: &quot;100m&quot;            memory: &quot;50Mi&quot;          limits:            cpu: &quot;100m&quot;            memory: &quot;50Mi&quot;        securityContext:          privileged: false          capabilities:            add: [&quot;NET_ADMIN&quot;]        env:        - name: POD_NAME          valueFrom:            fieldRef:              fieldPath: metadata.name        - name: POD_NAMESPACE          valueFrom:            fieldRef:              fieldPath: metadata.namespace        volumeMounts:        - name: run          mountPath: &#x2F;run&#x2F;flannel        - name: flannel-cfg          mountPath: &#x2F;etc&#x2F;kube-flannel&#x2F;      volumes:        - name: run          hostPath:            path: &#x2F;run&#x2F;flannel        - name: cni          hostPath:            path: &#x2F;etc&#x2F;cni&#x2F;net.d        - name: flannel-cfg          configMap:            name: kube-flannel-cfg---apiVersion: apps&#x2F;v1kind: DaemonSetmetadata:  name: kube-flannel-ds-arm64  namespace: kube-system  labels:    tier: node    app: flannelspec:  selector:    matchLabels:      app: flannel  template:    metadata:      labels:        tier: node        app: flannel    spec:      affinity:        nodeAffinity:          requiredDuringSchedulingIgnoredDuringExecution:            nodeSelectorTerms:              - matchExpressions:                  - key: kubernetes.io&#x2F;os                    operator: In                    values:                      - linux                  - key: kubernetes.io&#x2F;arch                    operator: In                    values:                      - arm64      hostNetwork: true      tolerations:      - operator: Exists        effect: NoSchedule      serviceAccountName: flannel      initContainers:      - name: install-cni        image: quay.io&#x2F;coreos&#x2F;flannel:v0.12.0-arm64        command:        - cp        args:        - -f        - &#x2F;etc&#x2F;kube-flannel&#x2F;cni-conf.json        - &#x2F;etc&#x2F;cni&#x2F;net.d&#x2F;10-flannel.conflist        volumeMounts:        - name: cni          mountPath: &#x2F;etc&#x2F;cni&#x2F;net.d        - name: flannel-cfg          mountPath: &#x2F;etc&#x2F;kube-flannel&#x2F;      containers:      - name: kube-flannel        image: quay.io&#x2F;coreos&#x2F;flannel:v0.12.0-arm64        command:        - &#x2F;opt&#x2F;bin&#x2F;flanneld        args:        - --ip-masq        - --kube-subnet-mgr        resources:          requests:            cpu: &quot;100m&quot;            memory: &quot;50Mi&quot;          limits:            cpu: &quot;100m&quot;            memory: &quot;50Mi&quot;        securityContext:          privileged: false          capabilities:             add: [&quot;NET_ADMIN&quot;]        env:        - name: POD_NAME          valueFrom:            fieldRef:              fieldPath: metadata.name        - name: POD_NAMESPACE          valueFrom:            fieldRef:              fieldPath: metadata.namespace        volumeMounts:        - name: run          mountPath: &#x2F;run&#x2F;flannel        - name: flannel-cfg          mountPath: &#x2F;etc&#x2F;kube-flannel&#x2F;      volumes:        - name: run          hostPath:            path: &#x2F;run&#x2F;flannel        - name: cni          hostPath:            path: &#x2F;etc&#x2F;cni&#x2F;net.d        - name: flannel-cfg          configMap:            name: kube-flannel-cfg---apiVersion: apps&#x2F;v1kind: DaemonSetmetadata:  name: kube-flannel-ds-arm  namespace: kube-system  labels:    tier: node    app: flannelspec:  selector:    matchLabels:      app: flannel  template:    metadata:      labels:        tier: node        app: flannel    spec:      affinity:        nodeAffinity:          requiredDuringSchedulingIgnoredDuringExecution:            nodeSelectorTerms:              - matchExpressions:                  - key: kubernetes.io&#x2F;os                    operator: In                    values:                      - linux                  - key: kubernetes.io&#x2F;arch                    operator: In                    values:                      - arm      hostNetwork: true      tolerations:      - operator: Exists        effect: NoSchedule      serviceAccountName: flannel      initContainers:      - name: install-cni        image: quay.io&#x2F;coreos&#x2F;flannel:v0.12.0-arm        command:        - cp        args:        - -f        - &#x2F;etc&#x2F;kube-flannel&#x2F;cni-conf.json        - &#x2F;etc&#x2F;cni&#x2F;net.d&#x2F;10-flannel.conflist        volumeMounts:        - name: cni          mountPath: &#x2F;etc&#x2F;cni&#x2F;net.d        - name: flannel-cfg          mountPath: &#x2F;etc&#x2F;kube-flannel&#x2F;      containers:      - name: kube-flannel        image: quay.io&#x2F;coreos&#x2F;flannel:v0.12.0-arm        command:        - &#x2F;opt&#x2F;bin&#x2F;flanneld        args:        - --ip-masq        - --kube-subnet-mgr        resources:          requests:            cpu: &quot;100m&quot;            memory: &quot;50Mi&quot;          limits:            cpu: &quot;100m&quot;            memory: &quot;50Mi&quot;        securityContext:          privileged: false          capabilities:             add: [&quot;NET_ADMIN&quot;]        env:        - name: POD_NAME          valueFrom:            fieldRef:              fieldPath: metadata.name        - name: POD_NAMESPACE          valueFrom:            fieldRef:              fieldPath: metadata.namespace        volumeMounts:        - name: run          mountPath: &#x2F;run&#x2F;flannel        - name: flannel-cfg          mountPath: &#x2F;etc&#x2F;kube-flannel&#x2F;      volumes:        - name: run          hostPath:            path: &#x2F;run&#x2F;flannel        - name: cni          hostPath:            path: &#x2F;etc&#x2F;cni&#x2F;net.d        - name: flannel-cfg          configMap:            name: kube-flannel-cfg---apiVersion: apps&#x2F;v1kind: DaemonSetmetadata:  name: kube-flannel-ds-ppc64le  namespace: kube-system  labels:    tier: node    app: flannelspec:  selector:    matchLabels:      app: flannel  template:    metadata:      labels:        tier: node        app: flannel    spec:      affinity:        nodeAffinity:          requiredDuringSchedulingIgnoredDuringExecution:            nodeSelectorTerms:              - matchExpressions:                  - key: kubernetes.io&#x2F;os                    operator: In                    values:                      - linux                  - key: kubernetes.io&#x2F;arch                    operator: In                    values:                      - ppc64le      hostNetwork: true      tolerations:      - operator: Exists        effect: NoSchedule      serviceAccountName: flannel      initContainers:      - name: install-cni        image: quay.io&#x2F;coreos&#x2F;flannel:v0.12.0-ppc64le        command:        - cp        args:        - -f        - &#x2F;etc&#x2F;kube-flannel&#x2F;cni-conf.json        - &#x2F;etc&#x2F;cni&#x2F;net.d&#x2F;10-flannel.conflist        volumeMounts:        - name: cni          mountPath: &#x2F;etc&#x2F;cni&#x2F;net.d        - name: flannel-cfg          mountPath: &#x2F;etc&#x2F;kube-flannel&#x2F;      containers:      - name: kube-flannel        image: quay.io&#x2F;coreos&#x2F;flannel:v0.12.0-ppc64le        command:        - &#x2F;opt&#x2F;bin&#x2F;flanneld        args:        - --ip-masq        - --kube-subnet-mgr        resources:          requests:            cpu: &quot;100m&quot;            memory: &quot;50Mi&quot;          limits:            cpu: &quot;100m&quot;            memory: &quot;50Mi&quot;        securityContext:          privileged: false          capabilities:             add: [&quot;NET_ADMIN&quot;]        env:        - name: POD_NAME          valueFrom:            fieldRef:              fieldPath: metadata.name        - name: POD_NAMESPACE          valueFrom:            fieldRef:              fieldPath: metadata.namespace        volumeMounts:        - name: run          mountPath: &#x2F;run&#x2F;flannel        - name: flannel-cfg          mountPath: &#x2F;etc&#x2F;kube-flannel&#x2F;      volumes:        - name: run          hostPath:            path: &#x2F;run&#x2F;flannel        - name: cni          hostPath:            path: &#x2F;etc&#x2F;cni&#x2F;net.d        - name: flannel-cfg          configMap:            name: kube-flannel-cfg---apiVersion: apps&#x2F;v1kind: DaemonSetmetadata:  name: kube-flannel-ds-s390x  namespace: kube-system  labels:    tier: node    app: flannelspec:  selector:    matchLabels:      app: flannel  template:    metadata:      labels:        tier: node        app: flannel    spec:      affinity:        nodeAffinity:          requiredDuringSchedulingIgnoredDuringExecution:            nodeSelectorTerms:              - matchExpressions:                  - key: kubernetes.io&#x2F;os                    operator: In                    values:                      - linux                  - key: kubernetes.io&#x2F;arch                    operator: In                    values:                      - s390x      hostNetwork: true      tolerations:      - operator: Exists        effect: NoSchedule      serviceAccountName: flannel      initContainers:      - name: install-cni        image: quay.io&#x2F;coreos&#x2F;flannel:v0.12.0-s390x        command:        - cp        args:        - -f        - &#x2F;etc&#x2F;kube-flannel&#x2F;cni-conf.json        - &#x2F;etc&#x2F;cni&#x2F;net.d&#x2F;10-flannel.conflist        volumeMounts:        - name: cni          mountPath: &#x2F;etc&#x2F;cni&#x2F;net.d        - name: flannel-cfg          mountPath: &#x2F;etc&#x2F;kube-flannel&#x2F;      containers:      - name: kube-flannel        image: quay.io&#x2F;coreos&#x2F;flannel:v0.12.0-s390x        command:        - &#x2F;opt&#x2F;bin&#x2F;flanneld        args:        - --ip-masq        - --kube-subnet-mgr        resources:          requests:            cpu: &quot;100m&quot;            memory: &quot;50Mi&quot;          limits:            cpu: &quot;100m&quot;            memory: &quot;50Mi&quot;        securityContext:          privileged: false          capabilities:             add: [&quot;NET_ADMIN&quot;]        env:        - name: POD_NAME          valueFrom:            fieldRef:              fieldPath: metadata.name        - name: POD_NAMESPACE          valueFrom:            fieldRef:              fieldPath: metadata.namespace        volumeMounts:        - name: run          mountPath: &#x2F;run&#x2F;flannel        - name: flannel-cfg          mountPath: &#x2F;etc&#x2F;kube-flannel&#x2F;      volumes:        - name: run          hostPath:            path: &#x2F;run&#x2F;flannel        - name: cni          hostPath:            path: &#x2F;etc&#x2F;cni&#x2F;net.d        - name: flannel-cfg          configMap:            name: kube-flannel-cfg<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pyenv安装和使用(centos)</title>
      <link href="/2021/08/17/pyenv-an-zhuang-yu-shi-yong/"/>
      <url>/2021/08/17/pyenv-an-zhuang-yu-shi-yong/</url>
      
        <content type="html"><![CDATA[<h2 id="依赖安装"><a href="#依赖安装" class="headerlink" title="依赖安装"></a>依赖安装</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> gcc zlib-devel <span class="token function">bzip2</span> bzip2-devel readline-devel sqlite sqlite-devel openssl-devel tk-devel libffi-devel xz-develyum <span class="token function">install</span> <span class="token function">git</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="利用官方的installer一键安装pyenv"><a href="#利用官方的installer一键安装pyenv" class="headerlink" title="利用官方的installer一键安装pyenv"></a>利用官方的installer一键安装pyenv</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> https://pyenv.run <span class="token operator">|</span> <span class="token function">bash</span>或<span class="token function">curl</span> -L https://github.com/pyenv/pyenv-installer/raw/master/bin/pyenv-installer <span class="token operator">|</span> <span class="token function">bash</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="重启shell"><a href="#重启shell" class="headerlink" title="重启shell"></a>重启shell</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">exec</span> <span class="token environment constant">$SHELL</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="添加到env"><a href="#添加到env" class="headerlink" title="添加到env"></a>添加到env</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token string">'export PATH="$HOME/.pyenv/bin:$PATH"'</span> <span class="token operator">>></span> ~/.bashrc<span class="token builtin class-name">echo</span> <span class="token string">'eval "$(pyenv init --path)"'</span> <span class="token operator">>></span> ~/.bashrc<span class="token builtin class-name">echo</span> <span class="token string">'eval "$(pyenv virtualenv-init -)"'</span> <span class="token operator">>></span> ~/.bashrc<span class="token builtin class-name">source</span> ~/.bashrc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="pyenv使用"><a href="#pyenv使用" class="headerlink" title="pyenv使用"></a>pyenv使用</h2><ol><li>查看被 pyenv 托管的 python 版本<br><code>pyenv versions</code></li><li>安装3.7.0版本的python<br><code>pyenv install 3.7.0</code></li><li>使用3.7.0版本创建虚拟环境<br><code>pyenv virtualenv 3.6.6 my-env</code></li><li>在当前目录临时激活虚拟环境<br><code>pyenv activate my-env</code></li><li>在该目录下永久激活，只要进入该目录，就会自动激活虚拟环境<br><code>pyenv local my-env</code></li></ol><h2 id="pyenv-install-安装过慢"><a href="#pyenv-install-安装过慢" class="headerlink" title="pyenv install 安装过慢"></a>pyenv install 安装过慢</h2><p>替换安装脚本下载地址为<code>https://npm.taobao.org/mirrors/python/</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> ~/.pyenv/plugins/python-build/share/python-build<span class="token function">vim</span> <span class="token number">3.7</span>.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用 docker 构建分布式高可用的 web 应用</title>
      <link href="/2021/07/05/li-yong-docker-gou-jian-fen-bu-shi-gao-ke-yong-de-web-ying-yong/"/>
      <url>/2021/07/05/li-yong-docker-gou-jian-fen-bu-shi-gao-ke-yong-de-web-ying-yong/</url>
      
        <content type="html"><![CDATA[<p>这篇文章我们来实践一下稍微复杂一点的场景：构建一个分布式高可用的 web 应用。</p><h2 id="1-架构"><a href="#1-架构" class="headerlink" title="1. 架构"></a>1. 架构</h2><p>下图是本文要介绍的系统架构，从上到下依次为：</p><ol><li>用户 client 端的请求；</li><li>HAProxy：开源代理软件，用来提供高可用和负载均衡；</li><li>多个 Web 应用；</li><li>Redis 集群。</li></ol><p>下面我们重点介绍后面三个部分：</p><p><img src="https://i.loli.net/2021/07/06/sS2XhCWJw6Pvqz8.png" alt="图片描述"></p><h2 id="2-HAProxy"><a href="#2-HAProxy" class="headerlink" title="2. HAProxy"></a>2. HAProxy</h2><h4 id="HAProxy-概览"><a href="#HAProxy-概览" class="headerlink" title="HAProxy 概览"></a>HAProxy 概览</h4><p>HAProxy 是一个使用 C 语言编写的开源软件，作者是 Willy Tarreau，其提供高可用性、负载均衡等特性，以及基于 TCP(四层) 和 HTTP(七层) 的应用程序代理。功能包括提供基于 cookie 的持久性、基于内容的交互、过载保护的高级流量管理、自动故障切换等。官网：<a href="http://www.haproxy.org/">http://www.haproxy.org</a>。</p><p>HAProxy 实现了基于事件驱动的单进程模型，这是其高性能的根本原因。相比于多进程或者多线程模型在并发上的限制，比如内存资源限制、系统调度器限制、锁竞争等，HAProxy 的单进程模型具有天然的优势。同时结合事件驱动模型，可以在用户空间更高效的处理网络请求。</p><p>HAProxy 特别适用于那些负载特大的web站点，比如 github、stackoverflow 等网站就是使用了 HAProxy。这些站点通常又需要会话保持或七层处理。HAProxy运行在当前的硬件上，完全可以支持数以万计的并发连接。并且它的运行模式使得它可以很简单安全的整合进您当前的架构中， 同时可以保护你的web服务器不被暴露到网络上。</p><h4 id="HAProxy-使用"><a href="#HAProxy-使用" class="headerlink" title="HAProxy 使用"></a>HAProxy 使用</h4><p>在部署 HAProxy 的镜像之前，我们先手动安装一下看看如何使用。在 CentOS 系统安装比较简单。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@xxx ~<span class="token punctuation">]</span><span class="token comment"># yum install haproxy</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>默认配置在 <code>/etc/haproxy/haproxy.cfg</code></p><pre class="line-numbers language-cfg" data-language="cfg"><code class="language-cfg">#---------------------------------------------------------------------# Example configuration for a possible web application.  See the# full configuration options online.##   http:&#x2F;&#x2F;haproxy.1wt.eu&#x2F;download&#x2F;1.4&#x2F;doc&#x2F;configuration.txt##---------------------------------------------------------------------#---------------------------------------------------------------------# Global settings#---------------------------------------------------------------------global    # to have these messages end up in &#x2F;var&#x2F;log&#x2F;haproxy.log you will    # need to:    #    # 1) configure syslog to accept network log events.  This is done    #    by adding the &#39;-r&#39; option to the SYSLOGD_OPTIONS in    #    &#x2F;etc&#x2F;sysconfig&#x2F;syslog    #    # 2) configure local2 events to go to the &#x2F;var&#x2F;log&#x2F;haproxy.log    #   file. A line like the following can be added to    #   &#x2F;etc&#x2F;sysconfig&#x2F;syslog    #    #    local2.*                       &#x2F;var&#x2F;log&#x2F;haproxy.log    #    log         127.0.0.1 local2    chroot      &#x2F;var&#x2F;lib&#x2F;haproxy    pidfile     &#x2F;var&#x2F;run&#x2F;haproxy.pid    maxconn     4000    user        haproxy    group       haproxy    daemon    # turn on stats unix socket    stats socket &#x2F;var&#x2F;lib&#x2F;haproxy&#x2F;stats#---------------------------------------------------------------------# common defaults that all the &#39;listen&#39; and &#39;backend&#39; sections will# use if not designated in their block#---------------------------------------------------------------------defaults    mode                    http    log                     global    option                  httplog    option                  dontlognull    option http-server-close    option forwardfor       except 127.0.0.0&#x2F;8    option                  redispatch    retries                 3    timeout http-request    10s    timeout queue           1m    timeout connect         10s    timeout client          1m    timeout server          1m    timeout http-keep-alive 10s    timeout check           10s    maxconn                 3000#---------------------------------------------------------------------# main frontend which proxys to the backends#---------------------------------------------------------------------frontend  main *:5000    acl url_static       path_beg       -i &#x2F;static &#x2F;images &#x2F;javascript &#x2F;stylesheets    acl url_static       path_end       -i .jpg .gif .png .css .js    use_backend static          if url_static    default_backend             app#---------------------------------------------------------------------# static backend for serving up images, stylesheets and such#---------------------------------------------------------------------backend static    balance     roundrobin    server      static 127.0.0.1:4331 check#---------------------------------------------------------------------# round robin balancing between the various backends#---------------------------------------------------------------------backend app    balance     roundrobin    server  app1 127.0.0.1:5001 check    server  app2 127.0.0.1:5002 check    server  app3 127.0.0.1:5003 check    server  app4 127.0.0.1:5004 check<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们来简单看一下其中几个配置：</p><ul><li>global：<ul><li>log: 日志输出配置，所有日志都记录在本机，通过 local2 输出；</li><li>chroot：改变当前工作目录至 /var/lib/haproxy；</li><li>pidfile：进程的 pid 文件。很多软件设计都通过判断 pid 文件存在来判断进程是不是还在；</li><li>maxconn：最大连接数；</li><li>user：进程运行的用户，haproxy；</li><li>group：进程运行的用户组，haproxy；</li><li>daemon：以后台形式运行 HAProxy。</li></ul></li><li>defaults<ul><li>mode：设置启动实例的协议类型，支持 tcp/http；</li><li>log：沿用 global 里面的配置；</li><li>option dontlognull：不记录上级负载均衡发送过来的用于检测状态没有数据的心跳包；</li><li>option redispatch：当 serverId 对应的服务器挂掉后，强制定向到其他健康的服务器；</li><li>retries 3：重试 3 次连接失败就认为服务器不可用；</li><li>maxconn 3000：最大连接数；</li><li>timeout connect：连接超时时间；</li><li>timeout client：客户端连接超时时间；</li><li>timeout server：服务端连接超时时间。</li></ul></li></ul><p>剩下的默认配置暂时先不看了，聚焦一下核心问题，我们要用 HAProxy 来代理我们的服务，应该怎么增加我们的配置项呢？只需要在配置文件的结尾添加 <code>listen</code> 即可。下面是一个简单的例子，这块等我们的 Web 应用部署之后我们再来补充。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">listen http-server <span class="token number">0.0</span>.0.0:8080stats <span class="token builtin class-name">enable</span>stats uri/xxxserver server1 xxx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-Web-APP"><a href="#3-Web-APP" class="headerlink" title="3. Web APP"></a>3. Web APP</h2><p>我们这里实现一个基于 Flask 的 Web 应用对 Redis 实现读写。主要要实现三个功能：</p><ol><li>redis 连接；</li><li>提供一个 route set 实现对 redis 中的值进行设置；</li><li>提供一个 route get 实现对 redis 中的值进行查询。</li></ol><h5 id="redis-连接"><a href="#redis-连接" class="headerlink" title="redis 连接"></a>redis 连接</h5><p>redis 连接，我们直接使用 Python 的依赖库 Redis。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> redisredis_client <span class="token operator">=</span> redis<span class="token punctuation">.</span>Redis<span class="token punctuation">(</span>host<span class="token operator">=</span>redis_host<span class="token punctuation">,</span> port<span class="token operator">=</span>redis_port<span class="token punctuation">,</span> db<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>其中连接 Redis 需要使用三个参数：</p><ul><li>host: redis 的 host</li><li>port: redis 的端口</li><li>db：redis 中的数据库，我们使用 db = 0 即可。</li></ul><p>这里的一个核心问题是 redis 运行在另外一个 Docker 中，那我们在应用的 Docker 中如何知道 redis 的 host 呢？在 Docker 技术中我们可以在启动 Docker 的时候指定参数 –link 将两个 Docker 的网络进行打通。在下面部署的时候我们再细说。</p><h5 id="set-route"><a href="#set-route" class="headerlink" title="set route"></a>set route</h5><p>编写一个 route，可以对 redis 进行写入。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/set'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    key <span class="token operator">=</span> request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"key"</span><span class="token punctuation">)</span>    value <span class="token operator">=</span> request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"value"</span><span class="token punctuation">)</span>    redis_client<span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token string">'OK. We have set '</span> <span class="token operator">+</span> key <span class="token operator">+</span> <span class="token string">' to be '</span> <span class="token operator">+</span> value<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中 request.args 中可以获取到 url 中的参数。但是上面的代码没有做参数校验，key 和 value 可能是空，我们加一个参数校验的逻辑。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/set'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    key <span class="token operator">=</span> request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"key"</span><span class="token punctuation">)</span>    value <span class="token operator">=</span> request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"value"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> key <span class="token keyword">is</span> <span class="token boolean">None</span> <span class="token keyword">or</span> value <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'OOps, the key or value is NULL'</span>    redis_client<span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token string">'OK. We have set '</span> <span class="token operator">+</span> key <span class="token operator">+</span> <span class="token string">' to be '</span> <span class="token operator">+</span> value<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="get-route"><a href="#get-route" class="headerlink" title="get route"></a>get route</h5><p>编写一个 route 对 redis 中的值查询</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/get'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    key <span class="token operator">=</span> request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'key'</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> key <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'OOps, the key is null'</span>    value <span class="token operator">=</span> redis_client<span class="token punctuation">.</span>get<span class="token punctuation">(</span>key<span class="token punctuation">)</span>    <span class="token keyword">return</span> value<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>至此，我们的 web 应用代码编写完成，完整的代码如下，其中 redis-host 现在还是一个 placehold，我们部署的时候会把这个变量注入进来。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span> request<span class="token keyword">import</span> redisredis_client <span class="token operator">=</span> redis<span class="token punctuation">.</span>Redis<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'redis-host'</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">6379</span><span class="token punctuation">,</span> db<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>app <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/set'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    key <span class="token operator">=</span> request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'key'</span><span class="token punctuation">)</span>    value <span class="token operator">=</span> request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'value'</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> key <span class="token keyword">is</span> <span class="token boolean">None</span> <span class="token keyword">or</span> value <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'OOps, the key or value is NULL'</span>    redis_client<span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token string">'OK. We have set '</span> <span class="token operator">+</span> key <span class="token operator">+</span> <span class="token string">' to be '</span> <span class="token operator">+</span> value<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/get'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    key <span class="token operator">=</span> request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'key'</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> key <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'OOps, the key is null'</span>    value <span class="token operator">=</span> redis_client<span class="token punctuation">.</span>get<span class="token punctuation">(</span>key<span class="token punctuation">)</span>    <span class="token keyword">return</span> value<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面编写 Dockerfile。</p><pre class="line-numbers language-dockerfile" data-language="dockerfile"><code class="language-dockerfile">from python:3RUN pip install flaskRUN pip install redisRUN mkdir &#x2F;dataCOPY hello.py &#x2F;data&#x2F;WORKDIR &#x2F;dataEXPOSE 5000ENV FLASK_APP&#x3D;&#x2F;data&#x2F;hello.pyENTRYPOINT [&quot;flask&quot;, &quot;run&quot;, &quot;-h&quot;, &quot;0.0.0.0&quot;]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后通过 <code>docker build</code> 来构建我们的应用，由于提前没有拉取依赖镜像，并且要在镜像中安装一些依赖包，所以 build 时间会略久一点。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@VM-12-6-centos susu<span class="token punctuation">]</span><span class="token comment"># docker build -t web:v1 .</span>Sending build context to Docker daemon  <span class="token number">3</span>.584kBStep <span class="token number">1</span>/9 <span class="token builtin class-name">:</span> from python:3<span class="token number">3</span>: Pulling from library/pythone9afc4f90ab0: Pull complete989e6b19a265: Pull completeaf14b6c2f878: Pull complete5573c4b30949: Pull complete11a88e764313: Pull completeee776f0e36af: Pull complete513c90a1afc3: Pull completedf9b9e95bdb9: Pull complete86c9edb54464: Pull completeDigest: sha256:dd6cd8191ccbced2a6af5d0ddb51e6057c1444df14e14bcfd5c7b3ef78738050Status: Downloaded newer image <span class="token keyword">for</span> python:3 ---<span class="token operator">></span> 7f5b6ccd03e9Step <span class="token number">2</span>/9 <span class="token builtin class-name">:</span> RUN pip <span class="token function">install</span> flask ---<span class="token operator">></span> Running <span class="token keyword">in</span> 2d701068e85bCollecting flask  Downloading Flask-1.1.2-py2.py3-none-any.whl <span class="token punctuation">(</span><span class="token number">94</span> kB<span class="token punctuation">)</span>Collecting Jinja<span class="token operator"><span class="token file-descriptor important">2</span>></span><span class="token operator">=</span><span class="token number">2.10</span>.1  Downloading Jinja2-2.11.2-py2.py3-none-any.whl <span class="token punctuation">(</span><span class="token number">125</span> kB<span class="token punctuation">)</span>Collecting click<span class="token operator">>=</span><span class="token number">5.1</span>  Downloading click-7.1.2-py2.py3-none-any.whl <span class="token punctuation">(</span><span class="token number">82</span> kB<span class="token punctuation">)</span>Collecting itsdangerous<span class="token operator">>=</span><span class="token number">0.24</span>  Downloading itsdangerous-1.1.0-py2.py3-none-any.whl <span class="token punctuation">(</span><span class="token number">16</span> kB<span class="token punctuation">)</span>Collecting Werkzeug<span class="token operator">>=</span><span class="token number">0.15</span>  Downloading Werkzeug-1.0.1-py2.py3-none-any.whl <span class="token punctuation">(</span><span class="token number">298</span> kB<span class="token punctuation">)</span>Collecting MarkupSafe<span class="token operator">>=</span><span class="token number">0.23</span>  Downloading MarkupSafe-1.1.1-cp38-cp38-manylinux1_x86_64.whl <span class="token punctuation">(</span><span class="token number">32</span> kB<span class="token punctuation">)</span>Installing collected packages: MarkupSafe, Jinja2, click, itsdangerous, Werkzeug, flaskSuccessfully installed Jinja2-2.11.2 MarkupSafe-1.1.1 Werkzeug-1.0.1 click-7.1.2 flask-1.1.2 itsdangerous-1.1.0Removing intermediate container 2d701068e85b ---<span class="token operator">></span> 40586a8d8950Step <span class="token number">3</span>/9 <span class="token builtin class-name">:</span> RUN pip <span class="token function">install</span> redis ---<span class="token operator">></span> Running <span class="token keyword">in</span> cff9c96c09f2Collecting redis  Downloading redis-3.5.3-py2.py3-none-any.whl <span class="token punctuation">(</span><span class="token number">72</span> kB<span class="token punctuation">)</span>Installing collected packages: redisSuccessfully installed redis-3.5.3Removing intermediate container cff9c96c09f2 ---<span class="token operator">></span> f295e0ec8e7eStep <span class="token number">4</span>/9 <span class="token builtin class-name">:</span> RUN <span class="token function">mkdir</span> /data ---<span class="token operator">></span> Running <span class="token keyword">in</span> 359538e774ecRemoving intermediate container 359538e774ec ---<span class="token operator">></span> 35935e5e1ba9Step <span class="token number">5</span>/9 <span class="token builtin class-name">:</span> COPY hello.py /data/ ---<span class="token operator">></span> 509d00b301f4Step <span class="token number">6</span>/9 <span class="token builtin class-name">:</span> WORKDIR /data ---<span class="token operator">></span> Running <span class="token keyword">in</span> 95d6e233a897Removing intermediate container 95d6e233a897 ---<span class="token operator">></span> 231b90724d66Step <span class="token number">7</span>/9 <span class="token builtin class-name">:</span> EXPOSE <span class="token number">5000</span> ---<span class="token operator">></span> Running <span class="token keyword">in</span> 56c9c364235aRemoving intermediate container 56c9c364235a ---<span class="token operator">></span> 773eae476c98Step <span class="token number">8</span>/9 <span class="token builtin class-name">:</span> ENV <span class="token assign-left variable">FLASK_APP</span><span class="token operator">=</span>/data/hello.py ---<span class="token operator">></span> Running <span class="token keyword">in</span> e8a326d03937Removing intermediate container e8a326d03937 ---<span class="token operator">></span> a1bdaa647811Step <span class="token number">9</span>/9 <span class="token builtin class-name">:</span> ENTRYPOINT <span class="token punctuation">[</span><span class="token string">"flask"</span>, <span class="token string">"run"</span>, <span class="token string">"-h"</span>, <span class="token string">"0.0.0.0"</span><span class="token punctuation">]</span> ---<span class="token operator">></span> Running <span class="token keyword">in</span> 2fec7d6c8628Removing intermediate container 2fec7d6c8628 ---<span class="token operator">></span> 4124bbaadf14Successfully built 4124bbaadf14Successfully tagged web:v1<span class="token punctuation">[</span>root@VM-12-6-centos susu<span class="token punctuation">]</span><span class="token comment"># docker images</span>REPOSITORY                                                                TAG                          IMAGE ID            CREATED             SIZEweb                                                                       v1                           4124bbaadf14        <span class="token number">21</span> seconds ago      944MB<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>启动的时候可以通过 <code>--link</code> 指定 redis 的地址，类似下面这样。由于我们的 redis 服务还没有部署起来，所以这里是跑不起来的，我们先来部署一下 redis 集群。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ docker run -p <span class="token number">5000</span>:5000 --link redis-test:redis-host -d --name web web:v1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="4-Redis-Cluster"><a href="#4-Redis-Cluster" class="headerlink" title="4. Redis Cluster"></a>4. Redis Cluster</h2><p>我们这里要构建一个 Redis 集群，需要修改 Redis 镜像里面的配置，为了方便操作，这里我们先启动容器，设置 entrypoint 为 /bin/bash，然后修改配置，最后手动启动 Redis 实例。</p><h4 id="Redis-Master"><a href="#Redis-Master" class="headerlink" title="Redis Master"></a>Redis Master</h4><p>先拉去 Redis 镜像，然后先启动 Redis Master 实例。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ docker run -it --name redis-master redis /bin/bash<span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Redis 的镜像默认没有配置文件，但是我们可以通过 Volume 的方式映射进去。通过命令 <code>docker inspect &lt;container-id&gt;</code> ，我们可以看到容器挂载的 Volume。如下所示，宿主机目录：<code>/var/lib/docker/volumes/d51e68c64fea7241eb5d036ac2f6be3df3af8df982d59694bbccd48f339be42e/_data</code> ，容器内目录：<code>/data</code> 。也就是说我们在宿主机目录下创建的文件都会映射到容器内的 <code>/data</code> 目录下。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token string">"Mounts"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">&#123;</span>                <span class="token string">"Type"</span><span class="token builtin class-name">:</span> <span class="token string">"volume"</span>,                <span class="token string">"Name"</span><span class="token builtin class-name">:</span> <span class="token string">"d51e68c64fea7241eb5d036ac2f6be3df3af8df982d59694bbccd48f339be42e"</span>,                <span class="token string">"Source"</span><span class="token builtin class-name">:</span> <span class="token string">"/var/lib/docker/volumes/d51e68c64fea7241eb5d036ac2f6be3df3af8df982d59694bbccd48f339be42e/_data"</span>,                <span class="token string">"Destination"</span><span class="token builtin class-name">:</span> <span class="token string">"/data"</span>,                <span class="token string">"Driver"</span><span class="token builtin class-name">:</span> <span class="token string">"local"</span>,                <span class="token string">"Mode"</span><span class="token builtin class-name">:</span> <span class="token string">""</span>,                <span class="token string">"RW"</span><span class="token builtin class-name">:</span> true,                <span class="token string">"Propagation"</span><span class="token builtin class-name">:</span> <span class="token string">""</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">]</span>,<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们创建一个用于 redis 启动的配置文件 redis.conf，如果是默认安装的 redis，只需要修改其中几个字段即可：</p><ul><li>daemonize 从 no 改成 yes；</li><li>logfile 改成 /data/redis.log；</li><li>dir 改成 /var/lib/redis，需要手动创建该目录；</li><li>bind 到 0.0.0.0，默认是 127.0.0.1。</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">bind</span> <span class="token number">0.0</span>.0.0protected-mode <span class="token function">yes</span>port <span class="token number">6379</span>tcp-backlog <span class="token number">511</span><span class="token function">timeout</span> <span class="token number">0</span>tcp-keepalive <span class="token number">300</span>supervised nopidfile /var/run/redis_6379.pidloglevel noticelogfile /data/redis.logdatabases <span class="token number">16</span>save <span class="token number">900</span> <span class="token number">1</span>save <span class="token number">300</span> <span class="token number">10</span>save <span class="token number">60</span> <span class="token number">10000</span>stop-writes-on-bgsave-error <span class="token function">yes</span>rdbcompression <span class="token function">yes</span>rdbchecksum <span class="token function">yes</span>dbfilename dump.rdb<span class="token function">dir</span> /var/lib/redisslave-serve-stale-data <span class="token function">yes</span>slave-read-only <span class="token function">yes</span>repl-diskless-sync norepl-diskless-sync-delay <span class="token number">5</span>repl-disable-tcp-nodelay noslave-priority <span class="token number">100</span>appendonly noappendfilename <span class="token string">"appendonly.aof"</span>appendfsync everysecno-appendfsync-on-rewrite noauto-aof-rewrite-percentage <span class="token number">100</span>auto-aof-rewrite-min-size 64mbaof-load-truncated <span class="token function">yes</span>lua-time-limit <span class="token number">5000</span>slowlog-log-slower-than <span class="token number">10000</span>slowlog-max-len <span class="token number">128</span>latency-monitor-threshold <span class="token number">0</span>notify-keyspace-events <span class="token string">""</span>hash-max-ziplist-entries <span class="token number">512</span>hash-max-ziplist-value <span class="token number">64</span>list-max-ziplist-size -2list-compress-depth <span class="token number">0</span>set-max-intset-entries <span class="token number">512</span>zset-max-ziplist-entries <span class="token number">128</span>zset-max-ziplist-value <span class="token number">64</span>hll-sparse-max-bytes <span class="token number">3000</span>activerehashing <span class="token function">yes</span>client-output-buffer-limit normal <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span>client-output-buffer-limit slave 256mb 64mb <span class="token number">60</span>client-output-buffer-limit pubsub 32mb 8mb <span class="token number">60</span>hz <span class="token number">10</span>aof-rewrite-incremental-fsync <span class="token function">yes</span>daemonize <span class="token function">yes</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改完配置之后，我们通过下面的命令启动 redis master</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># cd /usr/local/bin</span><span class="token comment"># redis-server /data/redis.conf</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>我们可以在容器中启动 redis cli 来验证一下 redis server 是否启动成功。下面就表示 redis-master 启动成功了。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@b8d2918d3f73:/usr/local/bin<span class="token comment"># redis-cli</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> <span class="token builtin class-name">set</span> abc <span class="token number">123</span>OK<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> get abc<span class="token string">"123"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Redis-Slave"><a href="#Redis-Slave" class="headerlink" title="Redis Slave"></a>Redis Slave</h4><p>我们下面启动两个 Redis Slave。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># docker run -ti --name redis-salve1 --link redis-master:master redis /bin/bash</span><span class="token comment"># docker run -ti --name redis-salve2 --link redis-master:master redis /bin/bash</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>需要注意的是启动命令中的 <code>--link</code> 参数，表示将该容器加入到名字为 redis-master 的容器的网络空间，其实就是加入到同一个 network namespace，同时 redis-master 映射到新的 redis 从容器的名字为 master。</p><p>我们下面像修改 redis master 的配置文件一样，通过 Volume 的方式将我们之前的 redis 配置文件拷贝进去，并做如下修改：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">daemonize <span class="token function">yes</span>slaveof master <span class="token number">6379</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>最后一行的 slave 配置表示该 redis 实例为运行在 master:6379 （master 会转换为 ip）的 redis master 的 slave 节点。修改完配置别忘记创建目录配置中的 /var/lib/redis。剩下的启动操作、通过 redis-cli 验证和 redis master 一样。</p><h2 id="5-应用部署构建"><a href="#5-应用部署构建" class="headerlink" title="5. 应用部署构建"></a>5. 应用部署构建</h2><p>现在 Redis 集群已经创建完成了，我们开始启动我们的 web 应用容器，启动两个 web 应用容器。我们先把 web 端口映射到宿主机。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># docker run -p 5001:5000 --link redis-master:redis-host -d --name web-app1 web:v1</span><span class="token comment"># docker run -p 5002:5000 --link redis-master:redis-host -d --name web-app2 web:v1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>两个 web 应用容器分别映射到宿主机的 5001 和 5002 端口。下面我们通过 http 请求来验证一下。</p><p>通过 web-app1 设置一个 key。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">curl</span> <span class="token string">"localhost:5001/set?key=susu&amp;value=hello"</span>OK. We have <span class="token builtin class-name">set</span> susu to be hello<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>通过 web-app2 获取该 Key 的值。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">curl</span> <span class="token string">"localhost:5002/get?key=susu"</span>hello<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这里是为了演示所以将端口映射出来了，实际上端口是没有必要映射出来的。我们将这两个容器停止然后用下面的命令重启一下。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ docker run --link redis-master:redis-host -d --name web-app1 web:v1$ docker run --link redis-master:redis-host -d --name web-app2 web:v1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>我们现在解决一下之前一个悬而未决的问题，HAProxy。通过下面的命令参数启动 HAProxy，主要是将两个 web app 的 host 映射进去。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ docker run -it --name HAProxy --link web-app1:app1 --link web-app2:app2 -p <span class="token number">6301</span>:6301 -v /tmp:/data haproxy /bin/bash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里不仅做了宿主机的端口映射还做了数据卷映射 <code>-v /tmp:/data</code> ，这是为了拷贝配置文件。我们修改的配置文件如下。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">global    log         <span class="token number">127.0</span>.0.1 local2    <span class="token function">chroot</span>      /var/lib/haproxy    pidfile     /var/run/haproxy.pid    maxconn     <span class="token number">4000</span>    daemondefaults    mode                    http    log                     global    option                  httplog    option                  dontlognull    option http-server-close    option forwardfor       except <span class="token number">127.0</span>.0.0/8    option                  redispatch    retries                 <span class="token number">3</span>    <span class="token function">timeout</span> http-request    10s    <span class="token function">timeout</span> queue           1m    <span class="token function">timeout</span> connect         10s    <span class="token function">timeout</span> client          1m    <span class="token function">timeout</span> server          1m    <span class="token function">timeout</span> http-keep-alive 10s    <span class="token function">timeout</span> check           10s    maxconn                 <span class="token number">3000</span>listen webapp    <span class="token builtin class-name">bind</span> <span class="token number">0.0</span>.0.0:6301    stats <span class="token builtin class-name">enable</span>    stats uri /web-app        server app1 app1:5000 check inter <span class="token number">2000</span> rise <span class="token number">2</span> fall <span class="token number">5</span><span class="token comment">#均衡节点</span>        server app2 app2:5000 check inter <span class="token number">2000</span> rise <span class="token number">2</span> fall <span class="token number">5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的配置文件中有几个需要注意的地方：</p><ol><li><p>chroot 的目录必须保证是存在的，不如会报 chroot 失败；</p></li><li><p>listen 的 bind 参数要写在新的一行，这个应该是新版本的 HAProxy 的参数解析发生的变化；</p></li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ haproxy -f /data/haproxy.cfg<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我们下面来验证一下。我们将之前请求的 web server 的端口由 5001 改成 HAProxy 映射出来的端口 6301，然后发现 it works！</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">curl</span> <span class="token string">"localhost:6301/get?key=susu"</span>hello<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="6-总结"><a href="#6-总结" class="headerlink" title="6. 总结"></a>6. 总结</h2><p>本文从实践的角度使用 HAProxy + Web APP + Redis Cluster 构建了一个高可用的服务，虽然这里都是在一个 host 上演示的，但是表达的意思都是一样的。</p><p>本文所有的示例和代码片段都经过实测是可以运行的，运行的操作系统版本如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># cat /etc/redhat-release</span>CentOS Linux release <span class="token number">7.6</span>.1810 <span class="token punctuation">(</span>Core<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>运行的 Docker 版本如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># docker --version</span>Docker version <span class="token number">1.13</span>.1, build 7d71120/1.13.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL高级-04</title>
      <link href="/2021/05/25/mysql-gao-ji-04/"/>
      <url>/2021/05/25/mysql-gao-ji-04/</url>
      
        <content type="html"><![CDATA[<h3 id="一、MySQL存储引擎"><a href="#一、MySQL存储引擎" class="headerlink" title="一、MySQL存储引擎"></a>一、MySQL存储引擎</h3><h4 id="1-MySQL体系结构"><a href="#1-MySQL体系结构" class="headerlink" title="1.MySQL体系结构"></a>1.MySQL体系结构</h4><ul><li><p>体系结构的概念</p><ul><li>任何一套系统当中，每个部件都能起到一定的作用！</li></ul></li><li><p>MySQL的体系结构</p></li></ul><p><img src="https://i.loli.net/2021/05/22/bEgJADYNWaUZiLO.png" alt="02"></p><ul><li>体系结构详解<ul><li>客户端连接<ul><li>支持接口：支持的客户端连接，例如C、Java、PHP等语言来连接MySQL数据库</li></ul></li><li>第一层：网络连接层<ul><li>连接池：管理、缓冲用户的连接，线程处理等需要缓存的需求。</li><li>例如：当客户端发送一个请求连接，会从连接池中获取一个连接进行使用。</li></ul></li><li>第二层：核心服务层<ul><li>管理服务和工具：系统的管理和控制工具，例如备份恢复、复制、集群等。 </li><li>SQL接口：接受SQL命令，并且返回查询结果。</li><li>查询解析器：验证和解析SQL命令，例如过滤条件、语法结构等。 </li><li>查询优化器：在执行查询之前，使用默认的一套优化机制进行优化sql语句</li><li>缓存：如果缓存当中有想查询的数据，则直接将缓存中的数据返回。没有的话再重新查询！</li></ul></li><li>第三层：存储引擎层<ul><li>插件式存储引擎：管理和操作数据的一种机制，包括(存储数据、如何更新、查询数据等)</li></ul></li><li>第四层：系统文件层<ul><li>文件系统：配置文件、数据文件、日志文件、错误文件、二进制文件等等的保存</li></ul></li></ul></li></ul><h4 id="2-MySQL存储引擎"><a href="#2-MySQL存储引擎" class="headerlink" title="2.MySQL存储引擎"></a>2.MySQL存储引擎</h4><ul><li><p>引擎的概念</p><ul><li>生活中，引擎就是整个机器运行的核心，不同的引擎具备不同的功能。</li></ul></li><li><p>MySQL存储引擎的概念</p><ul><li>MySQL数据库使用不同的机制存取表文件 , 机制的差别在于不同的存储方式、索引技巧、锁定水平以及广泛的不同的功能和能力，在MySQL中 , 将这些不同的技术及配套的功能称为<strong>存储引擎</strong></li><li>在关系型数据库中数据的存储是以表的形式存进行储的，所以存储引擎也可以称为<strong>表类型</strong>（即存储和操作此表的类型）。</li><li>Oracle , SqlServer等数据库只有一种存储引擎 , 而MySQL针对不同的需求, 配置MySQL的不同的存储引擎 , 就会让数据库采取了不同的处理数据的方式和扩展功能。</li><li>通过选择不同的引擎 ,能够获取最佳的方案 ,  也能够获得额外的速度或者功能，提高程序的整体效果。所以了解引擎的特性 , 才能贴合我们的需求 , 更好的发挥数据库的性能。</li></ul></li><li><p>MySQL支持的存储引擎</p><ul><li>MySQL5.7支持的引擎包括：InnoDB、MyISAM、MEMORY、Archive、Federate、CSV、BLACKHOLE等</li><li>其中较为常用的有三种：InnoDB、MyISAM、MEMORY</li></ul></li></ul><h4 id="3-常用引擎的特性对比"><a href="#3-常用引擎的特性对比" class="headerlink" title="3.常用引擎的特性对比"></a>3.常用引擎的特性对比</h4><ul><li>常用的存储引擎<ul><li>MyISAM存储引擎<ul><li>访问快,不支持事务和外键。表结构保存在.frm文件中，表数据保存在.MYD文件中，索引保存在.MYI文件中。</li></ul></li><li>InnoDB存储引擎(MySQL5.5版本后默认的存储引擎)<ul><li>支持事务 ,占用磁盘空间大 ,支持并发控制。表结构保存在.frm文件中，如果是共享表空间，数据和索引保存在 innodb_data_home_dir 和 innodb_data_file_path定义的表空间中，可以是多个文件。如果是多表空间存储，每个表的数据和索引单独保存在 .ibd 中。</li></ul></li><li>MEMORY存储引擎<ul><li>内存存储 , 速度快 ,不安全 ,适合小量快速访问的数据。表结构保存在.frm中。</li></ul></li></ul></li><li>特性对比</li></ul><table><thead><tr><th>特性</th><th>MyISAM</th><th>InnoDB</th><th>MEMORY</th></tr></thead><tbody><tr><td>存储限制</td><td>有(平台对文件系统大小的限制)</td><td>64TB</td><td>有(平台的内存限制)</td></tr><tr><td><strong>事务安全</strong></td><td><strong>不支持</strong></td><td><strong>支持</strong></td><td><strong>不支持</strong></td></tr><tr><td><strong>锁机制</strong></td><td><strong>表锁</strong></td><td><strong>表锁/行锁</strong></td><td><strong>表锁</strong></td></tr><tr><td>B+Tree索引</td><td>支持</td><td>支持</td><td>支持</td></tr><tr><td>哈希索引</td><td>不支持</td><td>不支持</td><td>支持</td></tr><tr><td>全文索引</td><td>支持</td><td>支持</td><td>不支持</td></tr><tr><td><strong>集群索引</strong></td><td><strong>不支持</strong></td><td><strong>支持</strong></td><td><strong>不支持</strong></td></tr><tr><td>数据索引</td><td>不支持</td><td>支持</td><td>支持</td></tr><tr><td>数据缓存</td><td>不支持</td><td>支持</td><td>N/A</td></tr><tr><td>索引缓存</td><td>支持</td><td>支持</td><td>N/A</td></tr><tr><td>数据可压缩</td><td>支持</td><td>不支持</td><td>不支持</td></tr><tr><td>空间使用</td><td>低</td><td>高</td><td>N/A</td></tr><tr><td>内存使用</td><td>低</td><td>高</td><td>中等</td></tr><tr><td>批量插入速度</td><td>高</td><td>低</td><td>高</td></tr><tr><td><strong>外键</strong></td><td><strong>不支持</strong></td><td><strong>支持</strong></td><td><strong>不支持</strong></td></tr></tbody></table><h4 id="4-引擎的操作"><a href="#4-引擎的操作" class="headerlink" title="4.引擎的操作"></a>4.引擎的操作</h4><ul><li>查询数据库支持的引擎</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 标准语法</span><span class="token keyword">SHOW</span> ENGINES<span class="token punctuation">;</span><span class="token comment">-- 查询数据库支持的存储引擎</span><span class="token keyword">SHOW</span> ENGINES<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 表含义:</span>  <span class="token operator">-</span> support : 指服务器是否支持该存储引擎  <span class="token operator">-</span> <span class="token keyword">transactions</span> : 指存储引擎是否支持事务  <span class="token operator">-</span> XA : 指存储引擎是否支持分布式事务处理  <span class="token operator">-</span> Savepoints : 指存储引擎是否支持保存点<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>查询某个数据库中所有数据表的引擎</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 标准语法</span><span class="token keyword">SHOW</span> <span class="token keyword">TABLE</span> <span class="token keyword">STATUS</span> <span class="token keyword">FROM</span> 数据库名称<span class="token punctuation">;</span><span class="token comment">-- 查看db9数据库所有表的存储引擎</span><span class="token keyword">SHOW</span> <span class="token keyword">TABLE</span> <span class="token keyword">STATUS</span> <span class="token keyword">FROM</span> db9<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>查询某个数据库中某个数据表的引擎</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 标准语法</span><span class="token keyword">SHOW</span> <span class="token keyword">TABLE</span> <span class="token keyword">STATUS</span> <span class="token keyword">FROM</span> 数据库名称 <span class="token keyword">WHERE</span> NAME <span class="token operator">=</span> <span class="token string">'数据表名称'</span><span class="token punctuation">;</span><span class="token comment">-- 查看db9数据库中stu_score表的存储引擎</span><span class="token keyword">SHOW</span> <span class="token keyword">TABLE</span> <span class="token keyword">STATUS</span> <span class="token keyword">FROM</span> db9 <span class="token keyword">WHERE</span> NAME <span class="token operator">=</span> <span class="token string">'stu_score'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>创建数据表，指定存储引擎</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 标准语法</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> 表名<span class="token punctuation">(</span>列名<span class="token punctuation">,</span>数据类型<span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token keyword">ENGINE</span> <span class="token operator">=</span> 引擎名称<span class="token punctuation">;</span><span class="token comment">-- 创建db11数据库</span><span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> db11<span class="token punctuation">;</span><span class="token comment">-- 使用db11数据库</span><span class="token keyword">USE</span> db11<span class="token punctuation">;</span><span class="token comment">-- 创建engine_test表，指定存储引擎为MyISAM</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> engine_test<span class="token punctuation">(</span>id <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>NAME <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">ENGINE</span> <span class="token operator">=</span> MYISAM<span class="token punctuation">;</span><span class="token comment">-- 查询engine_test表的引擎</span><span class="token keyword">SHOW</span> <span class="token keyword">TABLE</span> <span class="token keyword">STATUS</span> <span class="token keyword">FROM</span> db11 <span class="token keyword">WHERE</span> NAME <span class="token operator">=</span> <span class="token string">'engine_test'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>修改表的存储引擎</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 标准语法</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> 表名 <span class="token keyword">ENGINE</span> <span class="token operator">=</span> 引擎名称<span class="token punctuation">;</span><span class="token comment">-- 修改engine_test表的引擎为InnoDB</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> engine_test <span class="token keyword">ENGINE</span> <span class="token operator">=</span> <span class="token keyword">INNODB</span><span class="token punctuation">;</span><span class="token comment">-- 查询engine_test表的引擎</span><span class="token keyword">SHOW</span> <span class="token keyword">TABLE</span> <span class="token keyword">STATUS</span> <span class="token keyword">FROM</span> db11 <span class="token keyword">WHERE</span> NAME <span class="token operator">=</span> <span class="token string">'engine_test'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-总结：引擎的选择"><a href="#5-总结：引擎的选择" class="headerlink" title="5.总结：引擎的选择"></a>5.总结：引擎的选择</h4><ul><li>MyISAM ：由于MyISAM不支持事务、不支持外键、支持全文检索和表级锁定，读写相互阻塞，读取速度快，节约资源，所以如果应用是以<strong>查询操作</strong>和<strong>插入操作</strong>为主，只有很少的<strong>更新和删除</strong>操作，并且对事务的完整性、并发性要求不是很高，那么选择这个存储引擎是非常合适的。</li><li>InnoDB : 是MySQL的默认存储引擎， 由于InnoDB支持事务、支持外键、行级锁定 ，支持所有辅助索引(5.5.5后不支持全文检索)，高缓存，所以用于对事务的完整性有比较高的要求，在并发条件下要求数据的一致性，读写频繁的操作，那么InnoDB存储引擎是比较合适的选择，比如BBS、计费系统、充值转账等</li><li>MEMORY：将所有数据保存在RAM中，在需要快速定位记录和其他类似数据环境下，可以提供更快的访问。MEMORY的缺陷就是对表的大小有限制，太大的表无法缓存在内存中，其次是要确保表的数据可以恢复，数据库异常终止后表中的数据是可以恢复的。MEMORY表通常用于更新不太频繁的小表，用以快速得到访问结果。</li><li>总结：针对不同的需求场景，来选择最适合的存储引擎即可！如果不确定、则使用数据库默认的存储引擎！</li></ul><h3 id="二、MySQL索引"><a href="#二、MySQL索引" class="headerlink" title="二、MySQL索引"></a>二、MySQL索引</h3><h4 id="1-索引的概念"><a href="#1-索引的概念" class="headerlink" title="1.索引的概念"></a>1.索引的概念</h4><ul><li>我们之前学习过集合，其中的ArrayList集合的特点之一就是有索引。那么有索引会带来哪些好处呢？</li><li>没错，查询数据快！我们可以通过索引来快速查找到想要的数据。那么对于我们的MySQL数据库中的索引功能也是类似的！</li><li>MySQL数据库中的索引：是帮助MySQL高效获取数据的一种数据结构！所以，索引的本质就是数据结构。</li><li>在表数据之外，数据库系统还维护着满足特定查找算法的数据结构，这些数据结构以某种方式指向数据， 这样就可以在这些数据结构上实现高级查找算法，这种数据结构就是索引。</li><li>一张数据表，用于保存数据。   一个索引配置文件，用于保存索引，每个索引都去指向了某一个数据(表格演示)</li><li>举例，无索引和有索引的查找原理</li></ul><p><img src="https://i.loli.net/2021/05/22/I8j3rUwCdhnFPuZ.png" alt="04"></p><h4 id="2-索引的分类"><a href="#2-索引的分类" class="headerlink" title="2.索引的分类"></a>2.索引的分类</h4><ul><li>功能分类 <ul><li>普通索引： 最基本的索引，它没有任何限制。</li><li>唯一索引：索引列的值必须唯一，但允许有空值。如果是组合索引，则列值组合必须唯一。</li><li>主键索引：一种特殊的唯一索引，不允许有空值。一般在建表时同时创建主键索引。</li><li>组合索引：顾名思义，就是将单列索引进行组合。</li><li>外键索引：只有InnoDB引擎支持外键索引，用来保证数据的一致性、完整性和实现级联操作。</li><li>全文索引：快速匹配全部文档的方式。InnoDB引擎5.6版本后才支持全文索引。MEMORY引擎不支持。</li></ul></li><li>结构分类<ul><li>B+Tree索引 ：MySQL使用最频繁的一个索引数据结构，是InnoDB和MyISAM存储引擎默认的索引类型。</li><li>Hash索引 : MySQL中Memory存储引擎默认支持的索引类型。</li></ul></li></ul><h4 id="3-索引的操作"><a href="#3-索引的操作" class="headerlink" title="3.索引的操作"></a>3.索引的操作</h4><ul><li>数据准备</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 创建db12数据库</span><span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> db12<span class="token punctuation">;</span><span class="token comment">-- 使用db12数据库</span><span class="token keyword">USE</span> db12<span class="token punctuation">;</span><span class="token comment">-- 创建student表</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> student<span class="token punctuation">(</span>id <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>NAME <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>age <span class="token keyword">INT</span><span class="token punctuation">,</span>score <span class="token keyword">INT</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 添加数据</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> student <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token string">'张三'</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">98</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token string">'李四'</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token number">95</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token string">'王五'</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">96</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token string">'赵六'</span><span class="token punctuation">,</span><span class="token number">26</span><span class="token punctuation">,</span><span class="token number">94</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token string">'周七'</span><span class="token punctuation">,</span><span class="token number">27</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>创建索引<ul><li>注意：如果一个表中有一列是主键，那么就会默认为其创建主键索引！(主键列不需要单独创建索引)</li></ul></li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 标准语法</span><span class="token keyword">CREATE</span> <span class="token punctuation">[</span><span class="token keyword">UNIQUE</span><span class="token operator">|</span>FULLTEXT<span class="token punctuation">]</span> <span class="token keyword">INDEX</span> 索引名称<span class="token punctuation">[</span><span class="token keyword">USING</span> 索引类型<span class="token punctuation">]</span>  <span class="token comment">-- 默认是B+TREE</span><span class="token keyword">ON</span> 表名<span class="token punctuation">(</span>列名<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 为student表中姓名列创建一个普通索引</span><span class="token keyword">CREATE</span> <span class="token keyword">INDEX</span> idx_name <span class="token keyword">ON</span> student<span class="token punctuation">(</span>NAME<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 为student表中年龄列创建一个唯一索引</span><span class="token keyword">CREATE</span> <span class="token keyword">UNIQUE</span> <span class="token keyword">INDEX</span> idx_age <span class="token keyword">ON</span> student<span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>查看索引</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 标准语法</span><span class="token keyword">SHOW</span> <span class="token keyword">INDEX</span> <span class="token keyword">FROM</span> 表名<span class="token punctuation">;</span><span class="token comment">-- 查看student表中的索引</span><span class="token keyword">SHOW</span> <span class="token keyword">INDEX</span> <span class="token keyword">FROM</span> student<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>alter语句添加索引</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 普通索引</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> 表名 <span class="token keyword">ADD</span> <span class="token keyword">INDEX</span> 索引名称<span class="token punctuation">(</span>列名<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 组合索引</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> 表名 <span class="token keyword">ADD</span> <span class="token keyword">INDEX</span> 索引名称<span class="token punctuation">(</span>列名<span class="token number">1</span><span class="token punctuation">,</span>列名<span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 主键索引</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> 表名 <span class="token keyword">ADD</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">(</span>主键列名<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">-- 外键索引(添加外键约束，就是外键索引)</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> 表名 <span class="token keyword">ADD</span> <span class="token keyword">CONSTRAINT</span> 外键名 <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>本表外键列名<span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> 主表名<span class="token punctuation">(</span>主键列名<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 唯一索引</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> 表名 <span class="token keyword">ADD</span> <span class="token keyword">UNIQUE</span> 索引名称<span class="token punctuation">(</span>列名<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 全文索引(mysql只支持文本类型)</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> 表名 <span class="token keyword">ADD</span> FULLTEXT 索引名称<span class="token punctuation">(</span>列名<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 为student表中name列添加全文索引</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> student <span class="token keyword">ADD</span> FULLTEXT idx_fulltext_name<span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 查看student表中的索引</span><span class="token keyword">SHOW</span> <span class="token keyword">INDEX</span> <span class="token keyword">FROM</span> student<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>删除索引</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 标准语法</span><span class="token keyword">DROP</span> <span class="token keyword">INDEX</span> 索引名称 <span class="token keyword">ON</span> 表名<span class="token punctuation">;</span><span class="token comment">-- 删除student表中的idx_score索引</span><span class="token keyword">DROP</span> <span class="token keyword">INDEX</span> idx_score <span class="token keyword">ON</span> student<span class="token punctuation">;</span><span class="token comment">-- 查看student表中的索引</span><span class="token keyword">SHOW</span> <span class="token keyword">INDEX</span> <span class="token keyword">FROM</span> student<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-索引的实现原则"><a href="#4-索引的实现原则" class="headerlink" title="4.索引的实现原则"></a>4.索引的实现原则</h4><ul><li>索引是在MySQL的存储引擎中实现的，所以每种存储引擎的索引不一定完全相同，也不是所有的引擎支持所有的索引类型。这里我们主要介绍InnoDB引擎的实现的<strong>B+Tree索引</strong>。</li><li>B+Tree是一种树型数据结构，是B-Tree的变种。通常使用在数据库和操作系统中的文件系统，特点是能够保持数据稳定有序。我们逐步的来了解一下。</li></ul><h5 id="4-1磁盘存储"><a href="#4-1磁盘存储" class="headerlink" title="4.1磁盘存储"></a>4.1磁盘存储</h5><ul><li>系统从磁盘读取数据到内存时是以磁盘块（block）为基本单位的</li><li>位于同一个磁盘块中的数据会被一次性读取出来，而不是需要什么取什么。</li><li>InnoDB存储引擎中有页（Page）的概念，页是其磁盘管理的最小单位。InnoDB存储引擎中默认每个页的大小为16KB。</li><li>InnoDB引擎将若干个地址连接磁盘块，以此来达到页的大小16KB，在查询数据时如果一个页中的每条数据都能有助于定位数据记录的位置，这将会减少磁盘I/O次数，提高查询效率。</li></ul><h5 id="4-2BTree"><a href="#4-2BTree" class="headerlink" title="4.2BTree"></a>4.2BTree</h5><ul><li><p>BTree结构的数据可以让系统高效的找到数据所在的磁盘块。为了描述BTree，首先定义一条记录为一个二元组[key, data] ，key为记录的键值，对应表中的主键值，data为一行记录中除主键外的数据。对于不同的记录，key值互不相同。BTree中的每个节点根据实际情况可以包含大量的关键字信息和分支，如下图所示为一个3阶的BTree： </p><p><img src="https://i.loli.net/2021/05/22/I24R8TsFyiVEd7O.png" alt="05"></p></li><li><p>根据图中结构显示，每个节点占用一个盘块的磁盘空间，一个节点上有两个升序排序的关键字和三个指向子树根节点的指针，指针存储的是子节点所在磁盘块的地址。两个关键词划分成的三个范围域对应三个指针指向的子树的数据的范围域。以根节点为例，关键字为17和35，P1指针指向的子树的数据范围为小于17，P2指针指向的子树的数据范围为17~35，P3指针指向的子树的数据范围为大于35。</p></li></ul><p>查找顺序：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">模拟查找<span class="token number">15</span>的过程 : <span class="token number">1.</span>根节点找到磁盘块<span class="token number">1</span>，读入内存。【磁盘I<span class="token operator">/</span>O操作第<span class="token number">1</span>次】比较关键字<span class="token number">15</span>在区间（<span class="token operator">&lt;</span><span class="token number">17</span>），找到磁盘块<span class="token number">1</span>的指针P1。<span class="token number">2.</span>P1指针找到磁盘块<span class="token number">2</span>，读入内存。【磁盘I<span class="token operator">/</span>O操作第<span class="token number">2</span>次】比较关键字<span class="token number">15</span>在区间（<span class="token operator">></span><span class="token number">12</span>），找到磁盘块<span class="token number">2</span>的指针P3。<span class="token number">3.</span>P3指针找到磁盘块<span class="token number">7</span>，读入内存。【磁盘I<span class="token operator">/</span>O操作第<span class="token number">3</span>次】在磁盘块<span class="token number">7</span>中找到关键字<span class="token number">15</span>。<span class="token comment">-- 分析上面过程，发现需要3次磁盘I/O操作，和3次内存查找操作。</span><span class="token comment">-- 由于内存中的关键字是一个有序表结构，可以利用二分法查找提高效率。而3次磁盘I/O操作是影响整个BTree查找效率的决定因素。BTree使用较少的节点个数，使每次磁盘I/O取到内存的数据都发挥了作用，从而提高了查询效率。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="5-3B-Tree"><a href="#5-3B-Tree" class="headerlink" title="5.3B+Tree"></a>5.3B+Tree</h5><ul><li>B+Tree是在BTree基础上的一种优化，使其更适合实现外存储索引结构，InnoDB存储引擎就是用B+Tree实现其索引结构。</li><li>从上一节中的BTree结构图中可以看到每个节点中不仅包含数据的key值，还有data值。而每一个页的存储空间是有限的，如果data数据较大时将会导致每个节点（即一个页）能存储的key的数量很小，当存储的数据量很大时同样会导致B-Tree的深度较大，增大查询时的磁盘I/O次数，进而影响查询效率。在B+Tree中，所有数据记录节点都是按照键值大小顺序存放在同一层的叶子节点上，而非叶子节点上只存储key值信息，这样可以大大加大每个节点存储的key值数量，降低B+Tree的高度。</li><li>B+Tree相对于BTree区别：<ul><li>非叶子节点只存储键值信息。</li><li>所有叶子节点之间都有一个连接指针。</li><li>数据记录都存放在叶子节点中。</li></ul></li><li>将上一节中的BTree优化，由于B+Tree的非叶子节点只存储键值信息，假设每个磁盘块能存储4个键值及指针信息，则变成B+Tree后其结构如下图所示：</li></ul><p><img src="https://i.loli.net/2021/05/22/PIAXtWdy8zGcpxZ.png" alt="06"></p><p>通常在B+Tree上有两个头指针，一个指向根节点，另一个指向关键字最小的叶子节点，而且所有叶子节点（即数据节点）之间是一种链式环结构。因此可以对B+Tree进行两种查找运算：</p><ul><li>【有范围】对于主键的范围查找和分页查找</li><li>【有顺序】从根节点开始，进行随机查找</li></ul><p>实际情况中每个节点可能不能填充满，因此在数据库中，B+Tree的高度一般都在2<del>4层。MySQL的InnoDB存储引擎在设计时是将根节点常驻内存的，也就是说查找某一键值的行记录时最多只需要1</del>3次磁盘I/O操作。</p><h4 id="5-总结：索引的设计原则"><a href="#5-总结：索引的设计原则" class="headerlink" title="5.总结：索引的设计原则"></a>5.总结：索引的设计原则</h4><p>索引的设计可以遵循一些已有的原则，创建索引的时候请尽量考虑符合这些原则，便于提升索引的使用效率，更高效的使用索引。</p><ul><li>创建索引时的原则<ul><li>对查询频次较高，且数据量比较大的表建立索引。</li><li>使用唯一索引，区分度越高，使用索引的效率越高。</li><li>索引字段的选择，最佳候选列应当从where子句的条件中提取，如果where子句中的组合比较多，那么应当挑选最常用、过滤效果最好的列的组合。</li><li>使用短索引，索引创建之后也是使用硬盘来存储的，因此提升索引访问的I/O效率，也可以提升总体的访问效率。假如构成索引的字段总长度比较短，那么在给定大小的存储块内可以存储更多的索引值，相应的可以有效的提升MySQL访问索引的I/O效率。</li><li>索引可以有效的提升查询数据的效率，但索引数量不是多多益善，索引越多，维护索引的代价自然也就水涨船高。对于插入、更新、删除等DML操作比较频繁的表来说，索引过多，会引入相当高的维护代价，降低DML操作的效率，增加相应操作的时间消耗。另外索引过多的话，MySQL也会犯选择困难病，虽然最终仍然会找到一个可用的索引，但无疑提高了选择的代价。</li></ul></li><li>联合索引的特点</li></ul><p>在mysql建立联合索引时会遵循最左前缀匹配的原则，即最左优先，在检索数据时从联合索引的最左边开始匹配，<br>对列name列、address和列phone列建一个联合索引</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> <span class="token keyword">user</span> <span class="token keyword">ADD</span> <span class="token keyword">INDEX</span> index_three<span class="token punctuation">(</span>name<span class="token punctuation">,</span>address<span class="token punctuation">,</span>phone<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>联合索引index_three实际建立了(name)、(name,address)、(name,address,phone)三个索引。所以下面的三个SQL语句都可以命中索引。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token keyword">user</span> <span class="token keyword">WHERE</span> address <span class="token operator">=</span> <span class="token string">'北京'</span> <span class="token operator">AND</span> phone <span class="token operator">=</span> <span class="token string">'12345'</span> <span class="token operator">AND</span> name <span class="token operator">=</span> <span class="token string">'张三'</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token keyword">user</span> <span class="token keyword">WHERE</span> name <span class="token operator">=</span> <span class="token string">'张三'</span> <span class="token operator">AND</span> address <span class="token operator">=</span> <span class="token string">'北京'</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token keyword">user</span> <span class="token keyword">WHERE</span> name <span class="token operator">=</span> <span class="token string">'张三'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>上面三个查询语句执行时会依照最左前缀匹配原则，检索时分别会使用索引</p><pre class="line-numbers language-none"><code class="language-none">(name,address,phone)(name,address)(name)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>进行数据匹配。</p><p>索引的字段可以是任意顺序的，如：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 优化器会帮助我们调整顺序，下面的SQL语句都可以命中索引</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token keyword">user</span> <span class="token keyword">WHERE</span> address <span class="token operator">=</span> <span class="token string">'北京'</span> <span class="token operator">AND</span> phone <span class="token operator">=</span> <span class="token string">'12345'</span> <span class="token operator">AND</span> name <span class="token operator">=</span> <span class="token string">'张三'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Mysql的优化器会帮助我们调整where条件中的顺序，以匹配我们建立的索引。</p><p>联合索引中最左边的列不包含在条件查询中，所以根据上面的原则，下面的SQL语句就不会命中索引。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 联合索引中最左边的列不包含在条件查询中，下面的SQL语句就不会命中索引</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token keyword">user</span> <span class="token keyword">WHERE</span> address <span class="token operator">=</span> <span class="token string">'北京'</span> <span class="token operator">AND</span> phone <span class="token operator">=</span> <span class="token string">'12345'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="三、MySQL锁"><a href="#三、MySQL锁" class="headerlink" title="三、MySQL锁"></a>三、MySQL锁</h3><h4 id="1-锁的概念"><a href="#1-锁的概念" class="headerlink" title="1.锁的概念"></a>1.锁的概念</h4><ul><li><p>之前我们学习过多线程，多线程当中如果想保证数据的准确性是如何实现的呢？没错，通过同步实现。同步就相当于是加锁。加了锁以后有什么好处呢？当一个线程真正在操作数据的时候，其他线程只能等待。当一个线程执行完毕后，释放锁。其他线程才能进行操作！</p></li><li><p>那么我们的MySQL数据库中的锁的功能也是类似的。在我们学习事务的时候，讲解过事务的隔离性，可能会出现脏读、不可重复读、幻读的问题，当时我们的解决方式是通过修改事务的隔离级别来控制，但是数据库的隔离级别呢我们并不推荐修改。所以，锁的作用也可以解决掉之前的问题！</p></li><li><p>锁机制 : 数据库为了保证数据的一致性，而使用各种共享的资源在被并发访问时变得有序所设计的一种规则。</p></li><li><p>举例，在电商网站购买商品时，商品表中只存有1个商品，而此时又有两个人同时购买，那么谁能买到就是一个关键的问题。</p><p>这里会用到事务进行一系列的操作：</p><ol><li>先从商品表中取出物品的数据</li><li>然后插入订单</li><li>付款后，再插入付款表信息</li><li>更新商品表中商品的数量</li></ol><p>以上过程中，使用锁可以对商品数量数据信息进行保护，实现隔离，即只允许第一位用户完成整套购买流程，而其他用户只能等待，这样就解决了并发中的矛盾问题。</p></li><li><p>在数据库中，数据是一种供许多用户共享访问的资源，如何保证数据并发访问的一致性、有效性，是所有数据库必须解决的一个问题，MySQL由于自身架构的特点，在不同的存储引擎中，都设计了面对特定场景的锁定机制，所以引擎的差别，导致锁机制也是有很大差别的。</p></li></ul><h4 id="2-锁的分类"><a href="#2-锁的分类" class="headerlink" title="2.锁的分类"></a>2.锁的分类</h4><ul><li>按操作分类：<ul><li>共享锁：也叫读锁。针对同一份数据，多个事务读取操作可以同时加锁而不互相影响 ，但是不能修改数据记录。</li><li>排他锁：也叫写锁。当前的操作没有完成前,会阻断其他操作的读取和写入</li></ul></li><li>按粒度分类：<ul><li>表级锁：操作时，会锁定整个表。开销小，加锁快；不会出现死锁；锁定力度大，发生锁冲突概率高，并发度最低。偏向于MyISAM存储引擎！</li><li>行级锁：操作时，会锁定当前操作行。开销大，加锁慢；会出现死锁；锁定粒度小，发生锁冲突的概率低，并发度高。偏向于InnoDB存储引擎！</li><li>页级锁：锁的粒度、发生冲突的概率和加锁的开销介于表锁和行锁之间，会出现死锁，并发性能一般。</li></ul></li><li>按使用方式分类：<ul><li>悲观锁：每次查询数据时都认为别人会修改，很悲观，所以查询时加锁。</li><li>乐观锁：每次查询数据时都认为别人不会修改，很乐观，但是更新时会判断一下在此期间别人有没有去更新这个数据</li></ul></li><li>不同存储引擎支持的锁</li></ul><table><thead><tr><th>存储引擎</th><th>表级锁</th><th>行级锁</th><th>页级锁</th></tr></thead><tbody><tr><td>MyISAM</td><td>支持</td><td>不支持</td><td>不支持</td></tr><tr><td>InnoDB</td><td>支持</td><td>支持</td><td>不支持</td></tr><tr><td>MEMORY</td><td>支持</td><td>不支持</td><td>不支持</td></tr><tr><td>BDB</td><td>支持</td><td>不支持</td><td>支持</td></tr></tbody></table><h4 id="3-演示InnoDB锁"><a href="#3-演示InnoDB锁" class="headerlink" title="3.演示InnoDB锁"></a>3.演示InnoDB锁</h4><ul><li>数据准备</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 创建db13数据库</span><span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> db13<span class="token punctuation">;</span><span class="token comment">-- 使用db13数据库</span><span class="token keyword">USE</span> db13<span class="token punctuation">;</span><span class="token comment">-- 创建student表</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> student<span class="token punctuation">(</span>id <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>NAME <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>age <span class="token keyword">INT</span><span class="token punctuation">,</span>score <span class="token keyword">INT</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 添加数据</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> student <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token string">'张三'</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token string">'李四'</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token number">95</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token string">'王五'</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">98</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token string">'赵六'</span><span class="token punctuation">,</span><span class="token number">26</span><span class="token punctuation">,</span><span class="token number">97</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>共享锁</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 标准语法</span><span class="token keyword">SELECT</span>语句 <span class="token keyword">LOCK</span> <span class="token operator">IN</span> <span class="token keyword">SHARE</span> <span class="token keyword">MODE</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 窗口1</span><span class="token comment">/*共享锁：数据可以被多个事务查询，但是不能修改*/</span><span class="token comment">-- 开启事务</span><span class="token keyword">START</span> <span class="token keyword">TRANSACTION</span><span class="token punctuation">;</span><span class="token comment">-- 查询id为1的数据记录。加入共享锁</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> student <span class="token keyword">WHERE</span> id<span class="token operator">=</span><span class="token number">1</span> <span class="token keyword">LOCK</span> <span class="token operator">IN</span> <span class="token keyword">SHARE</span> <span class="token keyword">MODE</span><span class="token punctuation">;</span><span class="token comment">-- 查询分数为99分的数据记录。加入共享锁</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> student <span class="token keyword">WHERE</span> score<span class="token operator">=</span><span class="token number">99</span> <span class="token keyword">LOCK</span> <span class="token operator">IN</span> <span class="token keyword">SHARE</span> <span class="token keyword">MODE</span><span class="token punctuation">;</span><span class="token comment">-- 提交事务</span><span class="token keyword">COMMIT</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 窗口2</span><span class="token comment">-- 开启事务</span><span class="token keyword">START</span> <span class="token keyword">TRANSACTION</span><span class="token punctuation">;</span><span class="token comment">-- 查询id为1的数据记录(普通查询，可以查询)</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> student <span class="token keyword">WHERE</span> id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">-- 查询id为1的数据记录，并加入共享锁(可以查询。共享锁和共享锁兼容)</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> student <span class="token keyword">WHERE</span> id<span class="token operator">=</span><span class="token number">1</span> <span class="token keyword">LOCK</span> <span class="token operator">IN</span> <span class="token keyword">SHARE</span> <span class="token keyword">MODE</span><span class="token punctuation">;</span><span class="token comment">-- 修改id为1的姓名为张三三(不能修改，会出现锁的情况。只有窗口1提交事务后，才能修改成功)</span><span class="token keyword">UPDATE</span> student <span class="token keyword">SET</span> NAME<span class="token operator">=</span><span class="token string">'张三三'</span> <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">-- 修改id为2的姓名为李四四(修改成功，InnoDB引擎默认是行锁)</span><span class="token keyword">UPDATE</span> student <span class="token keyword">SET</span> NAME<span class="token operator">=</span><span class="token string">'李四四'</span> <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">-- 修改id为3的姓名为王五五(注意：InnoDB引擎如果不采用带索引的列。则会提升为表锁)</span><span class="token keyword">UPDATE</span> student <span class="token keyword">SET</span> NAME<span class="token operator">=</span><span class="token string">'王五五'</span> <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token comment">-- 提交事务</span><span class="token keyword">COMMIT</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>排他锁</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 标准语法</span><span class="token keyword">SELECT</span>语句 <span class="token keyword">FOR</span> <span class="token keyword">UPDATE</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 窗口1</span><span class="token comment">/*排他锁：加锁的数据，不能被其他事务加锁查询或修改*/</span><span class="token comment">-- 开启事务</span><span class="token keyword">START</span> <span class="token keyword">TRANSACTION</span><span class="token punctuation">;</span><span class="token comment">-- 查询id为1的数据记录，并加入排他锁</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> student <span class="token keyword">WHERE</span> id<span class="token operator">=</span><span class="token number">1</span> <span class="token keyword">FOR</span> <span class="token keyword">UPDATE</span><span class="token punctuation">;</span><span class="token comment">-- 提交事务</span><span class="token keyword">COMMIT</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 窗口2</span><span class="token comment">-- 开启事务</span><span class="token keyword">START</span> <span class="token keyword">TRANSACTION</span><span class="token punctuation">;</span><span class="token comment">-- 查询id为1的数据记录(普通查询没问题)</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> student <span class="token keyword">WHERE</span> id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">-- 查询id为1的数据记录，并加入共享锁(不能查询。因为排他锁不能和其他锁共存)</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> student <span class="token keyword">WHERE</span> id<span class="token operator">=</span><span class="token number">1</span> <span class="token keyword">LOCK</span> <span class="token operator">IN</span> <span class="token keyword">SHARE</span> <span class="token keyword">MODE</span><span class="token punctuation">;</span><span class="token comment">-- 查询id为1的数据记录，并加入排他锁(不能查询。因为排他锁不能和其他锁共存)</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> student <span class="token keyword">WHERE</span> id<span class="token operator">=</span><span class="token number">1</span> <span class="token keyword">FOR</span> <span class="token keyword">UPDATE</span><span class="token punctuation">;</span><span class="token comment">-- 修改id为1的姓名为张三(不能修改，会出现锁的情况。只有窗口1提交事务后，才能修改成功)</span><span class="token keyword">UPDATE</span> student <span class="token keyword">SET</span> NAME<span class="token operator">=</span><span class="token string">'张三'</span> <span class="token keyword">WHERE</span> id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">-- 提交事务</span><span class="token keyword">COMMIT</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>注意：锁的兼容性<ul><li>共享锁和共享锁     兼容</li><li>共享锁和排他锁     冲突</li><li>排他锁和排他锁     冲突</li><li>排他锁和共享锁     冲突</li></ul></li></ul><h4 id="4-演示MyISAM锁"><a href="#4-演示MyISAM锁" class="headerlink" title="4.演示MyISAM锁"></a>4.演示MyISAM锁</h4><ul><li>数据准备</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 创建product表</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> product<span class="token punctuation">(</span>id <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>NAME <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>price <span class="token keyword">INT</span><span class="token punctuation">)</span><span class="token keyword">ENGINE</span> <span class="token operator">=</span> MYISAM<span class="token punctuation">;</span>  <span class="token comment">-- 指定存储引擎为MyISAM</span><span class="token comment">-- 添加数据</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> product <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token string">'华为手机'</span><span class="token punctuation">,</span><span class="token number">4999</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token string">'小米手机'</span><span class="token punctuation">,</span><span class="token number">2999</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token string">'苹果'</span><span class="token punctuation">,</span><span class="token number">8999</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token string">'中兴'</span><span class="token punctuation">,</span><span class="token number">1999</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>读锁</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 标准语法</span><span class="token comment">-- 加锁</span><span class="token keyword">LOCK</span> <span class="token keyword">TABLE</span> 表名 <span class="token keyword">READ</span><span class="token punctuation">;</span><span class="token comment">-- 解锁(将当前会话所有的表进行解锁)</span><span class="token keyword">UNLOCK</span> <span class="token keyword">TABLES</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 窗口1</span><span class="token comment">/*读锁：所有连接只能读取数据，不能修改*/</span><span class="token comment">-- 为product表加入读锁</span><span class="token keyword">LOCK</span> <span class="token keyword">TABLE</span> product <span class="token keyword">READ</span><span class="token punctuation">;</span><span class="token comment">-- 查询product表(查询成功)</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> product<span class="token punctuation">;</span><span class="token comment">-- 修改华为手机的价格为5999(修改失败)</span><span class="token keyword">UPDATE</span> product <span class="token keyword">SET</span> price<span class="token operator">=</span><span class="token number">5999</span> <span class="token keyword">WHERE</span> id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">-- 解锁</span><span class="token keyword">UNLOCK</span> <span class="token keyword">TABLES</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 窗口2</span><span class="token comment">-- 查询product表(查询成功)</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> product<span class="token punctuation">;</span><span class="token comment">-- 修改华为手机的价格为5999(不能修改，窗口1解锁后才能修改成功)</span><span class="token keyword">UPDATE</span> product <span class="token keyword">SET</span> price<span class="token operator">=</span><span class="token number">5999</span> <span class="token keyword">WHERE</span> id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>写锁</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 标准语法</span><span class="token comment">-- 加锁</span><span class="token keyword">LOCK</span> <span class="token keyword">TABLE</span> 表名 <span class="token keyword">WRITE</span><span class="token punctuation">;</span><span class="token comment">-- 解锁(将当前会话所有的表进行解锁)</span><span class="token keyword">UNLOCK</span> <span class="token keyword">TABLES</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 窗口1</span><span class="token comment">/*写锁：其他连接不能查询和修改数据*/</span><span class="token comment">-- 为product表添加写锁</span><span class="token keyword">LOCK</span> <span class="token keyword">TABLE</span> product <span class="token keyword">WRITE</span><span class="token punctuation">;</span><span class="token comment">-- 查询product表(查询成功)</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> product<span class="token punctuation">;</span><span class="token comment">-- 修改小米手机的金额为3999(修改成功)</span><span class="token keyword">UPDATE</span> product <span class="token keyword">SET</span> price<span class="token operator">=</span><span class="token number">3999</span> <span class="token keyword">WHERE</span> id<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">-- 解锁</span><span class="token keyword">UNLOCK</span> <span class="token keyword">TABLES</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 窗口2</span><span class="token comment">-- 查询product表(不能查询。只有窗口1解锁后才能查询成功)</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> product<span class="token punctuation">;</span><span class="token comment">-- 修改小米手机的金额为2999(不能修改。只有窗口1解锁后才能修改成功)</span><span class="token keyword">UPDATE</span> product <span class="token keyword">SET</span> price<span class="token operator">=</span><span class="token number">2999</span> <span class="token keyword">WHERE</span> id<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-演示悲观锁和乐观锁"><a href="#5-演示悲观锁和乐观锁" class="headerlink" title="5.演示悲观锁和乐观锁"></a>5.演示悲观锁和乐观锁</h4><ul><li><p>悲观锁的概念</p><ul><li>就是很悲观，它对于数据被外界修改的操作持保守态度，认为数据随时会修改。</li><li>整个数据处理中需要将数据加锁。悲观锁一般都是依靠关系型数据库提供的锁机制。</li><li>我们之前所学的行锁，表锁不论是读写锁都是悲观锁。</li></ul></li><li><p>乐观锁的概念</p><ul><li>就是很乐观，每次自己操作数据的时候认为没有人会来修改它，所以不去加锁。</li><li>但是在更新的时候会去判断在此期间数据有没有被修改。</li><li>需要用户自己去实现，不会发生并发抢占资源，只有在提交操作的时候检查是否违反数据完整性。</li></ul></li><li><p>悲观锁和乐观锁使用前提</p><ul><li>对于读的操作远多于写的操作的时候，这时候一个更新操作加锁会阻塞所有的读取操作，降低了吞吐量。最后还要释放锁，锁是需要一些开销的，这时候可以选择乐观锁。</li><li>如果是读写比例差距不是非常大或者系统没有响应不及时，吞吐量瓶颈的问题，那就不要去使用乐观锁，它增加了复杂度，也带来了业务额外的风险。这时候可以选择悲观锁。</li></ul></li><li><p>乐观锁的实现方式</p><ul><li><p>版本号</p><ul><li>给数据表中添加一个version列，每次更新后都将这个列的值加1。</li><li>读取数据时，将版本号读取出来，在执行更新的时候，比较版本号。</li><li>如果相同则执行更新，如果不相同，说明此条数据已经发生了变化。</li><li>用户自行根据这个通知来决定怎么处理，比如重新开始一遍，或者放弃本次更新。</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 创建city表</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> city<span class="token punctuation">(</span>id <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>  <span class="token comment">-- 城市id</span>NAME <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                   <span class="token comment">-- 城市名称</span>VERSION <span class="token keyword">INT</span>                         <span class="token comment">-- 版本号</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 添加数据</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> city <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token string">'北京'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token string">'上海'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token string">'广州'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token string">'深圳'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 修改北京为北京市</span><span class="token comment">-- 1.查询北京的version</span><span class="token keyword">SELECT</span> VERSION <span class="token keyword">FROM</span> city <span class="token keyword">WHERE</span> NAME<span class="token operator">=</span><span class="token string">'北京'</span><span class="token punctuation">;</span><span class="token comment">-- 2.修改北京为北京市，版本号+1。并对比版本号</span><span class="token keyword">UPDATE</span> city <span class="token keyword">SET</span> NAME<span class="token operator">=</span><span class="token string">'北京市'</span><span class="token punctuation">,</span>VERSION<span class="token operator">=</span>VERSION<span class="token operator">+</span><span class="token number">1</span> <span class="token keyword">WHERE</span> NAME<span class="token operator">=</span><span class="token string">'北京'</span> <span class="token operator">AND</span> VERSION<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>时间戳</p><ul><li>和版本号方式基本一样，给数据表中添加一个列，名称无所谓，数据类型需要是timestamp</li><li>每次更新后都将最新时间插入到此列。</li><li>读取数据时，将时间读取出来，在执行更新的时候，比较时间。</li><li>如果相同则执行更新，如果不相同，说明此条数据已经发生了变化。</li></ul></li></ul></li></ul><h4 id="6-锁的总结"><a href="#6-锁的总结" class="headerlink" title="6.锁的总结"></a>6.锁的总结</h4><ul><li><p>表锁和行锁</p><ul><li>行锁：锁的粒度更细，加行锁的性能损耗较大。并发处理能力较高。InnoDB引擎默认支持！</li><li>表锁：锁的粒度较粗，加表锁的性能损耗较小。并发处理能力较低。InnoDB、MyISAM引擎支持！</li></ul></li><li><p>InnoDB锁优化建议</p><ul><li><p>尽量通过带索引的列来完成数据查询，从而避免InnoDB无法加行锁而升级为表锁。</p></li><li><p>合理设计索引，索引要尽可能准确，尽可能的缩小锁定范围，避免造成不必要的锁定。</p></li><li><p>尽可能减少基于范围的数据检索过滤条件。</p></li><li><p>尽量控制事务的大小，减少锁定的资源量和锁定时间长度。</p></li><li><p>在同一个事务中，尽可能做到一次锁定所需要的所有资源，减少死锁产生概率。</p></li><li><p>对于非常容易产生死锁的业务部分，可以尝试使用升级锁定颗粒度，通过表级锁定来减少死锁的产生。</p></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL高级-03</title>
      <link href="/2021/05/24/mysql-gao-ji-03/"/>
      <url>/2021/05/24/mysql-gao-ji-03/</url>
      
        <content type="html"><![CDATA[<h3 id="一、MySQL存储过程和函数"><a href="#一、MySQL存储过程和函数" class="headerlink" title="一、MySQL存储过程和函数"></a>一、MySQL存储过程和函数</h3><h4 id="1-存储过程和函数的概念"><a href="#1-存储过程和函数的概念" class="headerlink" title="1.存储过程和函数的概念"></a>1.存储过程和函数的概念</h4><ul><li>存储过程和函数是  事先经过编译并存储在数据库中的一段 SQL 语句的集合</li></ul><h4 id="2-存储过程和函数的好处"><a href="#2-存储过程和函数的好处" class="headerlink" title="2.存储过程和函数的好处"></a>2.存储过程和函数的好处</h4><ul><li>存储过程和函数可以重复使用，减轻开发人员的工作量。类似于java中方法可以多次调用</li><li>减少网络流量，存储过程和函数位于服务器上，调用的时候只需要传递名称和参数即可</li><li>减少数据在数据库和应用服务器之间的传输，可以提高数据处理的效率</li><li>将一些业务逻辑在数据库层面来实现，可以减少代码层面的业务处理</li></ul><h4 id="3-存储过程和函数的区别"><a href="#3-存储过程和函数的区别" class="headerlink" title="3.存储过程和函数的区别"></a>3.存储过程和函数的区别</h4><ul><li>函数必须有返回值</li><li>存储过程没有返回值</li></ul><h4 id="4-创建存储过程"><a href="#4-创建存储过程" class="headerlink" title="4.创建存储过程"></a>4.创建存储过程</h4><ul><li>小知识</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">/*该关键字用来声明sql语句的分隔符，告诉MySQL该段命令已经结束！sql语句默认的分隔符是分号，但是有的时候我们需要一条功能sql语句中包含分号，但是并不作为结束标识。这个时候就可以使用DELIMITER来指定分隔符了！*/</span><span class="token comment">-- 标准语法</span><span class="token keyword">DELIMITER</span> 分隔符<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>数据准备</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 创建db8数据库</span><span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> db8<span class="token punctuation">;</span><span class="token comment">-- 使用db8数据库</span><span class="token keyword">USE</span> db8<span class="token punctuation">;</span><span class="token comment">-- 创建学生表</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> student<span class="token punctuation">(</span>id <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span><span class="token comment">-- 学生id</span>NAME <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment">-- 学生姓名</span>age <span class="token keyword">INT</span><span class="token punctuation">,</span><span class="token comment">-- 学生年龄</span>gender <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment">-- 学生性别</span>score <span class="token keyword">INT</span>                           <span class="token comment">-- 学生成绩</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 添加数据</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> student <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token string">'张三'</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token string">'男'</span><span class="token punctuation">,</span><span class="token number">95</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token string">'李四'</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token string">'男'</span><span class="token punctuation">,</span><span class="token number">98</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token string">'王五'</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token string">'女'</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token string">'赵六'</span><span class="token punctuation">,</span><span class="token number">26</span><span class="token punctuation">,</span><span class="token string">'女'</span><span class="token punctuation">,</span><span class="token number">90</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 按照性别进行分组，查询每组学生的总成绩。按照总成绩的升序排序</span><span class="token keyword">SELECT</span> gender<span class="token punctuation">,</span><span class="token function">SUM</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span> getSum <span class="token keyword">FROM</span> student <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> gender <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> getSum <span class="token keyword">ASC</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>创建存储过程语法</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 修改分隔符为$</span><span class="token keyword">DELIMITER</span> $<span class="token comment">-- 标准语法</span><span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> 存储过程名称<span class="token punctuation">(</span>参数<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token keyword">BEGIN</span><span class="token keyword">sql</span>语句<span class="token punctuation">;</span><span class="token keyword">END</span>$<span class="token comment">-- 修改分隔符为分号</span><span class="token keyword">DELIMITER</span> <span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>创建存储过程</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 修改分隔符为$</span><span class="token keyword">DELIMITER</span> $<span class="token comment">-- 创建存储过程，封装分组查询学生总成绩的sql语句</span><span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> stu_group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">BEGIN</span><span class="token keyword">SELECT</span> gender<span class="token punctuation">,</span><span class="token function">SUM</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span> getSum <span class="token keyword">FROM</span> student <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> gender <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> getSum <span class="token keyword">ASC</span><span class="token punctuation">;</span><span class="token keyword">END</span>$<span class="token comment">-- 修改分隔符为分号</span><span class="token keyword">DELIMITER</span> <span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-调用存储过程"><a href="#5-调用存储过程" class="headerlink" title="5.调用存储过程"></a>5.调用存储过程</h4><ul><li>调用存储过程语法</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 标准语法</span><span class="token keyword">CALL</span> 存储过程名称<span class="token punctuation">(</span>实际参数<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 调用stu_group存储过程</span><span class="token keyword">CALL</span> stu_group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-查看存储过程"><a href="#6-查看存储过程" class="headerlink" title="6.查看存储过程"></a>6.查看存储过程</h4><ul><li>查看存储过程语法</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 查询数据库中所有的存储过程 标准语法</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> mysql<span class="token punctuation">.</span><span class="token keyword">proc</span> <span class="token keyword">WHERE</span> db<span class="token operator">=</span><span class="token string">'数据库名称'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="7-删除存储过程"><a href="#7-删除存储过程" class="headerlink" title="7.删除存储过程"></a>7.删除存储过程</h4><ul><li>删除存储过程语法</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 标准语法</span><span class="token keyword">DROP</span> <span class="token keyword">PROCEDURE</span> <span class="token punctuation">[</span><span class="token keyword">IF</span> <span class="token keyword">EXISTS</span><span class="token punctuation">]</span> 存储过程名称<span class="token punctuation">;</span><span class="token comment">-- 删除stu_group存储过程</span><span class="token keyword">DROP</span> <span class="token keyword">PROCEDURE</span> stu_group<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="8-存储过程语法"><a href="#8-存储过程语法" class="headerlink" title="8.存储过程语法"></a>8.存储过程语法</h4><h5 id="8-1存储过程语法介绍"><a href="#8-1存储过程语法介绍" class="headerlink" title="8.1存储过程语法介绍"></a>8.1存储过程语法介绍</h5><ul><li>存储过程是可以进行编程的。意味着可以使用变量、表达式、条件控制语句、循环语句等，来完成比较复杂的功能！</li></ul><h5 id="8-2变量的使用"><a href="#8-2变量的使用" class="headerlink" title="8.2变量的使用"></a>8.2变量的使用</h5><ul><li>定义变量</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 标准语法</span><span class="token keyword">DECLARE</span> 变量名 数据类型 <span class="token punctuation">[</span><span class="token keyword">DEFAULT</span> 默认值<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">-- 注意： DECLARE定义的是局部变量，只能用在BEGIN END范围之内</span><span class="token comment">-- 定义一个int类型变量、并赋默认值为10</span><span class="token keyword">DELIMITER</span> $<span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> pro_test1<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">BEGIN</span><span class="token keyword">DECLARE</span> num <span class="token keyword">INT</span> <span class="token keyword">DEFAULT</span> <span class="token number">10</span><span class="token punctuation">;</span>   <span class="token comment">-- 定义变量</span><span class="token keyword">SELECT</span> num<span class="token punctuation">;</span>                   <span class="token comment">-- 查询变量</span><span class="token keyword">END</span>$<span class="token keyword">DELIMITER</span> <span class="token punctuation">;</span><span class="token comment">-- 调用pro_test1存储过程</span><span class="token keyword">CALL</span> pro_test1<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>变量的赋值1</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 标准语法</span><span class="token keyword">SET</span> 变量名 <span class="token operator">=</span> 变量值<span class="token punctuation">;</span><span class="token comment">-- 定义字符串类型变量，并赋值</span><span class="token keyword">DELIMITER</span> $<span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> pro_test2<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">BEGIN</span><span class="token keyword">DECLARE</span> NAME <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">-- 定义变量</span><span class="token keyword">SET</span> NAME <span class="token operator">=</span> <span class="token string">'存储过程'</span><span class="token punctuation">;</span>       <span class="token comment">-- 为变量赋值</span><span class="token keyword">SELECT</span> NAME<span class="token punctuation">;</span>                <span class="token comment">-- 查询变量</span><span class="token keyword">END</span>$<span class="token keyword">DELIMITER</span> <span class="token punctuation">;</span><span class="token comment">-- 调用pro_test2存储过程</span><span class="token keyword">CALL</span> pro_test2<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>变量的赋值2</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 标准语法</span><span class="token keyword">SELECT</span> 列名 <span class="token keyword">INTO</span> 变量名 <span class="token keyword">FROM</span> 表名 <span class="token punctuation">[</span><span class="token keyword">WHERE</span> 条件<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">-- 定义两个int变量，用于存储男女同学的总分数</span><span class="token keyword">DELIMITER</span> $<span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> pro_test3<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">BEGIN</span><span class="token keyword">DECLARE</span> men<span class="token punctuation">,</span>women <span class="token keyword">INT</span><span class="token punctuation">;</span>  <span class="token comment">-- 定义变量</span><span class="token keyword">SELECT</span> <span class="token function">SUM</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span> <span class="token keyword">INTO</span> men <span class="token keyword">FROM</span> student <span class="token keyword">WHERE</span> gender<span class="token operator">=</span><span class="token string">'男'</span><span class="token punctuation">;</span>    <span class="token comment">-- 计算男同学总分数赋值给men</span><span class="token keyword">SELECT</span> <span class="token function">SUM</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span> <span class="token keyword">INTO</span> women <span class="token keyword">FROM</span> student <span class="token keyword">WHERE</span> gender<span class="token operator">=</span><span class="token string">'女'</span><span class="token punctuation">;</span>  <span class="token comment">-- 计算女同学总分数赋值给women</span><span class="token keyword">SELECT</span> men<span class="token punctuation">,</span>women<span class="token punctuation">;</span>           <span class="token comment">-- 查询变量</span><span class="token keyword">END</span>$<span class="token keyword">DELIMITER</span> <span class="token punctuation">;</span><span class="token comment">-- 调用pro_test3存储过程</span><span class="token keyword">CALL</span> pro_test3<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="8-3if语句的使用"><a href="#8-3if语句的使用" class="headerlink" title="8.3if语句的使用"></a>8.3if语句的使用</h5><ul><li>标准语法</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 标准语法</span><span class="token keyword">IF</span> 判断条件<span class="token number">1</span> <span class="token keyword">THEN</span> 执行的<span class="token keyword">sql</span>语句<span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">[</span><span class="token keyword">ELSEIF</span> 判断条件<span class="token number">2</span> <span class="token keyword">THEN</span> 执行的<span class="token keyword">sql</span>语句<span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token keyword">ELSE</span> 执行的<span class="token keyword">sql</span>语句n<span class="token punctuation">;</span><span class="token punctuation">]</span><span class="token keyword">END</span> <span class="token keyword">IF</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>案例演示</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">/*定义一个int变量，用于存储班级总成绩定义一个varchar变量，用于存储分数描述根据总成绩判断：380分及以上    学习优秀320 ~ 380     学习不错320以下       学习一般*/</span><span class="token keyword">DELIMITER</span> $<span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> pro_test4<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">BEGIN</span><span class="token comment">-- 定义总分数变量</span><span class="token keyword">DECLARE</span> total <span class="token keyword">INT</span><span class="token punctuation">;</span><span class="token comment">-- 定义分数描述变量</span><span class="token keyword">DECLARE</span> description <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 为总分数变量赋值</span><span class="token keyword">SELECT</span> <span class="token function">SUM</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span> <span class="token keyword">INTO</span> total <span class="token keyword">FROM</span> student<span class="token punctuation">;</span><span class="token comment">-- 判断总分数</span><span class="token keyword">IF</span> total <span class="token operator">>=</span> <span class="token number">380</span> <span class="token keyword">THEN</span> <span class="token keyword">SET</span> description <span class="token operator">=</span> <span class="token string">'学习优秀'</span><span class="token punctuation">;</span><span class="token keyword">ELSEIF</span> total <span class="token operator">>=</span> <span class="token number">320</span> <span class="token operator">AND</span> total <span class="token operator">&lt;</span> <span class="token number">380</span> <span class="token keyword">THEN</span> <span class="token keyword">SET</span> description <span class="token operator">=</span> <span class="token string">'学习不错'</span><span class="token punctuation">;</span><span class="token keyword">ELSE</span> <span class="token keyword">SET</span> description <span class="token operator">=</span> <span class="token string">'学习一般'</span><span class="token punctuation">;</span><span class="token keyword">END</span> <span class="token keyword">IF</span><span class="token punctuation">;</span><span class="token comment">-- 查询总成绩和描述信息</span><span class="token keyword">SELECT</span> total<span class="token punctuation">,</span>description<span class="token punctuation">;</span><span class="token keyword">END</span>$<span class="token keyword">DELIMITER</span> <span class="token punctuation">;</span><span class="token comment">-- 调用pro_test4存储过程</span><span class="token keyword">CALL</span> pro_test4<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="8-4参数的传递"><a href="#8-4参数的传递" class="headerlink" title="8.4参数的传递"></a>8.4参数的传递</h5><ul><li>参数传递的语法</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">DELIMITER</span> $<span class="token comment">-- 标准语法</span><span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> 存储过程名称<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">IN</span><span class="token operator">|</span><span class="token keyword">OUT</span><span class="token operator">|</span><span class="token keyword">INOUT</span><span class="token punctuation">]</span> 参数名 数据类型<span class="token punctuation">)</span><span class="token keyword">BEGIN</span>执行的<span class="token keyword">sql</span>语句<span class="token punctuation">;</span><span class="token keyword">END</span>$<span class="token comment">/*IN:代表输入参数，需要由调用者传递实际数据。默认的OUT:代表输出参数，该参数可以作为返回值INOUT:代表既可以作为输入参数，也可以作为输出参数*/</span><span class="token keyword">DELIMITER</span> <span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>输入参数</p><ul><li>标准语法</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">DELIMITER</span> $<span class="token comment">-- 标准语法</span><span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> 存储过程名称<span class="token punctuation">(</span><span class="token operator">IN</span> 参数名 数据类型<span class="token punctuation">)</span><span class="token keyword">BEGIN</span>执行的<span class="token keyword">sql</span>语句<span class="token punctuation">;</span><span class="token keyword">END</span>$<span class="token keyword">DELIMITER</span> <span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>案例演示</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">/*输入总成绩变量，代表学生总成绩定义一个varchar变量，用于存储分数描述根据总成绩判断：380分及以上  学习优秀320 ~ 380    学习不错320以下      学习一般*/</span><span class="token keyword">DELIMITER</span> $<span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> pro_test5<span class="token punctuation">(</span><span class="token operator">IN</span> total <span class="token keyword">INT</span><span class="token punctuation">)</span><span class="token keyword">BEGIN</span><span class="token comment">-- 定义分数描述变量</span><span class="token keyword">DECLARE</span> description <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 判断总分数</span><span class="token keyword">IF</span> total <span class="token operator">>=</span> <span class="token number">380</span> <span class="token keyword">THEN</span> <span class="token keyword">SET</span> description <span class="token operator">=</span> <span class="token string">'学习优秀'</span><span class="token punctuation">;</span><span class="token keyword">ELSEIF</span> total <span class="token operator">>=</span> <span class="token number">320</span> <span class="token operator">AND</span> total <span class="token operator">&lt;</span> <span class="token number">380</span> <span class="token keyword">THEN</span> <span class="token keyword">SET</span> description <span class="token operator">=</span> <span class="token string">'学习不错'</span><span class="token punctuation">;</span><span class="token keyword">ELSE</span> <span class="token keyword">SET</span> description <span class="token operator">=</span> <span class="token string">'学习一般'</span><span class="token punctuation">;</span><span class="token keyword">END</span> <span class="token keyword">IF</span><span class="token punctuation">;</span><span class="token comment">-- 查询总成绩和描述信息</span><span class="token keyword">SELECT</span> total<span class="token punctuation">,</span>description<span class="token punctuation">;</span><span class="token keyword">END</span>$<span class="token keyword">DELIMITER</span> <span class="token punctuation">;</span><span class="token comment">-- 调用pro_test5存储过程</span><span class="token keyword">CALL</span> pro_test5<span class="token punctuation">(</span><span class="token number">390</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">CALL</span> pro_test5<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token function">SUM</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span> <span class="token keyword">FROM</span> student<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>输出参数</p><ul><li>标准语法</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">DELIMITER</span> $<span class="token comment">-- 标准语法</span><span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> 存储过程名称<span class="token punctuation">(</span><span class="token keyword">OUT</span> 参数名 数据类型<span class="token punctuation">)</span><span class="token keyword">BEGIN</span>执行的<span class="token keyword">sql</span>语句<span class="token punctuation">;</span><span class="token keyword">END</span>$<span class="token keyword">DELIMITER</span> <span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>案例演示</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">/*输入总成绩变量，代表学生总成绩输出分数描述变量，代表学生总成绩的描述根据总成绩判断：380分及以上  学习优秀320 ~ 380    学习不错320以下      学习一般*/</span><span class="token keyword">DELIMITER</span> $<span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> pro_test6<span class="token punctuation">(</span><span class="token operator">IN</span> total <span class="token keyword">INT</span><span class="token punctuation">,</span><span class="token keyword">OUT</span> description <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">BEGIN</span><span class="token comment">-- 判断总分数</span><span class="token keyword">IF</span> total <span class="token operator">>=</span> <span class="token number">380</span> <span class="token keyword">THEN</span> <span class="token keyword">SET</span> description <span class="token operator">=</span> <span class="token string">'学习优秀'</span><span class="token punctuation">;</span><span class="token keyword">ELSEIF</span> total <span class="token operator">>=</span> <span class="token number">320</span> <span class="token operator">AND</span> total <span class="token operator">&lt;</span> <span class="token number">380</span> <span class="token keyword">THEN</span> <span class="token keyword">SET</span> description <span class="token operator">=</span> <span class="token string">'学习不错'</span><span class="token punctuation">;</span><span class="token keyword">ELSE</span> <span class="token keyword">SET</span> description <span class="token operator">=</span> <span class="token string">'学习一般'</span><span class="token punctuation">;</span><span class="token keyword">END</span> <span class="token keyword">IF</span><span class="token punctuation">;</span><span class="token keyword">END</span>$<span class="token keyword">DELIMITER</span> <span class="token punctuation">;</span><span class="token comment">-- 调用pro_test6存储过程</span><span class="token keyword">CALL</span> pro_test6<span class="token punctuation">(</span><span class="token number">310</span><span class="token punctuation">,</span><span class="token variable">@description</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 查询总成绩描述</span><span class="token keyword">SELECT</span> <span class="token variable">@description</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>小知识</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">@变量名:  这种变量要在变量名称前面加上“@”符号，叫做用户会话变量，代表整个会话过程他都是有作用的，这个类似于全局变量一样。@@变量名: 这种在变量前加上 <span class="token string">"@@"</span> 符号<span class="token punctuation">,</span> 叫做系统变量 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h5 id="8-5case语句的使用"><a href="#8-5case语句的使用" class="headerlink" title="8.5case语句的使用"></a>8.5case语句的使用</h5><ul><li>标准语法1</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 标准语法</span><span class="token keyword">CASE</span> 表达式<span class="token keyword">WHEN</span> 值<span class="token number">1</span> <span class="token keyword">THEN</span> 执行<span class="token keyword">sql</span>语句<span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">[</span><span class="token keyword">WHEN</span> 值<span class="token number">2</span> <span class="token keyword">THEN</span> 执行<span class="token keyword">sql</span>语句<span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token keyword">ELSE</span> 执行<span class="token keyword">sql</span>语句n<span class="token punctuation">;</span><span class="token punctuation">]</span><span class="token keyword">END</span> <span class="token keyword">CASE</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>标准语法2</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 标准语法</span><span class="token keyword">CASE</span><span class="token keyword">WHEN</span> 判断条件<span class="token number">1</span> <span class="token keyword">THEN</span> 执行<span class="token keyword">sql</span>语句<span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">[</span><span class="token keyword">WHEN</span> 判断条件<span class="token number">2</span> <span class="token keyword">THEN</span> 执行<span class="token keyword">sql</span>语句<span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token keyword">ELSE</span> 执行<span class="token keyword">sql</span>语句n<span class="token punctuation">;</span><span class="token punctuation">]</span><span class="token keyword">END</span> <span class="token keyword">CASE</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>案例演示</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">/*输入总成绩变量，代表学生总成绩定义一个varchar变量，用于存储分数描述根据总成绩判断：380分及以上  学习优秀320 ~ 380    学习不错320以下      学习一般*/</span><span class="token keyword">DELIMITER</span> $<span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> pro_test7<span class="token punctuation">(</span><span class="token operator">IN</span> total <span class="token keyword">INT</span><span class="token punctuation">)</span><span class="token keyword">BEGIN</span><span class="token comment">-- 定义变量</span><span class="token keyword">DECLARE</span> description <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 使用case判断</span><span class="token keyword">CASE</span><span class="token keyword">WHEN</span> total <span class="token operator">>=</span> <span class="token number">380</span> <span class="token keyword">THEN</span><span class="token keyword">SET</span> description <span class="token operator">=</span> <span class="token string">'学习优秀'</span><span class="token punctuation">;</span><span class="token keyword">WHEN</span> total <span class="token operator">>=</span> <span class="token number">320</span> <span class="token operator">AND</span> total <span class="token operator">&lt;</span> <span class="token number">380</span> <span class="token keyword">THEN</span><span class="token keyword">SET</span> description <span class="token operator">=</span> <span class="token string">'学习不错'</span><span class="token punctuation">;</span><span class="token keyword">ELSE</span> <span class="token keyword">SET</span> description <span class="token operator">=</span> <span class="token string">'学习一般'</span><span class="token punctuation">;</span><span class="token keyword">END</span> <span class="token keyword">CASE</span><span class="token punctuation">;</span><span class="token comment">-- 查询分数描述信息</span><span class="token keyword">SELECT</span> description<span class="token punctuation">;</span><span class="token keyword">END</span>$<span class="token keyword">DELIMITER</span> <span class="token punctuation">;</span><span class="token comment">-- 调用pro_test7存储过程</span><span class="token keyword">CALL</span> pro_test7<span class="token punctuation">(</span><span class="token number">390</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">CALL</span> pro_test7<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token function">SUM</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span> <span class="token keyword">FROM</span> student<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="8-6while循环"><a href="#8-6while循环" class="headerlink" title="8.6while循环"></a>8.6while循环</h5><ul><li>标准语法</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 标准语法</span>初始化语句<span class="token punctuation">;</span><span class="token keyword">WHILE</span> 条件判断语句 <span class="token keyword">DO</span>循环体语句<span class="token punctuation">;</span>条件控制语句<span class="token punctuation">;</span><span class="token keyword">END</span> <span class="token keyword">WHILE</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>案例演示</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">/*计算1~100之间的偶数和*/</span><span class="token keyword">DELIMITER</span> $<span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> pro_test8<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">BEGIN</span><span class="token comment">-- 定义求和变量</span><span class="token keyword">DECLARE</span> result <span class="token keyword">INT</span> <span class="token keyword">DEFAULT</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">-- 定义初始化变量</span><span class="token keyword">DECLARE</span> num <span class="token keyword">INT</span> <span class="token keyword">DEFAULT</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">-- while循环</span><span class="token keyword">WHILE</span> num <span class="token operator">&lt;=</span> <span class="token number">100</span> <span class="token keyword">DO</span><span class="token comment">-- 偶数判断</span><span class="token keyword">IF</span> num<span class="token operator">%</span><span class="token number">2</span><span class="token operator">=</span><span class="token number">0</span> <span class="token keyword">THEN</span><span class="token keyword">SET</span> result <span class="token operator">=</span> result <span class="token operator">+</span> num<span class="token punctuation">;</span> <span class="token comment">-- 累加</span><span class="token keyword">END</span> <span class="token keyword">IF</span><span class="token punctuation">;</span><span class="token comment">-- 让num+1</span><span class="token keyword">SET</span> num <span class="token operator">=</span> num <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>         <span class="token keyword">END</span> <span class="token keyword">WHILE</span><span class="token punctuation">;</span><span class="token comment">-- 查询求和结果</span><span class="token keyword">SELECT</span> result<span class="token punctuation">;</span><span class="token keyword">END</span>$<span class="token keyword">DELIMITER</span> <span class="token punctuation">;</span><span class="token comment">-- 调用pro_test8存储过程</span><span class="token keyword">CALL</span> pro_test8<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="8-7repeat循环"><a href="#8-7repeat循环" class="headerlink" title="8.7repeat循环"></a>8.7repeat循环</h5><ul><li>标准语法</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 标准语法</span>初始化语句<span class="token punctuation">;</span><span class="token keyword">REPEAT</span>循环体语句<span class="token punctuation">;</span>条件控制语句<span class="token punctuation">;</span>UNTIL 条件判断语句<span class="token keyword">END</span> <span class="token keyword">REPEAT</span><span class="token punctuation">;</span><span class="token comment">-- 注意：repeat循环是条件满足则停止。while循环是条件满足则执行</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>案例演示</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">/*计算1~10之间的和*/</span><span class="token keyword">DELIMITER</span> $<span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> pro_test9<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">BEGIN</span><span class="token comment">-- 定义求和变量</span><span class="token keyword">DECLARE</span> result <span class="token keyword">INT</span> <span class="token keyword">DEFAULT</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">-- 定义初始化变量</span><span class="token keyword">DECLARE</span> num <span class="token keyword">INT</span> <span class="token keyword">DEFAULT</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">-- repeat循环</span><span class="token keyword">REPEAT</span><span class="token comment">-- 累加</span><span class="token keyword">SET</span> result <span class="token operator">=</span> result <span class="token operator">+</span> num<span class="token punctuation">;</span><span class="token comment">-- 让num+1</span><span class="token keyword">SET</span> num <span class="token operator">=</span> num <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">-- 停止循环</span>UNTIL num<span class="token operator">></span><span class="token number">10</span><span class="token keyword">END</span> <span class="token keyword">REPEAT</span><span class="token punctuation">;</span><span class="token comment">-- 查询求和结果</span><span class="token keyword">SELECT</span> result<span class="token punctuation">;</span><span class="token keyword">END</span>$<span class="token keyword">DELIMITER</span> <span class="token punctuation">;</span><span class="token comment">-- 调用pro_test9存储过程</span><span class="token keyword">CALL</span> pro_test9<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="8-8loop循环"><a href="#8-8loop循环" class="headerlink" title="8.8loop循环"></a>8.8loop循环</h5><ul><li>标准语法</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 标准语法</span>初始化语句<span class="token punctuation">;</span><span class="token punctuation">[</span>循环名称:<span class="token punctuation">]</span> <span class="token keyword">LOOP</span>条件判断语句<span class="token punctuation">[</span><span class="token keyword">LEAVE</span> 循环名称<span class="token punctuation">;</span><span class="token punctuation">]</span>循环体语句<span class="token punctuation">;</span>条件控制语句<span class="token punctuation">;</span><span class="token keyword">END</span> <span class="token keyword">LOOP</span> 循环名称<span class="token punctuation">;</span><span class="token comment">-- 注意：loop可以实现简单的循环，但是退出循环需要使用其他的语句来定义。我们可以使用leave语句完成！</span><span class="token comment">--      如果不加退出循环的语句，那么就变成了死循环。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>案例演示</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">/*计算1~10之间的和*/</span><span class="token keyword">DELIMITER</span> $<span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> pro_test10<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">BEGIN</span><span class="token comment">-- 定义求和变量</span><span class="token keyword">DECLARE</span> result <span class="token keyword">INT</span> <span class="token keyword">DEFAULT</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">-- 定义初始化变量</span><span class="token keyword">DECLARE</span> num <span class="token keyword">INT</span> <span class="token keyword">DEFAULT</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">-- loop循环</span>l:<span class="token keyword">LOOP</span><span class="token comment">-- 条件成立，停止循环</span><span class="token keyword">IF</span> num <span class="token operator">></span> <span class="token number">10</span> <span class="token keyword">THEN</span><span class="token keyword">LEAVE</span> l<span class="token punctuation">;</span><span class="token keyword">END</span> <span class="token keyword">IF</span><span class="token punctuation">;</span><span class="token comment">-- 累加</span><span class="token keyword">SET</span> result <span class="token operator">=</span> result <span class="token operator">+</span> num<span class="token punctuation">;</span><span class="token comment">-- 让num+1</span><span class="token keyword">SET</span> num <span class="token operator">=</span> num <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">END</span> <span class="token keyword">LOOP</span> l<span class="token punctuation">;</span><span class="token comment">-- 查询求和结果</span><span class="token keyword">SELECT</span> result<span class="token punctuation">;</span><span class="token keyword">END</span>$<span class="token keyword">DELIMITER</span> <span class="token punctuation">;</span><span class="token comment">-- 调用pro_test10存储过程</span><span class="token keyword">CALL</span> pro_test10<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="8-9游标"><a href="#8-9游标" class="headerlink" title="8.9游标"></a>8.9游标</h5><ul><li><p>游标的概念</p><ul><li>游标可以遍历返回的多行结果，每次拿到一整行数据</li><li>在存储过程和函数中可以使用游标对结果集进行循环的处理</li><li>简单来说游标就类似于集合的迭代器遍历</li><li>MySQL中的游标只能用在存储过程和函数中</li></ul></li><li><p>游标的语法</p><ul><li>创建游标</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 标准语法</span><span class="token keyword">DECLARE</span> 游标名称 <span class="token keyword">CURSOR</span> <span class="token keyword">FOR</span> 查询<span class="token keyword">sql</span>语句<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>打开游标</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 标准语法</span><span class="token keyword">OPEN</span> 游标名称<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>使用游标获取数据</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 标准语法</span><span class="token keyword">FETCH</span> 游标名称 <span class="token keyword">INTO</span> 变量名<span class="token number">1</span><span class="token punctuation">,</span>变量名<span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>关闭游标</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 标准语法</span><span class="token keyword">CLOSE</span> 游标名称<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>游标的基本使用</p></li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 创建stu_score表</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> stu_score<span class="token punctuation">(</span>id <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>score <span class="token keyword">INT</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*将student表中所有的成绩保存到stu_score表中*/</span><span class="token keyword">DELIMITER</span> $<span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> pro_test11<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">BEGIN</span><span class="token comment">-- 定义成绩变量</span><span class="token keyword">DECLARE</span> s_score <span class="token keyword">INT</span><span class="token punctuation">;</span><span class="token comment">-- 创建游标,查询所有学生成绩数据</span><span class="token keyword">DECLARE</span> stu_result <span class="token keyword">CURSOR</span> <span class="token keyword">FOR</span> <span class="token keyword">SELECT</span> score <span class="token keyword">FROM</span> student<span class="token punctuation">;</span><span class="token comment">-- 开启游标</span><span class="token keyword">OPEN</span> stu_result<span class="token punctuation">;</span><span class="token comment">-- 使用游标，遍历结果,拿到第1行数据</span><span class="token keyword">FETCH</span> stu_result <span class="token keyword">INTO</span> s_score<span class="token punctuation">;</span><span class="token comment">-- 将数据保存到stu_score表中</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> stu_score <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span>s_score<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 使用游标，遍历结果,拿到第2行数据</span><span class="token keyword">FETCH</span> stu_result <span class="token keyword">INTO</span> s_score<span class="token punctuation">;</span><span class="token comment">-- 将数据保存到stu_score表中</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> stu_score <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span>s_score<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 使用游标，遍历结果,拿到第3行数据</span><span class="token keyword">FETCH</span> stu_result <span class="token keyword">INTO</span> s_score<span class="token punctuation">;</span><span class="token comment">-- 将数据保存到stu_score表中</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> stu_score <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span>s_score<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 使用游标，遍历结果,拿到第4行数据</span><span class="token keyword">FETCH</span> stu_result <span class="token keyword">INTO</span> s_score<span class="token punctuation">;</span><span class="token comment">-- 将数据保存到stu_score表中</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> stu_score <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span>s_score<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 关闭游标</span><span class="token keyword">CLOSE</span> stu_result<span class="token punctuation">;</span><span class="token keyword">END</span>$<span class="token keyword">DELIMITER</span> <span class="token punctuation">;</span><span class="token comment">-- 调用pro_test11存储过程</span><span class="token keyword">CALL</span> pro_test11<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 查询stu_score表</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> stu_score<span class="token punctuation">;</span><span class="token comment">-- ===========================================================</span><span class="token comment">/*出现的问题：student表中一共有4条数据，我们在游标遍历了4次，没有问题！但是在游标中多遍历几次呢？就会出现问题*/</span><span class="token keyword">DELIMITER</span> $<span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> pro_test11<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">BEGIN</span><span class="token comment">-- 定义成绩变量</span><span class="token keyword">DECLARE</span> s_score <span class="token keyword">INT</span><span class="token punctuation">;</span><span class="token comment">-- 创建游标,查询所有学生成绩数据</span><span class="token keyword">DECLARE</span> stu_result <span class="token keyword">CURSOR</span> <span class="token keyword">FOR</span> <span class="token keyword">SELECT</span> score <span class="token keyword">FROM</span> student<span class="token punctuation">;</span><span class="token comment">-- 开启游标</span><span class="token keyword">OPEN</span> stu_result<span class="token punctuation">;</span><span class="token comment">-- 使用游标，遍历结果,拿到第1行数据</span><span class="token keyword">FETCH</span> stu_result <span class="token keyword">INTO</span> s_score<span class="token punctuation">;</span><span class="token comment">-- 将数据保存到stu_score表中</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> stu_score <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span>s_score<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 使用游标，遍历结果,拿到第2行数据</span><span class="token keyword">FETCH</span> stu_result <span class="token keyword">INTO</span> s_score<span class="token punctuation">;</span><span class="token comment">-- 将数据保存到stu_score表中</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> stu_score <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span>s_score<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 使用游标，遍历结果,拿到第3行数据</span><span class="token keyword">FETCH</span> stu_result <span class="token keyword">INTO</span> s_score<span class="token punctuation">;</span><span class="token comment">-- 将数据保存到stu_score表中</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> stu_score <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span>s_score<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 使用游标，遍历结果,拿到第4行数据</span><span class="token keyword">FETCH</span> stu_result <span class="token keyword">INTO</span> s_score<span class="token punctuation">;</span><span class="token comment">-- 将数据保存到stu_score表中</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> stu_score <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span>s_score<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 使用游标，遍历结果,拿到第5行数据</span><span class="token keyword">FETCH</span> stu_result <span class="token keyword">INTO</span> s_score<span class="token punctuation">;</span><span class="token comment">-- 将数据保存到stu_score表中</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> stu_score <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span>s_score<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 关闭游标</span><span class="token keyword">CLOSE</span> stu_result<span class="token punctuation">;</span><span class="token keyword">END</span>$<span class="token keyword">DELIMITER</span> <span class="token punctuation">;</span><span class="token comment">-- 调用pro_test11存储过程</span><span class="token keyword">CALL</span> pro_test11<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 查询stu_score表,虽然数据正确，但是在执行存储过程时会报错</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> stu_score<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>游标的优化使用(配合循环使用)</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">/*当游标结束后，会触发游标结束事件。我们可以通过这一特性来完成循环操作加标记思想：1.定义一个变量，默认值为0(意味着有数据)2.当游标结束后，将变量值改为1(意味着没有数据了)*/</span><span class="token comment">-- 1.定义一个变量，默认值为0(意味着有数据)</span><span class="token keyword">DECLARE</span> flag <span class="token keyword">INT</span> <span class="token keyword">DEFAULT</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">-- 2.当游标结束后，将变量值改为1(意味着没有数据了)</span><span class="token keyword">DECLARE</span> <span class="token keyword">EXIT</span> <span class="token keyword">HANDLER</span> <span class="token keyword">FOR</span> <span class="token operator">NOT</span> FOUND <span class="token keyword">SET</span> flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">/*将student表中所有的成绩保存到stu_score表中*/</span><span class="token keyword">DELIMITER</span> $<span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> pro_test12<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">BEGIN</span><span class="token comment">-- 定义成绩变量</span><span class="token keyword">DECLARE</span> s_score <span class="token keyword">INT</span><span class="token punctuation">;</span><span class="token comment">-- 定义标记变量</span><span class="token keyword">DECLARE</span> flag <span class="token keyword">INT</span> <span class="token keyword">DEFAULT</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">-- 创建游标，查询所有学生成绩数据</span><span class="token keyword">DECLARE</span> stu_result <span class="token keyword">CURSOR</span> <span class="token keyword">FOR</span> <span class="token keyword">SELECT</span> score <span class="token keyword">FROM</span> student<span class="token punctuation">;</span><span class="token comment">-- 游标结束后，将标记变量改为1</span><span class="token keyword">DECLARE</span> <span class="token keyword">EXIT</span> <span class="token keyword">HANDLER</span> <span class="token keyword">FOR</span> <span class="token operator">NOT</span> FOUND <span class="token keyword">SET</span> flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">-- 开启游标</span><span class="token keyword">OPEN</span> stu_result<span class="token punctuation">;</span><span class="token comment">-- 循环使用游标</span><span class="token keyword">REPEAT</span><span class="token comment">-- 使用游标，遍历结果,拿到数据</span><span class="token keyword">FETCH</span> stu_result <span class="token keyword">INTO</span> s_score<span class="token punctuation">;</span><span class="token comment">-- 将数据保存到stu_score表中</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> stu_score <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span>s_score<span class="token punctuation">)</span><span class="token punctuation">;</span>UNTIL flag<span class="token operator">=</span><span class="token number">1</span><span class="token keyword">END</span> <span class="token keyword">REPEAT</span><span class="token punctuation">;</span><span class="token comment">-- 关闭游标</span><span class="token keyword">CLOSE</span> stu_result<span class="token punctuation">;</span><span class="token keyword">END</span>$<span class="token keyword">DELIMITER</span> <span class="token punctuation">;</span><span class="token comment">-- 调用pro_test12存储过程</span><span class="token keyword">CALL</span> pro_test12<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 查询stu_score表</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> stu_score<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="9-存储过程的总结"><a href="#9-存储过程的总结" class="headerlink" title="9.存储过程的总结"></a>9.存储过程的总结</h4><ul><li>存储过程是 事先经过编译并存储在数据库中的一段 SQL 语句的集合。可以在数据库层面做一些业务处理</li><li>说白了存储过程其实就是将sql语句封装为方法，然后可以调用方法执行sql语句而已</li><li>存储过程的好处<ul><li>安全</li><li>高效</li><li>复用性强</li></ul></li></ul><h4 id="10-存储函数"><a href="#10-存储函数" class="headerlink" title="10.存储函数"></a>10.存储函数</h4><ul><li><p>存储函数和存储过程是非常相似的。存储函数可以做的事情，存储过程也可以做到！</p></li><li><p>存储函数有返回值，存储过程没有返回值(参数的out其实也相当于是返回数据了)</p></li><li><p>标准语法</p><ul><li>创建存储函数</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">DELIMITER</span> $<span class="token comment">-- 标准语法</span><span class="token keyword">CREATE</span> <span class="token keyword">FUNCTION</span> 函数名称<span class="token punctuation">(</span><span class="token punctuation">[</span>参数 数据类型<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">RETURNS</span> 返回值类型<span class="token keyword">BEGIN</span>执行的<span class="token keyword">sql</span>语句<span class="token punctuation">;</span><span class="token keyword">RETURN</span> 结果<span class="token punctuation">;</span><span class="token keyword">END</span>$<span class="token keyword">DELIMITER</span> <span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>调用存储函数</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 标准语法</span><span class="token keyword">SELECT</span> 函数名称<span class="token punctuation">(</span>实际参数<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>删除存储函数</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 标准语法</span><span class="token keyword">DROP</span> <span class="token keyword">FUNCTION</span> 函数名称<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>案例演示</p></li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">/*定义存储函数，获取学生表中成绩大于95分的学生数量*/</span><span class="token keyword">DELIMITER</span> $<span class="token keyword">CREATE</span> <span class="token keyword">FUNCTION</span> fun_test1<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">RETURNS</span> <span class="token keyword">INT</span><span class="token keyword">BEGIN</span><span class="token comment">-- 定义统计变量</span><span class="token keyword">DECLARE</span> result <span class="token keyword">INT</span><span class="token punctuation">;</span><span class="token comment">-- 查询成绩大于95分的学生数量，给统计变量赋值</span><span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">INTO</span> result <span class="token keyword">FROM</span> student <span class="token keyword">WHERE</span> score <span class="token operator">></span> <span class="token number">95</span><span class="token punctuation">;</span><span class="token comment">-- 返回统计结果</span><span class="token keyword">RETURN</span> result<span class="token punctuation">;</span><span class="token keyword">END</span>$<span class="token keyword">DELIMITER</span> <span class="token punctuation">;</span><span class="token comment">-- 调用fun_test1存储函数</span><span class="token keyword">SELECT</span> fun_test1<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二、MySQL触发器"><a href="#二、MySQL触发器" class="headerlink" title="二、MySQL触发器"></a>二、MySQL触发器</h3><h4 id="1-触发器的概念"><a href="#1-触发器的概念" class="headerlink" title="1.触发器的概念"></a>1.触发器的概念</h4><ul><li>触发器是与表有关的数据库对象，可以在 insert/update/delete 之前或之后，触发并执行触发器中定义的SQL语句。触发器的这种特性可以协助应用在数据库端确保数据的完整性 、日志记录 、数据校验等操作 。</li><li>使用别名 NEW 和 OLD 来引用触发器中发生变化的记录内容，这与其他的数据库是相似的。现在触发器还只支持行级触发，不支持语句级触发。</li></ul><table><thead><tr><th>触发器类型</th><th>OLD的含义</th><th>NEW的含义</th></tr></thead><tbody><tr><td>INSERT 型触发器</td><td>无 (因为插入前状态无数据)</td><td>NEW 表示将要或者已经新增的数据</td></tr><tr><td>UPDATE 型触发器</td><td>OLD 表示修改之前的数据</td><td>NEW 表示将要或已经修改后的数据</td></tr><tr><td>DELETE 型触发器</td><td>OLD 表示将要或者已经删除的数据</td><td>无 (因为删除后状态无数据)</td></tr></tbody></table><h4 id="2-创建触发器"><a href="#2-创建触发器" class="headerlink" title="2.创建触发器"></a>2.创建触发器</h4><ul><li>标准语法</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">DELIMITER</span> $<span class="token keyword">CREATE</span> <span class="token keyword">TRIGGER</span> 触发器名称BEFORE<span class="token operator">|</span><span class="token keyword">AFTER</span> <span class="token keyword">INSERT</span><span class="token operator">|</span><span class="token keyword">UPDATE</span><span class="token operator">|</span><span class="token keyword">DELETE</span><span class="token keyword">ON</span> 表名<span class="token punctuation">[</span><span class="token keyword">FOR EACH ROW</span><span class="token punctuation">]</span>  <span class="token comment">-- 行级触发器</span><span class="token keyword">BEGIN</span>触发器要执行的功能<span class="token punctuation">;</span><span class="token keyword">END</span>$<span class="token keyword">DELIMITER</span> <span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>触发器演示。通过触发器记录账户表的数据变更日志。包含：增加、修改、删除</p><ul><li>创建账户表</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 创建db9数据库</span><span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> db9<span class="token punctuation">;</span><span class="token comment">-- 使用db9数据库</span><span class="token keyword">USE</span> db9<span class="token punctuation">;</span><span class="token comment">-- 创建账户表account</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> account<span class="token punctuation">(</span>id <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span><span class="token comment">-- 账户id</span>NAME <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment">-- 姓名</span>money <span class="token keyword">DOUBLE</span><span class="token comment">-- 余额</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 添加数据</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> account <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token string">'张三'</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token string">'李四'</span><span class="token punctuation">,</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>创建日志表</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 创建日志表account_log</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> account_log<span class="token punctuation">(</span>id <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span><span class="token comment">-- 日志id</span>operation <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment">-- 操作类型 (insert update delete)</span>operation_time <span class="token keyword">DATETIME</span><span class="token punctuation">,</span><span class="token comment">-- 操作时间</span>operation_id <span class="token keyword">INT</span><span class="token punctuation">,</span><span class="token comment">-- 操作表的id</span>operation_params <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span>       <span class="token comment">-- 操作参数</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>创建INSERT触发器</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 创建INSERT触发器</span><span class="token keyword">DELIMITER</span> $<span class="token keyword">CREATE</span> <span class="token keyword">TRIGGER</span> account_insert<span class="token keyword">AFTER</span> <span class="token keyword">INSERT</span><span class="token keyword">ON</span> account<span class="token keyword">FOR EACH ROW</span><span class="token keyword">BEGIN</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> account_log <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token string">'INSERT'</span><span class="token punctuation">,</span><span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>new<span class="token punctuation">.</span>id<span class="token punctuation">,</span>CONCAT<span class="token punctuation">(</span><span class="token string">'插入后&#123;id='</span><span class="token punctuation">,</span>new<span class="token punctuation">.</span>id<span class="token punctuation">,</span><span class="token string">',name='</span><span class="token punctuation">,</span>new<span class="token punctuation">.</span>name<span class="token punctuation">,</span><span class="token string">',money='</span><span class="token punctuation">,</span>new<span class="token punctuation">.</span>money<span class="token punctuation">,</span><span class="token string">'&#125;'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">END</span>$<span class="token keyword">DELIMITER</span> <span class="token punctuation">;</span><span class="token comment">-- 向account表添加记录</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> account <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token string">'王五'</span><span class="token punctuation">,</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 查询account表</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> account<span class="token punctuation">;</span><span class="token comment">-- 查询日志表</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> account_log<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>创建UPDATE触发器</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 创建UPDATE触发器</span><span class="token keyword">DELIMITER</span> $<span class="token keyword">CREATE</span> <span class="token keyword">TRIGGER</span> account_update<span class="token keyword">AFTER</span> <span class="token keyword">UPDATE</span><span class="token keyword">ON</span> account<span class="token keyword">FOR EACH ROW</span><span class="token keyword">BEGIN</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> account_log <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token string">'UPDATE'</span><span class="token punctuation">,</span><span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>new<span class="token punctuation">.</span>id<span class="token punctuation">,</span>CONCAT<span class="token punctuation">(</span><span class="token string">'修改前&#123;id='</span><span class="token punctuation">,</span>old<span class="token punctuation">.</span>id<span class="token punctuation">,</span><span class="token string">',name='</span><span class="token punctuation">,</span>old<span class="token punctuation">.</span>name<span class="token punctuation">,</span><span class="token string">',money='</span><span class="token punctuation">,</span>old<span class="token punctuation">.</span>money<span class="token punctuation">,</span><span class="token string">'&#125;'</span><span class="token punctuation">,</span><span class="token string">'修改后&#123;id='</span><span class="token punctuation">,</span>new<span class="token punctuation">.</span>id<span class="token punctuation">,</span><span class="token string">',name='</span><span class="token punctuation">,</span>new<span class="token punctuation">.</span>name<span class="token punctuation">,</span><span class="token string">',money='</span><span class="token punctuation">,</span>new<span class="token punctuation">.</span>money<span class="token punctuation">,</span><span class="token string">'&#125;'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">END</span>$<span class="token keyword">DELIMITER</span> <span class="token punctuation">;</span><span class="token comment">-- 修改account表</span><span class="token keyword">UPDATE</span> account <span class="token keyword">SET</span> money<span class="token operator">=</span><span class="token number">3500</span> <span class="token keyword">WHERE</span> id<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span><span class="token comment">-- 查询account表</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> account<span class="token punctuation">;</span><span class="token comment">-- 查询日志表</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> account_log<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>创建DELETE触发器</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 创建DELETE触发器</span><span class="token keyword">DELIMITER</span> $<span class="token keyword">CREATE</span> <span class="token keyword">TRIGGER</span> account_delete<span class="token keyword">AFTER</span> <span class="token keyword">DELETE</span><span class="token keyword">ON</span> account<span class="token keyword">FOR EACH ROW</span><span class="token keyword">BEGIN</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> account_log <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token string">'DELETE'</span><span class="token punctuation">,</span><span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>old<span class="token punctuation">.</span>id<span class="token punctuation">,</span>CONCAT<span class="token punctuation">(</span><span class="token string">'删除前&#123;id='</span><span class="token punctuation">,</span>old<span class="token punctuation">.</span>id<span class="token punctuation">,</span><span class="token string">',name='</span><span class="token punctuation">,</span>old<span class="token punctuation">.</span>name<span class="token punctuation">,</span><span class="token string">',money='</span><span class="token punctuation">,</span>old<span class="token punctuation">.</span>money<span class="token punctuation">,</span><span class="token string">'&#125;'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">END</span>$<span class="token keyword">DELIMITER</span> <span class="token punctuation">;</span><span class="token comment">-- 删除account表数据</span><span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> account <span class="token keyword">WHERE</span> id<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span><span class="token comment">-- 查询account表</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> account<span class="token punctuation">;</span><span class="token comment">-- 查询日志表</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> account_log<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="3-查看触发器"><a href="#3-查看触发器" class="headerlink" title="3.查看触发器"></a>3.查看触发器</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 标准语法</span><span class="token keyword">SHOW</span> TRIGGERS<span class="token punctuation">;</span><span class="token comment">-- 查看触发器</span><span class="token keyword">SHOW</span> TRIGGERS<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-删除触发器"><a href="#4-删除触发器" class="headerlink" title="4.删除触发器"></a>4.删除触发器</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 标准语法</span><span class="token keyword">DROP</span> <span class="token keyword">TRIGGER</span> 触发器名称<span class="token punctuation">;</span><span class="token comment">-- 删除DELETE触发器</span><span class="token keyword">DROP</span> <span class="token keyword">TRIGGER</span> account_delete<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-触发器的总结"><a href="#5-触发器的总结" class="headerlink" title="5.触发器的总结"></a>5.触发器的总结</h4><ul><li>触发器是与表有关的数据库对象</li><li>可以在 insert/update/delete 之前或之后，触发并执行触发器中定义的SQL语句</li><li>触发器的这种特性可以协助应用在数据库端确保数据的完整性 、日志记录 、数据校验等操作 </li><li>使用别名 NEW 和 OLD 来引用触发器中发生变化的记录内容</li></ul><h3 id="三、MySQL事务"><a href="#三、MySQL事务" class="headerlink" title="三、MySQL事务"></a>三、MySQL事务</h3><h4 id="1-事务的概念"><a href="#1-事务的概念" class="headerlink" title="1.事务的概念"></a>1.事务的概念</h4><ul><li>一条或多条 SQL 语句组成一个执行单元，其特点是这个单元要么同时成功要么同时失败，单元中的每条 SQL 语句都相互依赖，形成一个整体，如果某条 SQL 语句执行失败或者出现错误，那么整个单元就会回滚，撤回到事务最初的状态，如果单元中所有的 SQL 语句都执行成功，则事务就顺利执行。</li></ul><h4 id="2-事务的数据准备"><a href="#2-事务的数据准备" class="headerlink" title="2.事务的数据准备"></a>2.事务的数据准备</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 创建db10数据库</span><span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> db10<span class="token punctuation">;</span><span class="token comment">-- 使用db10数据库</span><span class="token keyword">USE</span> db10<span class="token punctuation">;</span><span class="token comment">-- 创建账户表</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> account<span class="token punctuation">(</span>id <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span><span class="token comment">-- 账户id</span>NAME <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment">-- 账户名称</span>money <span class="token keyword">DOUBLE</span><span class="token comment">-- 账户余额</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 添加数据</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> account <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token string">'张三'</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token string">'李四'</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-未管理事务演示"><a href="#3-未管理事务演示" class="headerlink" title="3.未管理事务演示"></a>3.未管理事务演示</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 张三给李四转账500元</span><span class="token comment">-- 1.张三账户-500</span><span class="token keyword">UPDATE</span> account <span class="token keyword">SET</span> money<span class="token operator">=</span>money<span class="token operator">-</span><span class="token number">500</span> <span class="token keyword">WHERE</span> NAME<span class="token operator">=</span><span class="token string">'张三'</span><span class="token punctuation">;</span><span class="token comment">-- 2.李四账户+500</span>出错了<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">UPDATE</span> account <span class="token keyword">SET</span> money<span class="token operator">=</span>money<span class="token operator">+</span><span class="token number">500</span> <span class="token keyword">WHERE</span> NAME<span class="token operator">=</span><span class="token string">'李四'</span><span class="token punctuation">;</span><span class="token comment">-- 该场景下，这两条sql语句要么同时成功，要么同时失败。就需要被事务所管理！</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-管理事务演示"><a href="#4-管理事务演示" class="headerlink" title="4.管理事务演示"></a>4.管理事务演示</h4><ul><li>操作事务的三个步骤<ol><li>开启事务：记录回滚点，并通知服务器，将要执行一组操作，要么同时成功、要么同时失败</li><li>执行sql语句：执行具体的一条或多条sql语句</li><li>结束事务(提交|回滚)<ul><li>提交：没出现问题，数据进行更新</li><li>回滚：出现问题，数据恢复到开启事务时的状态</li></ul></li></ol></li><li>开启事务</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 标准语法</span><span class="token keyword">START</span> <span class="token keyword">TRANSACTION</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>回滚事务</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 标准语法</span><span class="token keyword">ROLLBACK</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>提交事务</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 标准语法</span><span class="token keyword">COMMIT</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>管理事务演示</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 开启事务</span><span class="token keyword">START</span> <span class="token keyword">TRANSACTION</span><span class="token punctuation">;</span><span class="token comment">-- 张三给李四转账500元</span><span class="token comment">-- 1.张三账户-500</span><span class="token keyword">UPDATE</span> account <span class="token keyword">SET</span> money<span class="token operator">=</span>money<span class="token operator">-</span><span class="token number">500</span> <span class="token keyword">WHERE</span> NAME<span class="token operator">=</span><span class="token string">'张三'</span><span class="token punctuation">;</span><span class="token comment">-- 2.李四账户+500</span><span class="token comment">-- 出错了...</span><span class="token keyword">UPDATE</span> account <span class="token keyword">SET</span> money<span class="token operator">=</span>money<span class="token operator">+</span><span class="token number">500</span> <span class="token keyword">WHERE</span> NAME<span class="token operator">=</span><span class="token string">'李四'</span><span class="token punctuation">;</span><span class="token comment">-- 回滚事务(出现问题)</span><span class="token keyword">ROLLBACK</span><span class="token punctuation">;</span><span class="token comment">-- 提交事务(没出现问题)</span><span class="token keyword">COMMIT</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-事务的提交方式"><a href="#5-事务的提交方式" class="headerlink" title="5.事务的提交方式"></a>5.事务的提交方式</h4><ul><li><p>提交方式</p><ul><li>自动提交(MySQL默认为自动提交)</li><li>手动提交</li></ul></li><li><p>修改提交方式</p><ul><li>查看提交方式</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 标准语法</span><span class="token keyword">SELECT</span> @<span class="token variable">@AUTOCOMMIT</span><span class="token punctuation">;</span>  <span class="token comment">-- 1代表自动提交    0代表手动提交</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>修改提交方式</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 标准语法</span><span class="token keyword">SET</span> @<span class="token variable">@AUTOCOMMIT</span><span class="token operator">=</span>数字<span class="token punctuation">;</span><span class="token comment">-- 修改为手动提交</span><span class="token keyword">SET</span> @<span class="token variable">@AUTOCOMMIT</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">-- 查看提交方式</span><span class="token keyword">SELECT</span> @<span class="token variable">@AUTOCOMMIT</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="6-事务的四大特征-ACID"><a href="#6-事务的四大特征-ACID" class="headerlink" title="6.事务的四大特征(ACID)"></a>6.事务的四大特征(ACID)</h4><ul><li>原子性(atomicity)<ul><li>原子性是指事务包含的所有操作要么全部成功，要么全部失败回滚，因此事务的操作如果成功就必须要完全应用到数据库，如果操作失败则不能对数据库有任何影响</li></ul></li><li>一致性(consistency)<ul><li>一致性是指事务必须使数据库从一个一致性状态变换到另一个一致性状态，也就是说一个事务执行之前和执行之后都必须处于一致性状态</li><li>拿转账来说，假设张三和李四两者的钱加起来一共是2000，那么不管A和B之间如何转账，转几次账，事务结束后两个用户的钱相加起来应该还得是2000，这就是事务的一致性</li></ul></li><li>隔离性(isolcation)<ul><li>隔离性是当多个用户并发访问数据库时，比如操作同一张表时，数据库为每一个用户开启的事务，不能被其他事务的操作所干扰，多个并发事务之间要相互隔离</li></ul></li><li>持久性(durability)<ul><li>持久性是指一个事务一旦被提交了，那么对数据库中的数据的改变就是永久性的，即便是在数据库系统遇到故障的情况下也不会丢失提交事务的操作</li></ul></li></ul><h4 id="7-事务的隔离级别"><a href="#7-事务的隔离级别" class="headerlink" title="7.事务的隔离级别"></a>7.事务的隔离级别</h4><ul><li>隔离级别的概念<ul><li>多个客户端操作时 ,各个客户端的事务之间应该是隔离的，相互独立的 , 不受影响的。</li><li>而如果多个事务操作同一批数据时，则需要设置不同的隔离级别 , 否则就会产生问题 。</li><li>我们先来了解一下四种隔离级别的名称 , 再来看看可能出现的问题</li></ul></li><li>四种隔离级别</li></ul><table><thead><tr><th>1</th><th>读未提交</th><th>read uncommitted</th></tr></thead><tbody><tr><td><strong>2</strong></td><td><strong>读已提交</strong></td><td><strong>read committed</strong></td></tr><tr><td><strong>3</strong></td><td><strong>可重复读</strong></td><td><strong>repeatable read</strong></td></tr><tr><td><strong>4</strong></td><td><strong>串行化</strong></td><td><strong>serializable</strong></td></tr></tbody></table><ul><li>可能引发的问题</li></ul><table><thead><tr><th>问题</th><th>现象</th></tr></thead><tbody><tr><td><strong>脏读</strong></td><td><strong>是指在一个事务处理过程中读取了另一个未提交的事务中的数据 , 导致两次查询结果不一致</strong></td></tr><tr><td><strong>不可重复读</strong></td><td><strong>是指在一个事务处理过程中读取了另一个事务中修改并已提交的数据, 导致两次查询结果不一致</strong></td></tr><tr><td><strong>幻读</strong></td><td><strong>select 某记录是否存在，不存在，准备插入此记录，但执行 insert 时发现此记录已存在，无法插入。或不存在执行delete删除，却发现删除成功</strong></td></tr></tbody></table><ul><li>查询数据库隔离级别</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 标准语法</span><span class="token keyword">SELECT</span> @<span class="token variable">@TX_ISOLATION</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>修改数据库隔离级别</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 标准语法</span><span class="token keyword">SET</span> <span class="token keyword">GLOBAL</span> <span class="token keyword">TRANSACTION</span> <span class="token keyword">ISOLATION</span> <span class="token keyword">LEVEL</span> 级别字符串<span class="token punctuation">;</span><span class="token comment">-- 修改数据库隔离级别为read uncommitted</span><span class="token keyword">SET</span> <span class="token keyword">GLOBAL</span> <span class="token keyword">TRANSACTION</span> <span class="token keyword">ISOLATION</span> <span class="token keyword">LEVEL</span> <span class="token keyword">read</span> <span class="token keyword">uncommitted</span><span class="token punctuation">;</span><span class="token comment">-- 查看隔离级别</span><span class="token keyword">SELECT</span> @<span class="token variable">@TX_ISOLATION</span><span class="token punctuation">;</span>   <span class="token comment">-- 修改后需要断开连接重新开</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="8-事务隔离级别演示"><a href="#8-事务隔离级别演示" class="headerlink" title="8.事务隔离级别演示"></a>8.事务隔离级别演示</h4><ul><li><p>脏读的问题</p><ul><li>窗口1</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 查询账户表</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> account<span class="token punctuation">;</span><span class="token comment">-- 设置隔离级别为read uncommitted</span><span class="token keyword">set</span> <span class="token keyword">global</span> <span class="token keyword">transaction</span> <span class="token keyword">isolation</span> <span class="token keyword">level</span> <span class="token keyword">read</span> <span class="token keyword">uncommitted</span><span class="token punctuation">;</span><span class="token comment">-- 开启事务</span><span class="token keyword">start</span> <span class="token keyword">transaction</span><span class="token punctuation">;</span><span class="token comment">-- 转账</span><span class="token keyword">update</span> account <span class="token keyword">set</span> money <span class="token operator">=</span> money <span class="token operator">-</span> <span class="token number">500</span> <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">update</span> account <span class="token keyword">set</span> money <span class="token operator">=</span> money <span class="token operator">+</span> <span class="token number">500</span> <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">-- 窗口2查询转账结果 ,出现脏读(查询到其他事务未提交的数据)</span><span class="token comment">-- 窗口2查看转账结果后，执行回滚</span><span class="token keyword">rollback</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>窗口2</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 查询隔离级别</span><span class="token keyword">select</span> @<span class="token variable">@tx_isolation</span><span class="token punctuation">;</span><span class="token comment">-- 开启事务</span><span class="token keyword">start</span> <span class="token keyword">transaction</span><span class="token punctuation">;</span><span class="token comment">-- 查询账户表</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> account<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>解决脏读的问题和演示不可重复读的问题</p><ul><li>窗口1</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 设置隔离级别为read committed</span><span class="token keyword">set</span> <span class="token keyword">global</span> <span class="token keyword">transaction</span> <span class="token keyword">isolation</span> <span class="token keyword">level</span> <span class="token keyword">read</span> <span class="token keyword">committed</span><span class="token punctuation">;</span><span class="token comment">-- 开启事务</span><span class="token keyword">start</span> <span class="token keyword">transaction</span><span class="token punctuation">;</span><span class="token comment">-- 转账</span><span class="token keyword">update</span> account <span class="token keyword">set</span> money <span class="token operator">=</span> money <span class="token operator">-</span> <span class="token number">500</span> <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">update</span> account <span class="token keyword">set</span> money <span class="token operator">=</span> money <span class="token operator">+</span> <span class="token number">500</span> <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">-- 窗口2查看转账结果，并没有发生变化(脏读问题被解决了)</span><span class="token comment">-- 执行提交事务。</span><span class="token keyword">commit</span><span class="token punctuation">;</span><span class="token comment">-- 窗口2查看转账结果，数据发生了变化(出现了不可重复读的问题，读取到其他事务已提交的数据)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>窗口2</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 查询隔离级别</span><span class="token keyword">select</span> @<span class="token variable">@tx_isolation</span><span class="token punctuation">;</span><span class="token comment">-- 开启事务</span><span class="token keyword">start</span> <span class="token keyword">transaction</span><span class="token punctuation">;</span><span class="token comment">-- 查询账户表</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> account<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>解决不可重复读的问题</p><ul><li>窗口1</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 设置隔离级别为repeatable read</span><span class="token keyword">set</span> <span class="token keyword">global</span> <span class="token keyword">transaction</span> <span class="token keyword">isolation</span> <span class="token keyword">level</span> <span class="token keyword">repeatable</span> <span class="token keyword">read</span><span class="token punctuation">;</span><span class="token comment">-- 开启事务</span><span class="token keyword">start</span> <span class="token keyword">transaction</span><span class="token punctuation">;</span><span class="token comment">-- 转账</span><span class="token keyword">update</span> account <span class="token keyword">set</span> money <span class="token operator">=</span> money <span class="token operator">-</span> <span class="token number">500</span> <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">update</span> account <span class="token keyword">set</span> money <span class="token operator">=</span> money <span class="token operator">+</span> <span class="token number">500</span> <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">-- 窗口2查看转账结果，并没有发生变化</span><span class="token comment">-- 执行提交事务</span><span class="token keyword">commit</span><span class="token punctuation">;</span><span class="token comment">-- 这个时候窗口2只要还在上次事务中，看到的结果都是相同的。只有窗口2结束事务，才能看到变化(不可重复读的问题被解决)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>窗口2</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 查询隔离级别</span><span class="token keyword">select</span> @<span class="token variable">@tx_isolation</span><span class="token punctuation">;</span><span class="token comment">-- 开启事务</span><span class="token keyword">start</span> <span class="token keyword">transaction</span><span class="token punctuation">;</span><span class="token comment">-- 查询账户表</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> account<span class="token punctuation">;</span><span class="token comment">-- 提交事务</span><span class="token keyword">commit</span><span class="token punctuation">;</span><span class="token comment">-- 查询账户表</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> account<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>幻读的问题和解决</p><ul><li>窗口1</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 设置隔离级别为repeatable read</span><span class="token keyword">set</span> <span class="token keyword">global</span> <span class="token keyword">transaction</span> <span class="token keyword">isolation</span> <span class="token keyword">level</span> <span class="token keyword">repeatable</span> <span class="token keyword">read</span><span class="token punctuation">;</span><span class="token comment">-- 开启事务</span><span class="token keyword">start</span> <span class="token keyword">transaction</span><span class="token punctuation">;</span><span class="token comment">-- 添加一条记录</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> account <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'王五'</span><span class="token punctuation">,</span><span class="token number">1500</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 查询账户表，本窗口可以查看到id为3的结果</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> account<span class="token punctuation">;</span><span class="token comment">-- 提交事务</span><span class="token keyword">COMMIT</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>窗口2</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 查询隔离级别</span><span class="token keyword">select</span> @<span class="token variable">@tx_isolation</span><span class="token punctuation">;</span><span class="token comment">-- 开启事务</span><span class="token keyword">start</span> <span class="token keyword">transaction</span><span class="token punctuation">;</span><span class="token comment">-- 查询账户表，查询不到新添加的id为3的记录</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> account<span class="token punctuation">;</span><span class="token comment">-- 添加id为3的一条数据，发现添加失败。出现了幻读</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> account <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'测试'</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 提交事务</span><span class="token keyword">COMMIT</span><span class="token punctuation">;</span><span class="token comment">-- 查询账户表，查询到了新添加的id为3的记录</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> account<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>解决幻读的问题</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">/*窗口1*/</span><span class="token comment">-- 设置隔离级别为serializable</span><span class="token keyword">set</span> <span class="token keyword">global</span> <span class="token keyword">transaction</span> <span class="token keyword">isolation</span> <span class="token keyword">level</span> <span class="token keyword">serializable</span><span class="token punctuation">;</span><span class="token comment">-- 开启事务</span><span class="token keyword">start</span> <span class="token keyword">transaction</span><span class="token punctuation">;</span><span class="token comment">-- 添加一条记录</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> account <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">'赵六'</span><span class="token punctuation">,</span><span class="token number">1600</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 查询账户表，本窗口可以查看到id为4的结果</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> account<span class="token punctuation">;</span><span class="token comment">-- 提交事务</span><span class="token keyword">COMMIT</span><span class="token punctuation">;</span><span class="token comment">/*窗口2*/</span><span class="token comment">-- 查询隔离级别</span><span class="token keyword">select</span> @<span class="token variable">@tx_isolation</span><span class="token punctuation">;</span><span class="token comment">-- 开启事务</span><span class="token keyword">start</span> <span class="token keyword">transaction</span><span class="token punctuation">;</span><span class="token comment">-- 查询账户表，发现查询语句无法执行，数据表被锁住！只有窗口1提交事务后，才可以继续操作</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> account<span class="token punctuation">;</span><span class="token comment">-- 添加id为4的一条数据，发现已经存在了，就不会再添加了！幻读的问题被解决</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> account <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">'测试'</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 提交事务</span><span class="token keyword">COMMIT</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="9-隔离级别总结"><a href="#9-隔离级别总结" class="headerlink" title="9.隔离级别总结"></a>9.隔离级别总结</h4><table><thead><tr><th></th><th>隔离级别</th><th>名称</th><th>出现脏读</th><th>出现不可重复读</th><th>出现幻读</th><th>数据库默认隔离级别</th></tr></thead><tbody><tr><td>1</td><td><strong>read uncommitted</strong></td><td>读未提交</td><td>是</td><td>是</td><td>是</td><td></td></tr><tr><td>2</td><td><strong>read committed</strong></td><td>读已提交</td><td>否</td><td>是</td><td>是</td><td>Oracle / SQL Server</td></tr><tr><td>3</td><td><strong>repeatable read</strong></td><td>可重复读</td><td>否</td><td>否</td><td>是</td><td>MySQL</td></tr><tr><td>4</td><td>**serializable **</td><td>串行化</td><td>否</td><td>否</td><td>否</td><td></td></tr></tbody></table><blockquote><p>注意：隔离级别从小到大安全性越来越高，但是效率越来越低 , 所以不建议使用READ UNCOMMITTED 和 SERIALIZABLE 隔离级别.</p></blockquote><h4 id="10-事务的总结"><a href="#10-事务的总结" class="headerlink" title="10.事务的总结"></a>10.事务的总结</h4><ul><li>一条或多条 SQL 语句组成一个执行单元，其特点是这个单元要么同时成功要么同时失败。例如转账操作</li><li>开启事务：start transaction;</li><li>回滚事务：rollback;</li><li>提交事务：commit;</li><li>事务四大特征<ul><li>原子性</li><li>持久性</li><li>隔离性</li><li>一致性</li></ul></li><li>事务的隔离级别<ul><li>read uncommitted(读未提交)</li><li>read committed (读已提交)</li><li>repeatable read (可重复读)</li><li>serializable (串行化)</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL进阶-02</title>
      <link href="/2021/05/23/mysql-jin-jie-02/"/>
      <url>/2021/05/23/mysql-jin-jie-02/</url>
      
        <content type="html"><![CDATA[<h3 id="一、约束"><a href="#一、约束" class="headerlink" title="一、约束"></a>一、约束</h3><h4 id="1-外键约束"><a href="#1-外键约束" class="headerlink" title="1.外键约束"></a>1.外键约束</h4><ul><li><p>外键约束概念</p><ul><li>让表和表之间产生关系，从而保证数据的准确性！</li></ul></li><li><p>建表时添加外键约束</p><ul><li>为什么要有外键约束</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 创建db2数据库</span><span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> db2<span class="token punctuation">;</span><span class="token comment">-- 使用db2数据库</span><span class="token keyword">USE</span> db2<span class="token punctuation">;</span><span class="token comment">-- 创建user用户表</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token keyword">USER</span><span class="token punctuation">(</span>id <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>    <span class="token comment">-- id</span>NAME <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span>             <span class="token comment">-- 姓名</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 添加用户数据</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token keyword">USER</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token string">'张三'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token string">'李四'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token string">'王五'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 创建orderlist订单表</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> orderlist<span class="token punctuation">(</span>id <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>    <span class="token comment">-- id</span>number <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>          <span class="token comment">-- 订单编号</span>uid <span class="token keyword">INT</span>                               <span class="token comment">-- 订单所属用户</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 添加订单数据</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> orderlist <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token string">'hm001'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token string">'hm002'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token string">'hm003'</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token string">'hm004'</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token string">'hm005'</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token string">'hm006'</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 添加一个订单，但是没有所属用户。这合理吗？</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> orderlist <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token string">'hm007'</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 删除王五这个用户，但是订单表中王五还有很多个订单呢。这合理吗？</span><span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> <span class="token keyword">USER</span> <span class="token keyword">WHERE</span> NAME<span class="token operator">=</span><span class="token string">'王五'</span><span class="token punctuation">;</span><span class="token comment">-- 所以我们需要添加外键约束，让两张表产生关系</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>外键约束格式</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CONSTRAINT</span> 外键名 <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>本表外键列名<span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> 主表名<span class="token punctuation">(</span>主表主键列名<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>创建表添加外键约束</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 创建user用户表</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token keyword">USER</span><span class="token punctuation">(</span>id <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>    <span class="token comment">-- id</span>NAME <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span>             <span class="token comment">-- 姓名</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 添加用户数据</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token keyword">USER</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token string">'张三'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token string">'李四'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token string">'王五'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 创建orderlist订单表</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> orderlist<span class="token punctuation">(</span>id <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>    <span class="token comment">-- id</span>number <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>          <span class="token comment">-- 订单编号</span>uid <span class="token keyword">INT</span><span class="token punctuation">,</span>                              <span class="token comment">-- 订单所属用户</span><span class="token keyword">CONSTRAINT</span> ou_fk1 <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>uid<span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> <span class="token keyword">USER</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>   <span class="token comment">-- 添加外键约束</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 添加订单数据</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> orderlist <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token string">'hm001'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token string">'hm002'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token string">'hm003'</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token string">'hm004'</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token string">'hm005'</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token string">'hm006'</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 添加一个订单，但是没有所属用户。无法添加</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> orderlist <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token string">'hm007'</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 删除王五这个用户，但是订单表中王五还有很多个订单呢。无法删除</span><span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> <span class="token keyword">USER</span> <span class="token keyword">WHERE</span> NAME<span class="token operator">=</span><span class="token string">'王五'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>删除外键约束</p></li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 标准语法</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> 表名 <span class="token keyword">DROP</span> <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> 外键名<span class="token punctuation">;</span><span class="token comment">-- 删除外键</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> orderlist <span class="token keyword">DROP</span> <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> ou_fk1<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>建表后添加外键约束</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 标准语法</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> 表名 <span class="token keyword">ADD</span> <span class="token keyword">CONSTRAINT</span> 外键名 <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>本表外键列名<span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> 主表名<span class="token punctuation">(</span>主键列名<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 添加外键约束</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> orderlist <span class="token keyword">ADD</span> <span class="token keyword">CONSTRAINT</span> ou_fk1 <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>uid<span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> <span class="token keyword">USER</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-外键的级联更新和级联删除-了解"><a href="#2-外键的级联更新和级联删除-了解" class="headerlink" title="2.外键的级联更新和级联删除(了解)"></a>2.外键的级联更新和级联删除(了解)</h4><ul><li>什么是级联更新和级联删除<ul><li>当我想把user用户表中的某个用户删掉，我希望该用户所有的订单也随之被删除</li><li>当我想把user用户表中的某个用户id修改，我希望订单表中该用户所属的订单用户编号也随之修改</li></ul></li><li>添加级联更新和级联删除</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 添加外键约束，同时添加级联更新  标准语法</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> 表名 <span class="token keyword">ADD</span> <span class="token keyword">CONSTRAINT</span> 外键名 <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>本表外键列名<span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> 主表名<span class="token punctuation">(</span>主键列名<span class="token punctuation">)</span> <span class="token keyword">ON</span> <span class="token keyword">UPDATE</span> <span class="token keyword">CASCADE</span><span class="token punctuation">;</span><span class="token comment">-- 添加外键约束，同时添加级联删除  标准语法</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> 表名 <span class="token keyword">ADD</span> <span class="token keyword">CONSTRAINT</span> 外键名 <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>本表外键列名<span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> 主表名<span class="token punctuation">(</span>主键列名<span class="token punctuation">)</span> <span class="token keyword">ON</span> <span class="token keyword">DELETE</span> <span class="token keyword">CASCADE</span><span class="token punctuation">;</span><span class="token comment">-- 添加外键约束，同时添加级联更新和级联删除  标准语法</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> 表名 <span class="token keyword">ADD</span> <span class="token keyword">CONSTRAINT</span> 外键名 <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>本表外键列名<span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> 主表名<span class="token punctuation">(</span>主键列名<span class="token punctuation">)</span> <span class="token keyword">ON</span> <span class="token keyword">UPDATE</span> <span class="token keyword">CASCADE</span> <span class="token keyword">ON</span> <span class="token keyword">DELETE</span> <span class="token keyword">CASCADE</span><span class="token punctuation">;</span><span class="token comment">-- 删除外键约束</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> orderlist <span class="token keyword">DROP</span> <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> ou_fk1<span class="token punctuation">;</span><span class="token comment">-- 添加外键约束，同时添加级联更新和级联删除</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> orderlist <span class="token keyword">ADD</span> <span class="token keyword">CONSTRAINT</span> ou_fk1 <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>uid<span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> <span class="token keyword">USER</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token keyword">ON</span> <span class="token keyword">UPDATE</span> <span class="token keyword">CASCADE</span> <span class="token keyword">ON</span> <span class="token keyword">DELETE</span> <span class="token keyword">CASCADE</span><span class="token punctuation">;</span><span class="token comment">-- 将王五用户的id修改为5    订单表中的uid也随之被修改</span><span class="token keyword">UPDATE</span> <span class="token keyword">USER</span> <span class="token keyword">SET</span> id<span class="token operator">=</span><span class="token number">5</span> <span class="token keyword">WHERE</span> id<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span><span class="token comment">-- 将王五用户删除     订单表中该用户所有订单也随之删除</span><span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> <span class="token keyword">USER</span> <span class="token keyword">WHERE</span> id<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二、多表设计"><a href="#二、多表设计" class="headerlink" title="二、多表设计"></a>二、多表设计</h3><h4 id="1-一对一-了解"><a href="#1-一对一-了解" class="headerlink" title="1.一对一(了解)"></a>1.一对一(了解)</h4><ul><li>分析<ul><li>人和身份证。一个人只有一个身份证，一个身份证只能对应一个人！</li></ul></li><li>实现原则<ul><li>在任意一个表建立外键，去关联另外一个表的主键</li></ul></li><li>SQL演示</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 创建db5数据库</span><span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> db5<span class="token punctuation">;</span><span class="token comment">-- 使用db5数据库</span><span class="token keyword">USE</span> db5<span class="token punctuation">;</span><span class="token comment">-- 创建person表</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> person<span class="token punctuation">(</span>id <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>NAME <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 添加数据</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> person <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token string">'张三'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token string">'李四'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 创建card表</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> card<span class="token punctuation">(</span>id <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>number <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">,</span>pid <span class="token keyword">INT</span> <span class="token keyword">UNIQUE</span><span class="token punctuation">,</span><span class="token keyword">CONSTRAINT</span> cp_fk1 <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>pid<span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> person<span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token comment">-- 添加外键</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 添加数据</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> card <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token string">'12345'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token string">'56789'</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>图解</li></ul><p><img src="https://i.loli.net/2021/05/22/YXaZphAtku6ILN2.png" alt="01"></p><h4 id="2-一对多"><a href="#2-一对多" class="headerlink" title="2.一对多"></a>2.一对多</h4><ul><li>分析<ul><li>用户和订单。一个用户可以有多个订单！</li><li>商品分类和商品。一个分类下可以有多个商品！</li></ul></li><li>实现原则<ul><li>在多的一方，建立外键约束，来关联一的一方主键</li></ul></li><li>SQL演示</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">/*用户和订单*/</span><span class="token comment">-- 创建user表</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token keyword">USER</span><span class="token punctuation">(</span>id <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>NAME <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 添加数据</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token keyword">USER</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token string">'张三'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token string">'李四'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 创建orderlist表</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> orderlist<span class="token punctuation">(</span>id <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>number <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>uid <span class="token keyword">INT</span><span class="token punctuation">,</span><span class="token keyword">CONSTRAINT</span> ou_fk1 <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>uid<span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> <span class="token keyword">USER</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>  <span class="token comment">-- 添加外键约束</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 添加数据</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> orderlist <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token string">'hm001'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token string">'hm002'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token string">'hm003'</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token string">'hm004'</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*商品分类和商品*/</span><span class="token comment">-- 创建category表</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> category<span class="token punctuation">(</span>id <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>NAME <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 添加数据</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> category <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token string">'手机数码'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token string">'电脑办公'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 创建product表</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> product<span class="token punctuation">(</span>id <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>NAME <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span>cid <span class="token keyword">INT</span><span class="token punctuation">,</span><span class="token keyword">CONSTRAINT</span> pc_fk1 <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>cid<span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> category<span class="token punctuation">(</span>id<span class="token punctuation">)</span>  <span class="token comment">-- 添加外键约束</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 添加数据</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> product <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token string">'华为P30'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token string">'小米note3'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token string">'联想电脑'</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token string">'苹果电脑'</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>图解</li></ul><p><img src="https://i.loli.net/2021/05/22/5erKFBPavwu6D4M.png" alt="02"></p><h4 id="3-多对多"><a href="#3-多对多" class="headerlink" title="3.多对多"></a>3.多对多</h4><ul><li>分析<ul><li>学生和课程。一个学生可以选择多个课程，一个课程也可以被多个学生选择！</li></ul></li><li>实现原则<ul><li>需要借助第三张表中间表，中间表至少包含两个列，这两个列作为中间表的外键，分别关联两张表的主键</li></ul></li><li>SQL演示</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 创建student表</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> student<span class="token punctuation">(</span>id <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>NAME <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 添加数据</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> student <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token string">'张三'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token string">'李四'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 创建course表</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> course<span class="token punctuation">(</span>id <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>NAME <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 添加数据</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> course <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token string">'语文'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token string">'数学'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 创建中间表</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> stu_course<span class="token punctuation">(</span>id <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>sid <span class="token keyword">INT</span><span class="token punctuation">,</span> <span class="token comment">-- 用于和student表的id进行外键关联</span>cid <span class="token keyword">INT</span><span class="token punctuation">,</span> <span class="token comment">-- 用于和course表的id进行外键关联</span><span class="token keyword">CONSTRAINT</span> sc_fk1 <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>sid<span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> student<span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">-- 添加外键约束</span><span class="token keyword">CONSTRAINT</span> sc_fk2 <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>cid<span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> course<span class="token punctuation">(</span>id<span class="token punctuation">)</span>   <span class="token comment">-- 添加外键约束</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 添加数据</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> stu_course <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>图解</li></ul><p><img src="https://i.loli.net/2021/05/22/2ghAZVJUpEHryKW.png" alt="03"></p><h3 id="三、多表查询"><a href="#三、多表查询" class="headerlink" title="三、多表查询"></a>三、多表查询</h3><h4 id="1-多表查询-数据准备"><a href="#1-多表查询-数据准备" class="headerlink" title="1.多表查询-数据准备"></a>1.多表查询-数据准备</h4><ul><li>SQL语句</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 创建db6数据库</span><span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> db6<span class="token punctuation">;</span><span class="token comment">-- 使用db6数据库</span><span class="token keyword">USE</span> db6<span class="token punctuation">;</span><span class="token comment">-- 创建user表</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token keyword">USER</span><span class="token punctuation">(</span>id <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span><span class="token comment">-- 用户id</span>NAME <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token comment">-- 用户姓名</span>age <span class="token keyword">INT</span>                             <span class="token comment">-- 用户年龄</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 添加数据</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token keyword">USER</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'张三'</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token keyword">USER</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'李四'</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token keyword">USER</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'王五'</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token keyword">USER</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">'赵六'</span><span class="token punctuation">,</span><span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 订单表</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> orderlist<span class="token punctuation">(</span>id <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span><span class="token comment">-- 订单id</span>number <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment">-- 订单编号</span>uid <span class="token keyword">INT</span><span class="token punctuation">,</span>    <span class="token comment">-- 外键字段</span><span class="token keyword">CONSTRAINT</span> ou_fk1 <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>uid<span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> <span class="token keyword">USER</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 添加数据</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> orderlist <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'hm001'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> orderlist <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'hm002'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> orderlist <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'hm003'</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> orderlist <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">'hm004'</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> orderlist <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token string">'hm005'</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> orderlist <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token string">'hm006'</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> orderlist <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token string">'hm007'</span><span class="token punctuation">,</span><span class="token boolean">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 商品分类表</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> category<span class="token punctuation">(</span>id <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>  <span class="token comment">-- 商品分类id</span>NAME <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>                    <span class="token comment">-- 商品分类名称</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 添加数据</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> category <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'手机数码'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> category <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'电脑办公'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> category <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'烟酒茶糖'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> category <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">'鞋靴箱包'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 商品表</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> product<span class="token punctuation">(</span>id <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>   <span class="token comment">-- 商品id</span>NAME <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    <span class="token comment">-- 商品名称</span>cid <span class="token keyword">INT</span><span class="token punctuation">,</span> <span class="token comment">-- 外键字段</span><span class="token keyword">CONSTRAINT</span> cp_fk1 <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>cid<span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> category<span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 添加数据</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> product <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'华为手机'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> product <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'小米手机'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> product <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'联想电脑'</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> product <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">'苹果电脑'</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> product <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token string">'中华香烟'</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> product <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token string">'玉溪香烟'</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> product <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token string">'计生用品'</span><span class="token punctuation">,</span><span class="token boolean">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 中间表</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> us_pro<span class="token punctuation">(</span>upid <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>  <span class="token comment">-- 中间表id</span>uid <span class="token keyword">INT</span><span class="token punctuation">,</span> <span class="token comment">-- 外键字段。需要和用户表的主键产生关联</span>pid <span class="token keyword">INT</span><span class="token punctuation">,</span> <span class="token comment">-- 外键字段。需要和商品表的主键产生关联</span><span class="token keyword">CONSTRAINT</span> up_fk1 <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>uid<span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> <span class="token keyword">USER</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">CONSTRAINT</span> up_fk2 <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>pid<span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> product<span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 添加数据</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> us_pro <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> us_pro <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> us_pro <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> us_pro <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> us_pro <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> us_pro <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> us_pro <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> us_pro <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> us_pro <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> us_pro <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> us_pro <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> us_pro <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> us_pro <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> us_pro <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> us_pro <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> us_pro <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> us_pro <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> us_pro <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> us_pro <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> us_pro <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> us_pro <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> us_pro <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> us_pro <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> us_pro <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> us_pro <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> us_pro <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> us_pro <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> us_pro <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>架构器图解</li></ul><p><img src="https://i.loli.net/2021/05/22/nD2NrJb8R6svXBo.png" alt="04"></p><h4 id="2-多表查询-笛卡尔积查询-了解"><a href="#2-多表查询-笛卡尔积查询-了解" class="headerlink" title="2.多表查询-笛卡尔积查询(了解)"></a>2.多表查询-笛卡尔积查询(了解)</h4><ul><li>有两张表，获取这两个表的所有组合情况</li><li>要完成多表查询，需要消除这些没有用的数据</li><li>多表查询格式</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span>列名列表<span class="token keyword">FROM</span>表名列表<span class="token keyword">WHERE</span>条件<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>笛卡尔积查询</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 标准语法</span><span class="token keyword">SELECT</span> 列名 <span class="token keyword">FROM</span> 表名<span class="token number">1</span><span class="token punctuation">,</span>表名<span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span><span class="token comment">-- 查询user表和orderlist表</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token keyword">USER</span><span class="token punctuation">,</span>orderlist<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-多表查询-内连接查询"><a href="#3-多表查询-内连接查询" class="headerlink" title="3.多表查询-内连接查询"></a>3.多表查询-内连接查询</h4><ul><li>查询原理<ul><li>内连接查询的是两张表有交集的部分数据(有主外键关联的数据)</li></ul></li><li>显式内连接</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 标准语法</span><span class="token keyword">SELECT</span> 列名 <span class="token keyword">FROM</span> 表名<span class="token number">1</span> <span class="token punctuation">[</span><span class="token keyword">INNER</span><span class="token punctuation">]</span> <span class="token keyword">JOIN</span> 表名<span class="token number">2</span> <span class="token keyword">ON</span> 条件<span class="token punctuation">;</span><span class="token comment">-- 查询用户信息和对应的订单信息</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token keyword">USER</span> <span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> orderlist <span class="token keyword">ON</span> <span class="token keyword">user</span><span class="token punctuation">.</span>id<span class="token operator">=</span>orderlist<span class="token punctuation">.</span>uid<span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token keyword">USER</span> <span class="token keyword">JOIN</span> orderlist <span class="token keyword">ON</span> <span class="token keyword">user</span><span class="token punctuation">.</span>id<span class="token operator">=</span>orderlist<span class="token punctuation">.</span>uid<span class="token punctuation">;</span><span class="token comment">-- 查询用户信息和对应的订单信息，起别名</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token keyword">USER</span> u <span class="token keyword">JOIN</span> orderlist o <span class="token keyword">ON</span> u<span class="token punctuation">.</span>id<span class="token operator">=</span>o<span class="token punctuation">.</span>uid<span class="token punctuation">;</span><span class="token comment">-- 查询用户姓名，年龄。和订单编号</span><span class="token keyword">SELECT</span>u<span class="token punctuation">.</span><span class="token punctuation">`</span>name<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token comment">-- 姓名</span>u<span class="token punctuation">.</span><span class="token punctuation">`</span>age<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token comment">-- 年龄</span>o<span class="token punctuation">.</span><span class="token punctuation">`</span>number<span class="token punctuation">`</span><span class="token comment">-- 订单编号</span><span class="token keyword">FROM</span><span class="token keyword">USER</span> u          <span class="token comment">-- 用户表</span><span class="token keyword">JOIN</span>orderlist o     <span class="token comment">-- 订单表</span><span class="token keyword">ON</span> u<span class="token punctuation">.</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token operator">=</span> o<span class="token punctuation">.</span><span class="token punctuation">`</span>uid<span class="token punctuation">`</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>隐式内连接</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 标准语法</span><span class="token keyword">SELECT</span> 列名 <span class="token keyword">FROM</span> 表名<span class="token number">1</span><span class="token punctuation">,</span>表名<span class="token number">2</span> <span class="token keyword">WHERE</span> 条件<span class="token punctuation">;</span><span class="token comment">-- 查询用户姓名，年龄。和订单编号</span><span class="token keyword">SELECT</span>u<span class="token punctuation">.</span><span class="token punctuation">`</span>name<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token comment">-- 姓名</span>u<span class="token punctuation">.</span><span class="token punctuation">`</span>age<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token comment">-- 年龄</span>o<span class="token punctuation">.</span><span class="token punctuation">`</span>number<span class="token punctuation">`</span><span class="token comment">-- 订单编号</span><span class="token keyword">FROM</span><span class="token keyword">USER</span> u<span class="token punctuation">,</span><span class="token comment">-- 用户表</span>orderlist o     <span class="token comment">-- 订单表</span><span class="token keyword">WHERE</span>u<span class="token punctuation">.</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token operator">=</span>o<span class="token punctuation">.</span><span class="token punctuation">`</span>uid<span class="token punctuation">`</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-多表查询-外连接查询"><a href="#4-多表查询-外连接查询" class="headerlink" title="4.多表查询-外连接查询"></a>4.多表查询-外连接查询</h4><ul><li><p>左外连接</p><ul><li>查询原理<ul><li>查询左表的全部数据，和左右两张表有交集部分的数据</li></ul></li><li>基本演示</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 标准语法</span><span class="token keyword">SELECT</span> 列名 <span class="token keyword">FROM</span> 表名<span class="token number">1</span> <span class="token keyword">LEFT</span> <span class="token punctuation">[</span><span class="token keyword">OUTER</span><span class="token punctuation">]</span> <span class="token keyword">JOIN</span> 表名<span class="token number">2</span> <span class="token keyword">ON</span> 条件<span class="token punctuation">;</span><span class="token comment">-- 查询所有用户信息，以及用户对应的订单信息</span><span class="token keyword">SELECT</span>u<span class="token punctuation">.</span><span class="token punctuation">`</span>name<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token comment">-- 姓名</span>u<span class="token punctuation">.</span><span class="token punctuation">`</span>age<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token comment">-- 年龄</span>o<span class="token punctuation">.</span><span class="token punctuation">`</span>number<span class="token punctuation">`</span><span class="token comment">-- 订单编号</span><span class="token keyword">FROM</span><span class="token keyword">USER</span> u          <span class="token comment">-- 用户表</span><span class="token keyword">LEFT</span> <span class="token keyword">OUTER</span> <span class="token keyword">JOIN</span>orderlist o     <span class="token comment">-- 订单表</span><span class="token keyword">ON</span>u<span class="token punctuation">.</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token operator">=</span>o<span class="token punctuation">.</span><span class="token punctuation">`</span>uid<span class="token punctuation">`</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>右外连接</p><ul><li>查询原理<ul><li>查询右表的全部数据，和左右两张表有交集部分的数据</li></ul></li><li>基本演示</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 基本语法</span><span class="token keyword">SELECT</span> 列名 <span class="token keyword">FROM</span> 表名<span class="token number">1</span> <span class="token keyword">RIGHT</span> <span class="token punctuation">[</span><span class="token keyword">OUTER</span><span class="token punctuation">]</span> <span class="token keyword">JOIN</span> 表名<span class="token number">2</span> <span class="token keyword">ON</span> 条件<span class="token punctuation">;</span><span class="token comment">-- 查询所有订单信息，以及订单所属的用户信息</span><span class="token keyword">SELECT</span>u<span class="token punctuation">.</span><span class="token punctuation">`</span>name<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token comment">-- 姓名</span>u<span class="token punctuation">.</span><span class="token punctuation">`</span>age<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token comment">-- 年龄</span>o<span class="token punctuation">.</span><span class="token punctuation">`</span>number<span class="token punctuation">`</span><span class="token comment">-- 订单编号</span><span class="token keyword">FROM</span><span class="token keyword">USER</span> u          <span class="token comment">-- 用户表</span><span class="token keyword">RIGHT</span> <span class="token keyword">OUTER</span> <span class="token keyword">JOIN</span>orderlist o     <span class="token comment">-- 订单表</span><span class="token keyword">ON</span>u<span class="token punctuation">.</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token operator">=</span>o<span class="token punctuation">.</span><span class="token punctuation">`</span>uid<span class="token punctuation">`</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="5-多表查询-子查询"><a href="#5-多表查询-子查询" class="headerlink" title="5.多表查询-子查询"></a>5.多表查询-子查询</h4><ul><li><p>子查询介绍</p><ul><li>查询语句中嵌套了查询语句。我们就将嵌套查询称为子查询！</li></ul></li><li><p>子查询-结果是单行单列的</p><ul><li>可以作为条件，使用运算符进行判断！</li><li>基本演示</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 标准语法</span><span class="token keyword">SELECT</span> 列名 <span class="token keyword">FROM</span> 表名 <span class="token keyword">WHERE</span> 列名<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">SELECT</span> 聚合函数<span class="token punctuation">(</span>列名<span class="token punctuation">)</span> <span class="token keyword">FROM</span> 表名 <span class="token punctuation">[</span><span class="token keyword">WHERE</span> 条件<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 查询年龄最高的用户姓名</span><span class="token keyword">SELECT</span> <span class="token function">MAX</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span> <span class="token keyword">FROM</span> <span class="token keyword">USER</span><span class="token punctuation">;</span>              <span class="token comment">-- 查询出最高年龄</span><span class="token keyword">SELECT</span> NAME<span class="token punctuation">,</span>age <span class="token keyword">FROM</span> <span class="token keyword">USER</span> <span class="token keyword">WHERE</span> age<span class="token operator">=</span><span class="token number">26</span><span class="token punctuation">;</span> <span class="token comment">-- 根据查询出来的最高年龄，查询姓名和年龄</span><span class="token keyword">SELECT</span> NAME<span class="token punctuation">,</span>age <span class="token keyword">FROM</span> <span class="token keyword">USER</span> <span class="token keyword">WHERE</span> age <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token function">MAX</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span> <span class="token keyword">FROM</span> <span class="token keyword">USER</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>子查询-结果是多行单列的</p><ul><li>可以作为条件，使用运算符in或not in进行判断！</li><li>基本演示</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 标准语法</span><span class="token keyword">SELECT</span> 列名 <span class="token keyword">FROM</span> 表名 <span class="token keyword">WHERE</span> 列名 <span class="token punctuation">[</span><span class="token operator">NOT</span><span class="token punctuation">]</span> <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> 列名 <span class="token keyword">FROM</span> 表名 <span class="token punctuation">[</span><span class="token keyword">WHERE</span> 条件<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">-- 查询张三和李四的订单信息</span><span class="token keyword">SELECT</span> id <span class="token keyword">FROM</span> <span class="token keyword">USER</span> <span class="token keyword">WHERE</span> NAME<span class="token operator">=</span><span class="token string">'张三'</span> <span class="token operator">OR</span> NAME<span class="token operator">=</span><span class="token string">'李四'</span><span class="token punctuation">;</span>   <span class="token comment">-- 查询张三和李四用户的id</span><span class="token keyword">SELECT</span> number<span class="token punctuation">,</span>uid <span class="token keyword">FROM</span> orderlist <span class="token keyword">WHERE</span> uid<span class="token operator">=</span><span class="token number">1</span> <span class="token operator">OR</span> uid<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">-- 根据id查询订单</span><span class="token keyword">SELECT</span> number<span class="token punctuation">,</span>uid <span class="token keyword">FROM</span> orderlist <span class="token keyword">WHERE</span> uid <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> id <span class="token keyword">FROM</span> <span class="token keyword">USER</span> <span class="token keyword">WHERE</span> NAME<span class="token operator">=</span><span class="token string">'张三'</span> <span class="token operator">OR</span> NAME<span class="token operator">=</span><span class="token string">'李四'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>子查询-结果是多行多列的</p><ul><li>可以作为一张虚拟表参与查询！</li><li>基本演示</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 标准语法</span><span class="token keyword">SELECT</span> 列名 <span class="token keyword">FROM</span> 表名 <span class="token punctuation">[</span>别名<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">SELECT</span> 列名 <span class="token keyword">FROM</span> 表名 <span class="token punctuation">[</span><span class="token keyword">WHERE</span> 条件<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">[</span>别名<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token keyword">WHERE</span> 条件<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">-- 查询订单表中id大于4的订单信息和所属用户信息</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token keyword">USER</span> u<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> orderlist <span class="token keyword">WHERE</span> id<span class="token operator">></span><span class="token number">4</span><span class="token punctuation">)</span> o <span class="token keyword">WHERE</span> u<span class="token punctuation">.</span>id<span class="token operator">=</span>o<span class="token punctuation">.</span>uid<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="6-多表查询练习"><a href="#6-多表查询练习" class="headerlink" title="6.多表查询练习"></a>6.多表查询练习</h4><ul><li>查询用户的编号、姓名、年龄。订单编号</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">/*分析：用户的编号、姓名、年龄  user表     订单编号 orderlist表条件：user.id = orderlist.uid*/</span><span class="token keyword">SELECT</span>t1<span class="token punctuation">.</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token comment">-- 用户编号</span>t1<span class="token punctuation">.</span><span class="token punctuation">`</span>name<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token comment">-- 用户姓名</span>t1<span class="token punctuation">.</span><span class="token punctuation">`</span>age<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token comment">-- 用户年龄</span>t2<span class="token punctuation">.</span><span class="token punctuation">`</span>number<span class="token punctuation">`</span><span class="token comment">-- 订单编号</span><span class="token keyword">FROM</span><span class="token keyword">USER</span> t1<span class="token punctuation">,</span>       <span class="token comment">-- 用户表</span>orderlist t2   <span class="token comment">-- 订单表</span><span class="token keyword">WHERE</span>t1<span class="token punctuation">.</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token operator">=</span> t2<span class="token punctuation">.</span><span class="token punctuation">`</span>uid<span class="token punctuation">`</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>查询所有的用户。用户的编号、姓名、年龄。订单编号</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">/*分析：用户的编号、姓名、年龄 user表     订单编号 orderlist表条件：user.id = orderlist.uid查询所有用户，使用左外连接*/</span><span class="token keyword">SELECT</span>t1<span class="token punctuation">.</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token comment">-- 用户编号</span>t1<span class="token punctuation">.</span><span class="token punctuation">`</span>name<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token comment">-- 用户姓名</span>t1<span class="token punctuation">.</span><span class="token punctuation">`</span>age<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token comment">-- 用户年龄</span>t2<span class="token punctuation">.</span><span class="token punctuation">`</span>number<span class="token punctuation">`</span><span class="token comment">-- 订单编号</span><span class="token keyword">FROM</span><span class="token keyword">USER</span> t1        <span class="token comment">-- 用户表</span><span class="token keyword">LEFT</span> <span class="token keyword">OUTER</span> <span class="token keyword">JOIN</span>orderlist t2   <span class="token comment">-- 订单表</span><span class="token keyword">ON</span>t1<span class="token punctuation">.</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token operator">=</span> t2<span class="token punctuation">.</span><span class="token punctuation">`</span>uid<span class="token punctuation">`</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>查询所有的订单。用户的编号、姓名、年龄。订单编号</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">/*分析：用户的编号、姓名、年龄 user表     订单编号 orderlist表条件：user.id = orderlist.uid查询所有订单，使用右外连接*/</span><span class="token keyword">SELECT</span>t1<span class="token punctuation">.</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token comment">-- 用户编号</span>t1<span class="token punctuation">.</span><span class="token punctuation">`</span>name<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token comment">-- 用户姓名</span>t1<span class="token punctuation">.</span><span class="token punctuation">`</span>age<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token comment">-- 用户年龄</span>t2<span class="token punctuation">.</span><span class="token punctuation">`</span>number<span class="token punctuation">`</span><span class="token comment">-- 订单编号</span><span class="token keyword">FROM</span><span class="token keyword">USER</span> t1         <span class="token comment">-- 用户表</span><span class="token keyword">RIGHT</span> <span class="token keyword">OUTER</span> <span class="token keyword">JOIN</span>orderlist t2    <span class="token comment">-- 订单表</span><span class="token keyword">ON</span>t1<span class="token punctuation">.</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token operator">=</span> t2<span class="token punctuation">.</span><span class="token punctuation">`</span>uid<span class="token punctuation">`</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>查询用户年龄大于23岁的信息。显示用户的编号、姓名、年龄。订单编号</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">/*分析：用户的编号、姓名、年龄 user表     订单编号 orderlist表条件：user.age > 23 AND user.id = orderlist.uid*/</span><span class="token comment">/*selectt1.`id`,-- 用户编号t1.`name`,-- 用户姓名t1.`age`,-- 用户年龄t2.`number`-- 订单编号fromuser t1,     -- 用户表orderlist t2 -- 订单表wheret1.`age` > 23andt1.`id` = t2.`uid`;*/</span><span class="token keyword">SELECT</span>t1<span class="token punctuation">.</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token comment">-- 用户编号</span>t1<span class="token punctuation">.</span><span class="token punctuation">`</span>name<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token comment">-- 用户姓名</span>t1<span class="token punctuation">.</span><span class="token punctuation">`</span>age<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token comment">-- 用户年龄</span>t2<span class="token punctuation">.</span><span class="token punctuation">`</span>number<span class="token punctuation">`</span><span class="token comment">-- 订单编号</span><span class="token keyword">FROM</span><span class="token keyword">USER</span> t1       <span class="token comment">-- 用户表</span><span class="token keyword">LEFT</span> <span class="token keyword">OUTER</span> <span class="token keyword">JOIN</span>orderlist t2  <span class="token comment">-- 订单表</span><span class="token keyword">ON</span>t1<span class="token punctuation">.</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token operator">=</span> t2<span class="token punctuation">.</span><span class="token punctuation">`</span>uid<span class="token punctuation">`</span><span class="token keyword">WHERE</span>t1<span class="token punctuation">.</span><span class="token punctuation">`</span>age<span class="token punctuation">`</span> <span class="token operator">></span> <span class="token number">23</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>查询张三和李四用户的信息。显示用户的编号、姓名、年龄。订单编号</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">/*分析：用户的编号、姓名、年龄 user表     订单编号 orderlist表条件：user.id = orderlist.uid AND user.name IN ('张三','李四');*/</span><span class="token keyword">SELECT</span>t1<span class="token punctuation">.</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token comment">-- 用户编号</span>t1<span class="token punctuation">.</span><span class="token punctuation">`</span>name<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token comment">-- 用户姓名</span>t1<span class="token punctuation">.</span><span class="token punctuation">`</span>age<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token comment">-- 用户年龄</span>t2<span class="token punctuation">.</span><span class="token punctuation">`</span>number<span class="token punctuation">`</span><span class="token comment">-- 订单编号</span><span class="token keyword">FROM</span><span class="token keyword">USER</span> t1<span class="token punctuation">,</span>        <span class="token comment">-- 用户表</span>orderlist t2    <span class="token comment">-- 订单表</span><span class="token keyword">WHERE</span>t1<span class="token punctuation">.</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token operator">=</span> t2<span class="token punctuation">.</span><span class="token punctuation">`</span>uid<span class="token punctuation">`</span><span class="token operator">AND</span><span class="token comment">-- (t1.`name` = '张三' OR t1.`name` = '李四');</span>t1<span class="token punctuation">.</span><span class="token punctuation">`</span>name<span class="token punctuation">`</span> <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token string">'张三'</span><span class="token punctuation">,</span><span class="token string">'李四'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>查询商品分类的编号、分类名称。分类下的商品名称</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">/*分析：商品分类的编号、分类名称 category表     分类下的商品名称 product表条件：category.id = product.cid*/</span><span class="token keyword">SELECT</span>t1<span class="token punctuation">.</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token comment">-- 分类编号</span>t1<span class="token punctuation">.</span><span class="token punctuation">`</span>name<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token comment">-- 分类名称</span>t2<span class="token punctuation">.</span><span class="token punctuation">`</span>name<span class="token punctuation">`</span><span class="token comment">-- 商品名称</span><span class="token keyword">FROM</span>category t1<span class="token punctuation">,</span><span class="token comment">-- 商品分类表</span>product t2    <span class="token comment">-- 商品表</span><span class="token keyword">WHERE</span>t1<span class="token punctuation">.</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token operator">=</span> t2<span class="token punctuation">.</span><span class="token punctuation">`</span>cid<span class="token punctuation">`</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>查询所有的商品分类。商品分类的编号、分类名称。分类下的商品名称</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">/*分析：商品分类的编号、分类名称 category表     分类下的商品名称 product表条件：category.id = product.cid查询所有的商品分类，使用左外连接*/</span><span class="token keyword">SELECT</span>t1<span class="token punctuation">.</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token comment">-- 分类编号</span>t1<span class="token punctuation">.</span><span class="token punctuation">`</span>name<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token comment">-- 分类名称</span>t2<span class="token punctuation">.</span><span class="token punctuation">`</span>name<span class="token punctuation">`</span><span class="token comment">-- 商品名称</span><span class="token keyword">FROM</span>category t1<span class="token comment">-- 商品分类表</span><span class="token keyword">LEFT</span> <span class="token keyword">OUTER</span> <span class="token keyword">JOIN</span>product t2<span class="token comment">-- 商品表</span><span class="token keyword">ON</span>t1<span class="token punctuation">.</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token operator">=</span> t2<span class="token punctuation">.</span><span class="token punctuation">`</span>cid<span class="token punctuation">`</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>查询所有的商品信息。商品分类的编号、分类名称。分类下的商品名称</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">/*分析：商品分类的编号、分类名称 category表     分类下的商品名称 product表条件：category.id = product.cid查询所有的商品信息，使用右外连接*/</span><span class="token keyword">SELECT</span>t1<span class="token punctuation">.</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token comment">-- 分类编号</span>t1<span class="token punctuation">.</span><span class="token punctuation">`</span>name<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token comment">-- 分类名称</span>t2<span class="token punctuation">.</span><span class="token punctuation">`</span>name<span class="token punctuation">`</span><span class="token comment">-- 商品名称</span><span class="token keyword">FROM</span>category t1<span class="token comment">-- 商品分类表</span><span class="token keyword">RIGHT</span> <span class="token keyword">OUTER</span> <span class="token keyword">JOIN</span>product t2<span class="token comment">-- 商品表</span><span class="token keyword">ON</span>t1<span class="token punctuation">.</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token operator">=</span> t2<span class="token punctuation">.</span><span class="token punctuation">`</span>cid<span class="token punctuation">`</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>查询所有的用户和所有的商品。显示用户的编号、姓名、年龄。商品名称</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">/*分析：用户的编号、姓名、年龄 user表   商品名称 product表   中间表 us_pro条件：us_pro.uid = user.id AND us_pro.pid = product.id*/</span><span class="token keyword">SELECT</span>t1<span class="token punctuation">.</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token comment">-- 用户编号</span>t1<span class="token punctuation">.</span><span class="token punctuation">`</span>name<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token comment">-- 用户名称</span>t1<span class="token punctuation">.</span><span class="token punctuation">`</span>age<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token comment">-- 用户年龄</span>t2<span class="token punctuation">.</span><span class="token punctuation">`</span>name<span class="token punctuation">`</span><span class="token comment">-- 商品名称</span><span class="token keyword">FROM</span><span class="token keyword">USER</span> t1<span class="token punctuation">,</span><span class="token comment">-- 用户表</span>product t2<span class="token punctuation">,</span><span class="token comment">-- 商品表</span>us_pro t3<span class="token comment">-- 中间表</span><span class="token keyword">WHERE</span>t3<span class="token punctuation">.</span><span class="token punctuation">`</span>uid<span class="token punctuation">`</span> <span class="token operator">=</span> t1<span class="token punctuation">.</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token operator">AND</span>t3<span class="token punctuation">.</span><span class="token punctuation">`</span>pid<span class="token punctuation">`</span> <span class="token operator">=</span> t2<span class="token punctuation">.</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>查询张三和李四这两个用户可以看到的商品。显示用户的编号、姓名、年龄。商品名称</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">/*分析：用户的编号、姓名、年龄 user表   商品名称 product表   中间表 us_pro条件：us_pro.uid = user.id AND us_pro.pid = product.id AND user.name IN ('张三','李四')*/</span><span class="token keyword">SELECT</span>t1<span class="token punctuation">.</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token comment">-- 用户编号</span>t1<span class="token punctuation">.</span><span class="token punctuation">`</span>name<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token comment">-- 用户名称</span>t1<span class="token punctuation">.</span><span class="token punctuation">`</span>age<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token comment">-- 用户年龄</span>t2<span class="token punctuation">.</span><span class="token punctuation">`</span>name<span class="token punctuation">`</span><span class="token comment">-- 商品名称</span><span class="token keyword">FROM</span><span class="token keyword">USER</span> t1<span class="token punctuation">,</span><span class="token comment">-- 用户表</span>product t2<span class="token punctuation">,</span><span class="token comment">-- 商品表</span>us_pro t3<span class="token comment">-- 中间表</span><span class="token keyword">WHERE</span><span class="token punctuation">(</span>t3<span class="token punctuation">.</span><span class="token punctuation">`</span>uid<span class="token punctuation">`</span> <span class="token operator">=</span> t1<span class="token punctuation">.</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token operator">AND</span> t3<span class="token punctuation">.</span><span class="token punctuation">`</span>pid<span class="token punctuation">`</span> <span class="token operator">=</span> t2<span class="token punctuation">.</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token operator">AND</span><span class="token comment">-- (t1.`name` = '张三' or t1.`name` = '李四');</span>t1<span class="token punctuation">.</span><span class="token punctuation">`</span>name<span class="token punctuation">`</span> <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token string">'张三'</span><span class="token punctuation">,</span><span class="token string">'李四'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="7-多表查询-自关联查询"><a href="#7-多表查询-自关联查询" class="headerlink" title="7.多表查询-自关联查询"></a>7.多表查询-自关联查询</h4><ul><li>自关联查询介绍<ul><li>同一张表中有数据关联。可以多次查询这同一个表！</li></ul></li><li>自关联查询演示</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 创建员工表</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> employee<span class="token punctuation">(</span>id <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>NAME <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>mgr <span class="token keyword">INT</span><span class="token punctuation">,</span>salary <span class="token keyword">DOUBLE</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 添加数据</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> employee <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">1001</span><span class="token punctuation">,</span><span class="token string">'孙悟空'</span><span class="token punctuation">,</span><span class="token number">1005</span><span class="token punctuation">,</span><span class="token number">9000.00</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">1002</span><span class="token punctuation">,</span><span class="token string">'猪八戒'</span><span class="token punctuation">,</span><span class="token number">1005</span><span class="token punctuation">,</span><span class="token number">8000.00</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">1003</span><span class="token punctuation">,</span><span class="token string">'沙和尚'</span><span class="token punctuation">,</span><span class="token number">1005</span><span class="token punctuation">,</span><span class="token number">8500.00</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">1004</span><span class="token punctuation">,</span><span class="token string">'小白龙'</span><span class="token punctuation">,</span><span class="token number">1005</span><span class="token punctuation">,</span><span class="token number">7900.00</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">1005</span><span class="token punctuation">,</span><span class="token string">'唐僧'</span><span class="token punctuation">,</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token number">15000.00</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">1006</span><span class="token punctuation">,</span><span class="token string">'武松'</span><span class="token punctuation">,</span><span class="token number">1009</span><span class="token punctuation">,</span><span class="token number">7600.00</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">1007</span><span class="token punctuation">,</span><span class="token string">'李逵'</span><span class="token punctuation">,</span><span class="token number">1009</span><span class="token punctuation">,</span><span class="token number">7400.00</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">1008</span><span class="token punctuation">,</span><span class="token string">'林冲'</span><span class="token punctuation">,</span><span class="token number">1009</span><span class="token punctuation">,</span><span class="token number">8100.00</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">1009</span><span class="token punctuation">,</span><span class="token string">'宋江'</span><span class="token punctuation">,</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token number">16000.00</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 查询所有员工的姓名及其直接上级的姓名，没有上级的员工也需要查询</span><span class="token comment">/*分析：员工姓名 employee表        直接上级姓名 employee表条件：employee.mgr = employee.id查询左表的全部数据，和左右两张表交集部分数据，使用左外连接*/</span><span class="token keyword">SELECT</span>t1<span class="token punctuation">.</span>name<span class="token punctuation">,</span><span class="token comment">-- 员工姓名</span>t1<span class="token punctuation">.</span>mgr<span class="token punctuation">,</span><span class="token comment">-- 上级编号</span>t2<span class="token punctuation">.</span>id<span class="token punctuation">,</span><span class="token comment">-- 员工编号</span>t2<span class="token punctuation">.</span>name     <span class="token comment">-- 员工姓名</span><span class="token keyword">FROM</span>employee t1  <span class="token comment">-- 员工表</span><span class="token keyword">LEFT</span> <span class="token keyword">OUTER</span> <span class="token keyword">JOIN</span>employee t2  <span class="token comment">-- 员工表</span><span class="token keyword">ON</span>t1<span class="token punctuation">.</span>mgr <span class="token operator">=</span> t2<span class="token punctuation">.</span>id<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="四、视图"><a href="#四、视图" class="headerlink" title="四、视图"></a>四、视图</h3><h4 id="1-视图的概念"><a href="#1-视图的概念" class="headerlink" title="1.视图的概念"></a>1.视图的概念</h4><ul><li>视图是一种虚拟存在的数据表</li><li>这个虚拟的表并不在数据库中实际存在</li><li>作用是将一些比较复杂的查询语句的结果，封装到一个虚拟表中。后期再有相同复杂查询时，直接查询这张虚拟表即可</li><li>说白了，视图就是将一条SELECT查询语句的结果封装到了一个虚拟表中，所以我们在创建视图的时候，工作重心就要放在这条SELECT查询语句上</li></ul><h4 id="2-视图的好处"><a href="#2-视图的好处" class="headerlink" title="2.视图的好处"></a>2.视图的好处</h4><ul><li>简单<ul><li>对于使用视图的用户不需要关心表的结构、关联条件和筛选条件。因为这张虚拟表中保存的就是已经过滤好条件的结果集</li></ul></li><li>安全<ul><li>视图可以设置权限 , 致使访问视图的用户只能访问他们被允许查询的结果集</li></ul></li><li>数据独立<ul><li>一旦视图的结构确定了，可以屏蔽表结构变化对用户的影响，源表增加列对视图没有影响；源表修改列名，则可以通过修改视图来解决，不会造成对访问者的影响</li></ul></li></ul><h4 id="3-视图数据准备"><a href="#3-视图数据准备" class="headerlink" title="3.视图数据准备"></a>3.视图数据准备</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 创建db7数据库</span><span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> db7<span class="token punctuation">;</span><span class="token comment">-- 使用db7数据库</span><span class="token keyword">USE</span> db7<span class="token punctuation">;</span><span class="token comment">-- 创建country表</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> country<span class="token punctuation">(</span>id <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>country_name <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 添加数据</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> country <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token string">'中国'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token string">'美国'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token string">'俄罗斯'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 创建city表</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> city<span class="token punctuation">(</span>id <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>city_name <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span>cid <span class="token keyword">INT</span><span class="token punctuation">,</span> <span class="token comment">-- 外键列。关联country表的主键列id</span><span class="token keyword">CONSTRAINT</span> cc_fk1 <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>cid<span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> country<span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 添加数据</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> city <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token string">'北京'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token string">'上海'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token string">'纽约'</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token string">'莫斯科'</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-视图的创建"><a href="#4-视图的创建" class="headerlink" title="4.视图的创建"></a>4.视图的创建</h4><ul><li>创建视图语法</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 标准语法</span><span class="token keyword">CREATE</span> <span class="token keyword">VIEW</span> 视图名称 <span class="token punctuation">[</span><span class="token punctuation">(</span>列名列表<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">AS</span> 查询语句<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>普通多表查询，查询城市和所属国家</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 普通多表查询，查询城市和所属国家</span><span class="token keyword">SELECT</span>t1<span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">,</span>t2<span class="token punctuation">.</span>country_name<span class="token keyword">FROM</span>city t1<span class="token punctuation">,</span>country t2<span class="token keyword">WHERE</span>t1<span class="token punctuation">.</span>cid <span class="token operator">=</span> t2<span class="token punctuation">.</span>id<span class="token punctuation">;</span><span class="token comment">-- 经常需要查询这样的数据，就可以创建一个视图</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>创建视图基本演示</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 创建一个视图。将查询出来的结果保存到这张虚拟表中</span><span class="token keyword">CREATE</span><span class="token keyword">VIEW</span>city_country<span class="token keyword">AS</span><span class="token keyword">SELECT</span> t1<span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">,</span>t2<span class="token punctuation">.</span>country_name <span class="token keyword">FROM</span> city t1<span class="token punctuation">,</span>country t2 <span class="token keyword">WHERE</span> t1<span class="token punctuation">.</span>cid<span class="token operator">=</span>t2<span class="token punctuation">.</span>id<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>创建视图并指定列名基本演示</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 创建一个视图，指定列名。将查询出来的结果保存到这张虚拟表中</span><span class="token keyword">CREATE</span><span class="token keyword">VIEW</span>city_country2 <span class="token punctuation">(</span>city_id<span class="token punctuation">,</span>city_name<span class="token punctuation">,</span>cid<span class="token punctuation">,</span>country_name<span class="token punctuation">)</span> <span class="token keyword">AS</span><span class="token keyword">SELECT</span> t1<span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">,</span>t2<span class="token punctuation">.</span>country_name <span class="token keyword">FROM</span> city t1<span class="token punctuation">,</span>country t2 <span class="token keyword">WHERE</span> t1<span class="token punctuation">.</span>cid<span class="token operator">=</span>t2<span class="token punctuation">.</span>id<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-视图的查询"><a href="#5-视图的查询" class="headerlink" title="5.视图的查询"></a>5.视图的查询</h4><ul><li>查询视图语法</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 标准语法</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> 视图名称<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>查询视图基本演示</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 查询视图。查询这张虚拟表，就等效于查询城市和所属国家</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> city_country<span class="token punctuation">;</span><span class="token comment">-- 查询指定列名的视图</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> city_country2<span class="token punctuation">;</span><span class="token comment">-- 查询所有数据表，视图也会查询出来</span><span class="token keyword">SHOW</span> <span class="token keyword">TABLES</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>查询视图创建语法</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 标准语法</span><span class="token keyword">SHOW</span> <span class="token keyword">CREATE</span> <span class="token keyword">VIEW</span> 视图名称<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>查询视图创建语句基本演示</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SHOW</span> <span class="token keyword">CREATE</span> <span class="token keyword">VIEW</span> city_country<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="6-视图的修改"><a href="#6-视图的修改" class="headerlink" title="6.视图的修改"></a>6.视图的修改</h4><ul><li>修改视图表中的数据</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 标准语法</span><span class="token keyword">UPDATE</span> 视图名称 <span class="token keyword">SET</span> 列名<span class="token operator">=</span>值 <span class="token keyword">WHERE</span> 条件<span class="token punctuation">;</span><span class="token comment">-- 修改视图表中的城市名称北京为北京市</span><span class="token keyword">UPDATE</span> city_country <span class="token keyword">SET</span> city_name<span class="token operator">=</span><span class="token string">'北京市'</span> <span class="token keyword">WHERE</span> city_name<span class="token operator">=</span><span class="token string">'北京'</span><span class="token punctuation">;</span><span class="token comment">-- 查询视图</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> city_country<span class="token punctuation">;</span><span class="token comment">-- 查询city表,北京也修改为了北京市</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> city<span class="token punctuation">;</span><span class="token comment">-- 注意：视图表数据修改，会自动修改源表中的数据</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>修改视图表结构</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 标准语法</span><span class="token keyword">ALTER</span> <span class="token keyword">VIEW</span> 视图名称 <span class="token punctuation">[</span><span class="token punctuation">(</span>列名列表<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">AS</span> 查询语句<span class="token punctuation">;</span><span class="token comment">-- 查询视图2</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> city_country2<span class="token punctuation">;</span><span class="token comment">-- 修改视图2的列名city_id为id</span><span class="token keyword">ALTER</span><span class="token keyword">VIEW</span>city_country2 <span class="token punctuation">(</span>id<span class="token punctuation">,</span>city_name<span class="token punctuation">,</span>cid<span class="token punctuation">,</span>country_name<span class="token punctuation">)</span><span class="token keyword">AS</span><span class="token keyword">SELECT</span> t1<span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">,</span>t2<span class="token punctuation">.</span>country_name <span class="token keyword">FROM</span> city t1<span class="token punctuation">,</span>country t2 <span class="token keyword">WHERE</span> t1<span class="token punctuation">.</span>cid<span class="token operator">=</span>t2<span class="token punctuation">.</span>id<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="7-视图的删除"><a href="#7-视图的删除" class="headerlink" title="7.视图的删除"></a>7.视图的删除</h4><ul><li>删除视图</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 标准语法</span><span class="token keyword">DROP</span> <span class="token keyword">VIEW</span> <span class="token punctuation">[</span><span class="token keyword">IF</span> <span class="token keyword">EXISTS</span><span class="token punctuation">]</span> 视图名称<span class="token punctuation">;</span><span class="token comment">-- 删除视图</span><span class="token keyword">DROP</span> <span class="token keyword">VIEW</span> city_country<span class="token punctuation">;</span><span class="token comment">-- 删除视图2，如果存在则删除</span><span class="token keyword">DROP</span> <span class="token keyword">VIEW</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> city_country2<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="8-视图的总结"><a href="#8-视图的总结" class="headerlink" title="8.视图的总结"></a>8.视图的总结</h4><ul><li>视图是一种虚拟存在的数据表</li><li>这个虚拟的表并不在数据库中实际存在</li><li>说白了，视图就是将一条SELECT查询语句的结果封装到了一个虚拟表中，所以我们在创建视图的时候，工作重心就要放在这条SELECT查询语句上</li><li>视图的好处<ul><li>简单</li><li>安全</li><li>数据独立</li></ul></li></ul><h3 id="五、备份与还原"><a href="#五、备份与还原" class="headerlink" title="五、备份与还原"></a>五、备份与还原</h3><h4 id="1-命令行方式"><a href="#1-命令行方式" class="headerlink" title="1.命令行方式"></a>1.命令行方式</h4><ul><li><p>备份</p><ul><li>使用SecureCRT工具连接到Linux系统，输入：mysqldump -u root -p 数据库名称 &gt; 文件保存路径</li></ul><p><img src="https://i.loli.net/2021/05/22/vnWLuqaGQ3Xkfi5.png" alt="12"></p><ul><li>进入文件保存路径，查看文件是否存在</li></ul><p><img src="https://i.loli.net/2021/05/22/toVmF2yuxp5X714.png" alt="13"></p><p><img src="https://i.loli.net/2021/05/22/6uQCAGX8MRpaUDI.png" alt="14"></p></li><li><p>恢复</p><ul><li>登录mysql数据库</li></ul><p><img src="https://i.loli.net/2021/05/22/LlWDRBIvjeYbr3y.png" alt="15"></p><ul><li>删除已经备份的数据库</li></ul><p><img src="https://i.loli.net/2021/05/22/3Silgk2zx4aC9YQ.png" alt="16"></p><ul><li>重新创建名称相同的数据库</li></ul><p><img src="https://i.loli.net/2021/05/22/2heqnMvLE6XkmKF.png" alt="17"></p><ul><li>使用该数据库</li></ul><p><img src="https://i.loli.net/2021/05/22/cZFN6rTCOQbVanq.png" alt="18"></p><ul><li>导入文件执行：source 备份文件路径;</li></ul><p><img src="https://i.loli.net/2021/05/22/gA6hREpWzVBNHi1.png" alt="19"></p></li></ul><h4 id="2-图形化界面方式"><a href="#2-图形化界面方式" class="headerlink" title="2.图形化界面方式"></a>2.图形化界面方式</h4><ul><li>备份</li></ul><p><img src="https://i.loli.net/2021/05/22/OUZdbWNiaTQIHLG.png" alt="05"></p><p><img src="https://i.loli.net/2021/05/22/NQj9WeDUn7uFzPX.png" alt="06"></p><p><img src="https://i.loli.net/2021/05/22/67t5fiEl8znHbZq.png" alt="07"></p><ul><li>恢复</li></ul><p><img src="https://i.loli.net/2021/05/22/52xLShPBMFm6XNr.png" alt="08"></p><p><img src="https://i.loli.net/2021/05/22/DVvkxpG1sPIarbY.png" alt="09"></p><p><img src="https://i.loli.net/2021/05/22/Yf4x5h7KmRkzwvA.png" alt="10"></p><p><img src="https://i.loli.net/2021/05/22/OSpHXFAo28dKuIi.png" alt="11"></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL基础-01</title>
      <link href="/2021/05/22/mysql-ji-chu-01/"/>
      <url>/2021/05/22/mysql-ji-chu-01/</url>
      
        <content type="html"><![CDATA[<h3 id="一、数据库的基本概念"><a href="#一、数据库的基本概念" class="headerlink" title="一、数据库的基本概念"></a>一、数据库的基本概念</h3><h4 id="1-为什么要学数据库？"><a href="#1-为什么要学数据库？" class="headerlink" title="1.为什么要学数据库？"></a>1.为什么要学数据库？</h4><ul><li>之前我们如果想将一些数据实现永久化存储，可以怎么做呢？没错。使用IO流的技术将数据保存到本地文件中</li><li>但是接下来我有这样一个需求：将下面的user.txt文件中的王五年龄修改为35</li></ul><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">张三 23 男李四 24 男王五 25 女赵六 26 女周七 27 男<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>我们要如何实现呢？<ul><li>可以采用字符缓冲流，将每一行数据读取出来，封装为User对象。将多个User对象保存到集合中</li><li>然后遍历集合，将王五对象的年龄修改为35,再重新将集合中的对象信息写回到文件中</li></ul></li><li>这一套操作太麻烦了，而现在我们有一种更加方便的方式来完成这个需求了，这种方式就是数据库！</li></ul><h4 id="2-什么是数据库？"><a href="#2-什么是数据库？" class="headerlink" title="2.什么是数据库？"></a>2.什么是数据库？</h4><ul><li>用于存储和管理数据的仓库</li><li>英文单词为：DataBase，简称DB</li></ul><h4 id="3-数据库的好处？"><a href="#3-数据库的好处？" class="headerlink" title="3.数据库的好处？"></a>3.数据库的好处？</h4><ul><li>可以持久化存储数据</li><li>方便存储和管理数据</li><li>使用了统一的方式操作数据库 – SQL</li></ul><h4 id="4-常见的数据库有哪些？"><a href="#4-常见的数据库有哪些？" class="headerlink" title="4.常见的数据库有哪些？"></a>4.常见的数据库有哪些？</h4><p><img src="https://i.loli.net/2021/05/22/xnyvClSOg18faRH.png" alt="01"></p><h3 id="二、MySQL数据库的介绍和安装"><a href="#二、MySQL数据库的介绍和安装" class="headerlink" title="二、MySQL数据库的介绍和安装"></a>二、MySQL数据库的介绍和安装</h3><h4 id="1-MySQL数据库介绍"><a href="#1-MySQL数据库介绍" class="headerlink" title="1.MySQL数据库介绍"></a>1.MySQL数据库介绍</h4><ul><li>小型的数据库</li><li>开源免费(6版本之前免费)</li><li>所属于Oracle公司</li></ul><h4 id="2-MySQL数据库安装"><a href="#2-MySQL数据库安装" class="headerlink" title="2.MySQL数据库安装"></a>2.MySQL数据库安装</h4><ol><li><p>通过secureCRT工具连接Linux系统</p></li><li><p>上传 mysql 的安装包</p></li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">alt + p -------<span class="token operator">></span> put d:/setup/mysql-5.7.27-1.el7.x86_64.rpm-bundle.tar<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>解压 mysql 的安装包</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> mysql<span class="token function">tar</span> -xvf mysql-5.7.27-1.el7.x86_64.rpm-bundle.tar -C mysql/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="4"><li>安装客户端</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> mysql/<span class="token function">rpm</span> -ivh mysql-community-client-5.7.27-1.el7.x86_64.rpm --force --nodeps<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="5"><li>安装服务端</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">rpm</span> -ivh mysql-community-server-5.7.27-1.el7.x86_64.rpm --force --nodeps<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="6"><li>修改mysql默认字符集</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vi</span> /etc/my.cnf添加如下内容：<span class="token punctuation">[</span>mysqld<span class="token punctuation">]</span>character-set-server<span class="token operator">=</span>utf8collation-server<span class="token operator">=</span>utf8_general_ci-- 需要在最下方填写<span class="token punctuation">[</span>client<span class="token punctuation">]</span>default-character-set<span class="token operator">=</span>utf8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="7"><li>启动mysql服务</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">service</span> mysqld start<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="8"><li>登录mysql</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mysql -u root -p  敲回车，输入密码初始密码查看：cat /var/log/mysqld.log在root@localhost:   后面的就是初始密码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="9"><li>修改mysql登录密码</li></ol><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">set</span> <span class="token keyword">global</span> validate_password_policy<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">set</span> <span class="token keyword">global</span> validate_password_length<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">set</span> password<span class="token operator">=</span>password<span class="token punctuation">(</span><span class="token string">'密码'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="10"><li>授予远程连接权限</li></ol><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">//授权</span><span class="token keyword">grant</span> <span class="token keyword">all</span> <span class="token keyword">privileges</span> <span class="token keyword">on</span> <span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">to</span> <span class="token string">'root'</span> <span class="token variable">@'%'</span> identified <span class="token keyword">by</span> <span class="token string">'密码'</span><span class="token punctuation">;</span><span class="token comment">//刷新</span>flush <span class="token keyword">privileges</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="11"><li>关闭Linux系统防火墙</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl stop firewalld.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3-MySQL数据库登录"><a href="#3-MySQL数据库登录" class="headerlink" title="3.MySQL数据库登录"></a>3.MySQL数据库登录</h4><ul><li>sqlyog工具登录mysql</li></ul><p><img src="https://i.loli.net/2021/05/22/7FBsE38wMPLhZ2f.png" alt="02"></p><h3 id="三、SQL语句"><a href="#三、SQL语句" class="headerlink" title="三、SQL语句"></a>三、SQL语句</h3><h4 id="1-数据库、数据表、数据的关系介绍"><a href="#1-数据库、数据表、数据的关系介绍" class="headerlink" title="1.数据库、数据表、数据的关系介绍"></a>1.数据库、数据表、数据的关系介绍</h4><ul><li>数据库<ul><li>用于存储和管理数据的仓库</li><li>一个库中可以包含多个数据表</li></ul></li><li>数据表<ul><li>数据库最重要的组成部分之一</li><li>它由纵向的列和横向的行组成(类似excel表格)</li><li>可以指定列名、数据类型、约束等</li><li>一个表中可以存储多条数据</li></ul></li><li>数据<ul><li>想要永久化存储的数据</li></ul></li></ul><p><img src="https://i.loli.net/2021/05/22/Ttwo6OQsgq4Fd1v.png" alt="03"></p><h4 id="2-SQL介绍"><a href="#2-SQL介绍" class="headerlink" title="2.SQL介绍"></a>2.SQL介绍</h4><ul><li><p>什么是SQL</p><ul><li>Structured Query Language：结构化查询语言</li><li>其实就是定义了操作所有关系型数据库的规则。每一种数据库操作的方式可能会存在一些不一样的地方，我们称为“方言”。</li></ul></li><li><p>SQL通用语法</p><ul><li>SQL 语句可以单行或多行书写，以分号结尾。</li><li>可使用空格和缩进来增强语句的可读性。</li><li>MySQL 数据库的 SQL 语句不区分大小写，关键字建议使用大写。</li><li>数据库的注释：<ul><li>单行注释：– 注释内容       #注释内容(mysql特有)</li><li>多行注释：/* 注释内容 */</li></ul></li></ul></li><li><p>SQL分类</p><ul><li>DDL(Data Definition Language)数据定义语言<ul><li>用来定义数据库对象：数据库，表，列等。关键字：create, drop,alter 等</li></ul></li><li>DML(Data Manipulation Language)数据操作语言<ul><li>用来对数据库中表的数据进行增删改。关键字：insert, delete, update 等</li></ul></li><li>DQL(Data Query Language)数据查询语言<ul><li>用来查询数据库中表的记录(数据)。关键字：select, where 等</li></ul></li><li>DCL(Data Control Language)数据控制语言(了解)<ul><li>用来定义数据库的访问权限和安全级别，及创建用户。关键字：GRANT， REVOKE 等</li></ul></li></ul><p><img src="https://i.loli.net/2021/05/22/b3PQp8hBnkNxCIl.png" alt="image-20210522152613178"></p></li></ul><h4 id="3-DDL-操作数据库"><a href="#3-DDL-操作数据库" class="headerlink" title="3.DDL-操作数据库"></a>3.DDL-操作数据库</h4><ul><li><p>R(Retrieve)：查询</p><ul><li>查询所有数据库</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 查询所有数据库</span><span class="token keyword">SHOW</span> <span class="token keyword">DATABASES</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>查询某个数据库的创建语句</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 标准语法</span><span class="token keyword">SHOW</span> <span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> 数据库名称<span class="token punctuation">;</span><span class="token comment">-- 查看mysql数据库的创建格式</span><span class="token keyword">SHOW</span> <span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> mysql<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>C(Create)：创建</p><ul><li>创建数据库</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 标准语法</span><span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> 数据库名称<span class="token punctuation">;</span><span class="token comment">-- 创建db1数据库</span><span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> db1<span class="token punctuation">;</span><span class="token comment">-- 创建一个已存在的数据库会报错</span><span class="token comment">-- 错误代码：1007  Can't create database 'db1'; database exists</span><span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> db1<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>创建数据库(判断，如果不存在则创建)</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 标准语法</span><span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> <span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span> 数据库名称<span class="token punctuation">;</span><span class="token comment">-- 创建数据库db2(判断，如果不存在则创建)</span><span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> <span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span> db2<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>创建数据库、并指定字符集</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 标准语法</span><span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> 数据库名称 <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> 字符集名称<span class="token punctuation">;</span><span class="token comment">-- 创建数据库db3、并指定字符集utf8</span><span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> db3 <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> utf8<span class="token punctuation">;</span><span class="token comment">-- 查看db3数据库的字符集</span><span class="token keyword">SHOW</span> <span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> db3<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>练习：创建db4数据库、如果不存在则创建，指定字符集为gbk</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 创建db4数据库、如果不存在则创建，指定字符集为gbk</span><span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> <span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span> db4 <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> gbk<span class="token punctuation">;</span><span class="token comment">-- 查看db4数据库的字符集</span><span class="token keyword">SHOW</span> <span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> db4<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>U(Update)：修改</p><ul><li>修改数据库的字符集</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 标准语法</span><span class="token keyword">ALTER</span> <span class="token keyword">DATABASE</span> 数据库名称 <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> 字符集名称<span class="token punctuation">;</span><span class="token comment">-- 修改数据库db4的字符集为utf8</span><span class="token keyword">ALTER</span> <span class="token keyword">DATABASE</span> db4 <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> utf8<span class="token punctuation">;</span><span class="token comment">-- 查看db4数据库的字符集</span><span class="token keyword">SHOW</span> <span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> db4<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>D(Delete)：删除</p><ul><li>删除数据库</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 标准语法</span><span class="token keyword">DROP</span> <span class="token keyword">DATABASE</span> 数据库名称<span class="token punctuation">;</span><span class="token comment">-- 删除db1数据库</span><span class="token keyword">DROP</span> <span class="token keyword">DATABASE</span> db1<span class="token punctuation">;</span><span class="token comment">-- 删除一个不存在的数据库会报错</span><span class="token comment">-- 错误代码：1008  Can't drop database 'db1'; database doesn't exist</span><span class="token keyword">DROP</span> <span class="token keyword">DATABASE</span> db1<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>删除数据库(判断，如果存在则删除)</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 标准语法</span><span class="token keyword">DROP</span> <span class="token keyword">DATABASE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> 数据库名称<span class="token punctuation">;</span><span class="token comment">-- 删除数据库db2，如果存在</span><span class="token keyword">DROP</span> <span class="token keyword">DATABASE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> db2<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>使用数据库</p><ul><li>查询当前正在使用的数据库名称</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 查询当前正在使用的数据库</span><span class="token keyword">SELECT</span> <span class="token keyword">DATABASE</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>使用数据库</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 标准语法</span><span class="token keyword">USE</span> 数据库名称；<span class="token comment">-- 使用db4数据库</span><span class="token keyword">USE</span> db4<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="4-DDL-操作数据表"><a href="#4-DDL-操作数据表" class="headerlink" title="4.DDL-操作数据表"></a>4.DDL-操作数据表</h4><ul><li><p>R(Retrieve)：查询</p><ul><li>查询数据库中所有的数据表</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 使用mysql数据库</span><span class="token keyword">USE</span> mysql<span class="token punctuation">;</span><span class="token comment">-- 查询库中所有的表</span><span class="token keyword">SHOW</span> <span class="token keyword">TABLES</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>查询表结构</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 标准语法</span><span class="token keyword">DESC</span> 表名<span class="token punctuation">;</span><span class="token comment">-- 查询user表结构</span><span class="token keyword">DESC</span> <span class="token keyword">user</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>查询表字符集</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 标准语法</span><span class="token keyword">SHOW</span> <span class="token keyword">TABLE</span> <span class="token keyword">STATUS</span> <span class="token keyword">FROM</span> 库名 <span class="token operator">LIKE</span> <span class="token string">'表名'</span><span class="token punctuation">;</span><span class="token comment">-- 查看mysql数据库中user表字符集</span><span class="token keyword">SHOW</span> <span class="token keyword">TABLE</span> <span class="token keyword">STATUS</span> <span class="token keyword">FROM</span> mysql <span class="token operator">LIKE</span> <span class="token string">'user'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>C(Create)：创建</p><ul><li><p>创建数据表</p><ul><li>标准语法</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> 表名<span class="token punctuation">(</span>    列名<span class="token number">1</span> 数据类型<span class="token number">1</span><span class="token punctuation">,</span>    列名<span class="token number">2</span> 数据类型<span class="token number">2</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    列名n 数据类型n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 注意：最后一列，不需要加逗号</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>数据类型</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token number">1.</span> <span class="token keyword">int</span>：整数类型<span class="token operator">*</span> age <span class="token keyword">int</span><span class="token number">2.</span> <span class="token keyword">double</span>:小数类型<span class="token operator">*</span> score <span class="token keyword">double</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">*</span> price <span class="token keyword">double</span><span class="token number">3.</span> <span class="token keyword">date</span>:日期，只包含年月日     yyyy<span class="token operator">-</span>MM<span class="token operator">-</span>dd<span class="token number">4.</span> <span class="token keyword">datetime</span>:日期，包含年月日时分秒 yyyy<span class="token operator">-</span>MM<span class="token operator">-</span>dd HH:mm:ss<span class="token number">5.</span> <span class="token keyword">timestamp</span>:时间戳类型包含年月日时分秒 yyyy<span class="token operator">-</span>MM<span class="token operator">-</span>dd HH:mm:ss<span class="token operator">*</span> 如果将来不给这个字段赋值，或赋值为<span class="token boolean">null</span>，则默认使用当前的系统时间，来自动赋值<span class="token number">6.</span> <span class="token keyword">varchar</span>：字符串<span class="token operator">*</span> name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span>:姓名最大<span class="token number">20</span>个字符<span class="token operator">*</span> zhangsan <span class="token number">8</span>个字符  张三 <span class="token number">2</span>个字符<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>创建数据表</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 使用db3数据库</span><span class="token keyword">USE</span> db3<span class="token punctuation">;</span><span class="token comment">-- 创建一个product商品表</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> product<span class="token punctuation">(</span>id <span class="token keyword">INT</span><span class="token punctuation">,</span><span class="token comment">-- 商品编号</span>NAME <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment">-- 商品名称</span>price <span class="token keyword">DOUBLE</span><span class="token punctuation">,</span><span class="token comment">-- 商品价格</span>stock <span class="token keyword">INT</span><span class="token punctuation">,</span><span class="token comment">-- 商品库存</span>insert_time <span class="token keyword">DATE</span>    <span class="token comment">-- 上架时间</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>复制表</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 标准语法</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> 表名 <span class="token operator">LIKE</span> 被复制的表名<span class="token punctuation">;</span><span class="token comment">-- 复制product表到product2表</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> product2 <span class="token operator">LIKE</span> product<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>U(Update)：修改</p><ul><li>修改表名</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 标准语法</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> 表名 <span class="token keyword">RENAME</span> <span class="token keyword">TO</span> 新的表名<span class="token punctuation">;</span><span class="token comment">-- 修改product2表名为product3</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> product2 <span class="token keyword">RENAME</span> <span class="token keyword">TO</span> product3<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>修改表的字符集</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 标准语法</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> 表名 <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> 字符集名称<span class="token punctuation">;</span><span class="token comment">-- 查看db3数据库中product3数据表字符集</span><span class="token keyword">SHOW</span> <span class="token keyword">TABLE</span> <span class="token keyword">STATUS</span> <span class="token keyword">FROM</span> db3 <span class="token operator">LIKE</span> <span class="token string">'product3'</span><span class="token punctuation">;</span><span class="token comment">-- 修改product3数据表字符集为gbk</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> product3 <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> gbk<span class="token punctuation">;</span><span class="token comment">-- 查看db3数据库中product3数据表字符集</span><span class="token keyword">SHOW</span> <span class="token keyword">TABLE</span> <span class="token keyword">STATUS</span> <span class="token keyword">FROM</span> db3 <span class="token operator">LIKE</span> <span class="token string">'product3'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>添加一列</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 标准语法</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> 表名 <span class="token keyword">ADD</span> 列名 数据类型<span class="token punctuation">;</span><span class="token comment">-- 给product3表添加一列color</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> product3 <span class="token keyword">ADD</span> color <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>修改列名称和数据类型</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 修改数据类型 标准语法</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> 表名 <span class="token keyword">MODIFY</span> 列名 新数据类型<span class="token punctuation">;</span><span class="token comment">-- 将color数据类型修改为int</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> product3 <span class="token keyword">MODIFY</span> color <span class="token keyword">INT</span><span class="token punctuation">;</span><span class="token comment">-- 查看product3表详细信息</span><span class="token keyword">DESC</span> product3<span class="token punctuation">;</span><span class="token comment">-- 修改列名和数据类型 标准语法</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> 表名 CHANGE 列名 新列名 新数据类型<span class="token punctuation">;</span><span class="token comment">-- 将color修改为address,数据类型为varchar</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> product3 CHANGE color address <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 查看product3表详细信息</span><span class="token keyword">DESC</span> product3<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>删除列</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 标准语法</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> 表名 <span class="token keyword">DROP</span> 列名<span class="token punctuation">;</span><span class="token comment">-- 删除address列</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> product3 <span class="token keyword">DROP</span> address<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>D(Delete)：删除</p><ul><li>删除数据表</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 标准语法</span><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> 表名<span class="token punctuation">;</span><span class="token comment">-- 删除product3表</span><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> product3<span class="token punctuation">;</span><span class="token comment">-- 删除不存在的表，会报错</span><span class="token comment">-- 错误代码：1051  Unknown table 'product3'</span><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> product3<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>删除数据表(判断，如果存在则删除)</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 标准语法</span><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> 表名<span class="token punctuation">;</span><span class="token comment">-- 删除product3表，如果存在则删除</span><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> product3<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="5-DML-INSERT语句"><a href="#5-DML-INSERT语句" class="headerlink" title="5.DML-INSERT语句"></a>5.DML-INSERT语句</h4><ul><li><p>新增表数据语法</p><ul><li>新增格式1：给指定列添加数据</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 标准语法</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> 表名<span class="token punctuation">(</span>列名<span class="token number">1</span><span class="token punctuation">,</span>列名<span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span>值<span class="token number">1</span><span class="token punctuation">,</span>值<span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 向product表添加一条数据</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> product<span class="token punctuation">(</span>id<span class="token punctuation">,</span>NAME<span class="token punctuation">,</span>price<span class="token punctuation">,</span>stock<span class="token punctuation">,</span>insert_time<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'手机'</span><span class="token punctuation">,</span><span class="token number">1999</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token string">'2099-09-09'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 向product表添加指定列数据</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> product <span class="token punctuation">(</span>id<span class="token punctuation">,</span>NAME<span class="token punctuation">,</span>price<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'电脑'</span><span class="token punctuation">,</span><span class="token number">4999</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 查看表中所有数据</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> product<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>新增格式2：默认给全部列添加数据</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 标准语法</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> 表名 <span class="token keyword">VALUES</span> <span class="token punctuation">(</span>值<span class="token number">1</span><span class="token punctuation">,</span>值<span class="token number">2</span><span class="token punctuation">,</span>值<span class="token number">3</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 默认给全部列添加数据</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> product <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'电视'</span><span class="token punctuation">,</span><span class="token number">2999</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token string">'2099-06-06'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 查看表中所有数据</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> product<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>新增格式3：批量添加数据</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 默认添加所有列数据 标准语法</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> 表名 <span class="token keyword">VALUES</span> <span class="token punctuation">(</span>值<span class="token number">1</span><span class="token punctuation">,</span>值<span class="token number">2</span><span class="token punctuation">,</span>值<span class="token number">3</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>值<span class="token number">1</span><span class="token punctuation">,</span>值<span class="token number">2</span><span class="token punctuation">,</span>值<span class="token number">3</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>值<span class="token number">1</span><span class="token punctuation">,</span>值<span class="token number">2</span><span class="token punctuation">,</span>值<span class="token number">3</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 批量添加数据</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> product <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">'冰箱'</span><span class="token punctuation">,</span><span class="token number">999</span><span class="token punctuation">,</span><span class="token number">26</span><span class="token punctuation">,</span><span class="token string">'2099-08-08'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token string">'洗衣机'</span><span class="token punctuation">,</span><span class="token number">1999</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token string">'2099-05-10'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 查看表中所有数据</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> product<span class="token punctuation">;</span><span class="token comment">-- 给指定列添加数据 标准语法</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> 表名<span class="token punctuation">(</span>列名<span class="token number">1</span><span class="token punctuation">,</span>列名<span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span>值<span class="token number">1</span><span class="token punctuation">,</span>值<span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>值<span class="token number">1</span><span class="token punctuation">,</span>值<span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>值<span class="token number">1</span><span class="token punctuation">,</span>值<span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 批量添加指定列数据</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> product <span class="token punctuation">(</span>id<span class="token punctuation">,</span>NAME<span class="token punctuation">,</span>price<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token string">'微波炉'</span><span class="token punctuation">,</span><span class="token number">499</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token string">'电磁炉'</span><span class="token punctuation">,</span><span class="token number">899</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 查看表中所有数据</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> product<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>注意事项</p><ul><li>列名和值的数量以及数据类型要对应</li><li>除了数字类型，其他数据类型的数据都需要加引号(单引双引都可以，推荐单引)</li></ul></li></ul><h4 id="6-DML-UPDATE语句"><a href="#6-DML-UPDATE语句" class="headerlink" title="6.DML-UPDATE语句"></a>6.DML-UPDATE语句</h4><ul><li>修改表数据语法</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 标准语法</span><span class="token keyword">UPDATE</span> 表名 <span class="token keyword">SET</span> 列名<span class="token number">1</span> <span class="token operator">=</span> 值<span class="token number">1</span><span class="token punctuation">,</span>列名<span class="token number">2</span> <span class="token operator">=</span> 值<span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">[</span><span class="token keyword">where</span> 条件<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">-- 修改手机的价格为3500</span><span class="token keyword">UPDATE</span> product <span class="token keyword">SET</span> price<span class="token operator">=</span><span class="token number">3500</span> <span class="token keyword">WHERE</span> NAME<span class="token operator">=</span><span class="token string">'手机'</span><span class="token punctuation">;</span><span class="token comment">-- 查看所有数据</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> product<span class="token punctuation">;</span><span class="token comment">-- 修改电视的价格为1800、库存为36</span><span class="token keyword">UPDATE</span> product <span class="token keyword">SET</span> price<span class="token operator">=</span><span class="token number">1800</span><span class="token punctuation">,</span>stock<span class="token operator">=</span><span class="token number">36</span> <span class="token keyword">WHERE</span> NAME<span class="token operator">=</span><span class="token string">'电视'</span><span class="token punctuation">;</span><span class="token comment">-- 修改电磁炉的库存为10</span><span class="token keyword">UPDATE</span> product <span class="token keyword">SET</span> stock<span class="token operator">=</span><span class="token number">10</span> <span class="token keyword">WHERE</span> id<span class="token operator">=</span><span class="token number">7</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>注意事项<ul><li>修改语句中必须加条件</li><li>如果不加条件，则将所有数据都修改</li></ul></li></ul><h4 id="7-DML-DELETE语句"><a href="#7-DML-DELETE语句" class="headerlink" title="7.DML-DELETE语句"></a>7.DML-DELETE语句</h4><ul><li>删除表数据语法</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 标准语法</span><span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> 表名 <span class="token punctuation">[</span><span class="token keyword">WHERE</span> 条件<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">-- 删除product表中的微波炉信息</span><span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> product <span class="token keyword">WHERE</span> NAME<span class="token operator">=</span><span class="token string">'微波炉'</span><span class="token punctuation">;</span><span class="token comment">-- 删除product表中库存为10的商品信息</span><span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> product <span class="token keyword">WHERE</span> stock<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">-- 查看所有商品信息</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> product<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>注意事项<ul><li>删除语句中必须加条件</li><li>如果不加条件，则将所有数据删除</li></ul></li></ul><h4 id="8-DQL-单表查询"><a href="#8-DQL-单表查询" class="headerlink" title="8.DQL-单表查询"></a>8.DQL-单表查询</h4><ul><li>数据准备(直接复制执行即可)</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 创建db1数据库</span><span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> db1<span class="token punctuation">;</span><span class="token comment">-- 使用db1数据库</span><span class="token keyword">USE</span> db1<span class="token punctuation">;</span><span class="token comment">-- 创建数据表</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> product<span class="token punctuation">(</span>id <span class="token keyword">INT</span><span class="token punctuation">,</span><span class="token comment">-- 商品编号</span>NAME <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment">-- 商品名称</span>price <span class="token keyword">DOUBLE</span><span class="token punctuation">,</span><span class="token comment">-- 商品价格</span>brand <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment">-- 商品品牌</span>stock <span class="token keyword">INT</span><span class="token punctuation">,</span><span class="token comment">-- 商品库存</span>insert_time <span class="token keyword">DATE</span>    <span class="token comment">-- 添加时间</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 添加数据</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> product <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'华为手机'</span><span class="token punctuation">,</span><span class="token number">3999</span><span class="token punctuation">,</span><span class="token string">'华为'</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token string">'2088-03-10'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'小米手机'</span><span class="token punctuation">,</span><span class="token number">2999</span><span class="token punctuation">,</span><span class="token string">'小米'</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token string">'2088-05-15'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'苹果手机'</span><span class="token punctuation">,</span><span class="token number">5999</span><span class="token punctuation">,</span><span class="token string">'苹果'</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token string">'2088-08-20'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">'华为电脑'</span><span class="token punctuation">,</span><span class="token number">6999</span><span class="token punctuation">,</span><span class="token string">'华为'</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token string">'2088-06-16'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token string">'小米电脑'</span><span class="token punctuation">,</span><span class="token number">4999</span><span class="token punctuation">,</span><span class="token string">'小米'</span><span class="token punctuation">,</span><span class="token number">26</span><span class="token punctuation">,</span><span class="token string">'2088-07-08'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token string">'苹果电脑'</span><span class="token punctuation">,</span><span class="token number">8999</span><span class="token punctuation">,</span><span class="token string">'苹果'</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token string">'2088-10-25'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token string">'联想电脑'</span><span class="token punctuation">,</span><span class="token number">7999</span><span class="token punctuation">,</span><span class="token string">'联想'</span><span class="token punctuation">,</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token string">'2088-11-11'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>查询语法</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span>字段列表<span class="token keyword">from</span>表名列表<span class="token keyword">where</span>条件列表<span class="token keyword">group</span> <span class="token keyword">by</span>分组字段<span class="token keyword">having</span>分组之后的条件<span class="token keyword">order</span> <span class="token keyword">by</span>排序<span class="token keyword">limit</span>分页限定<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>查询全部</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 标准语法</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> 表名<span class="token punctuation">;</span><span class="token comment">-- 查询product表所有数据</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> product<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>查询部分</p><ul><li>多个字段查询</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 标准语法</span><span class="token keyword">SELECT</span> 列名<span class="token number">1</span><span class="token punctuation">,</span>列名<span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">FROM</span> 表名<span class="token punctuation">;</span><span class="token comment">-- 查询名称、价格、品牌</span><span class="token keyword">SELECT</span> NAME<span class="token punctuation">,</span>price<span class="token punctuation">,</span>brand <span class="token keyword">FROM</span> product<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>去除重复查询<ul><li>注意：只有全部重复的才可以去除</li></ul></li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 标准语法</span><span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span> 列名<span class="token number">1</span><span class="token punctuation">,</span>列名<span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">FROM</span> 表名<span class="token punctuation">;</span><span class="token comment">-- 查询品牌</span><span class="token keyword">SELECT</span> brand <span class="token keyword">FROM</span> product<span class="token punctuation">;</span><span class="token comment">-- 查询品牌，去除重复</span><span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span> brand <span class="token keyword">FROM</span> product<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>计算列的值(四则运算)</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 标准语法</span><span class="token keyword">SELECT</span> 列名<span class="token number">1</span> 运算符<span class="token punctuation">(</span><span class="token operator">+</span> <span class="token operator">-</span> <span class="token operator">*</span> <span class="token operator">/</span><span class="token punctuation">)</span> 列名<span class="token number">2</span> <span class="token keyword">FROM</span> 表名<span class="token punctuation">;</span><span class="token comment">/*计算列的值标准语法：SELECT 列名1 运算符(+ - * /) 列名2 FROM 表名;如果某一列为null，可以进行替换ifnull(表达式1,表达式2)表达式1：想替换的列表达式2：想替换的值*/</span><span class="token comment">-- 查询商品名称和库存，库存数量在原有基础上加10</span><span class="token keyword">SELECT</span> NAME<span class="token punctuation">,</span>stock<span class="token operator">+</span><span class="token number">10</span> <span class="token keyword">FROM</span> product<span class="token punctuation">;</span><span class="token comment">-- 查询商品名称和库存，库存数量在原有基础上加10。进行null值判断</span><span class="token keyword">SELECT</span> NAME<span class="token punctuation">,</span>IFNULL<span class="token punctuation">(</span>stock<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">10</span> <span class="token keyword">FROM</span> product<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>起别名</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 标准语法</span><span class="token keyword">SELECT</span> 列名<span class="token number">1</span><span class="token punctuation">,</span>列名<span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">AS</span> 别名 <span class="token keyword">FROM</span> 表名<span class="token punctuation">;</span><span class="token comment">-- 查询商品名称和库存，库存数量在原有基础上加10。进行null值判断。起别名为getSum</span><span class="token keyword">SELECT</span> NAME<span class="token punctuation">,</span>IFNULL<span class="token punctuation">(</span>stock<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">10</span> <span class="token keyword">AS</span> getsum <span class="token keyword">FROM</span> product<span class="token punctuation">;</span><span class="token keyword">SELECT</span> NAME<span class="token punctuation">,</span>IFNULL<span class="token punctuation">(</span>stock<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">10</span> getsum <span class="token keyword">FROM</span> product<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>条件查询</p><ul><li>条件分类</li></ul><table><thead><tr><th>符号</th><th>功能</th></tr></thead><tbody><tr><td>&gt;</td><td>大于</td></tr><tr><td>&lt;</td><td>小于</td></tr><tr><td>&gt;=</td><td>大于等于</td></tr><tr><td>&lt;=</td><td>小于等于</td></tr><tr><td>=</td><td>等于</td></tr><tr><td>&lt;&gt; 或 !=</td><td>不等于</td></tr><tr><td>BETWEEN … AND …</td><td>在某个范围之内(都包含)</td></tr><tr><td>IN(…)</td><td>多选一</td></tr><tr><td>LIKE 占位符</td><td>模糊查询  _单个任意字符  %多个任意字符</td></tr><tr><td>IS NULL</td><td>是NULL</td></tr><tr><td>IS NOT NULL</td><td>不是NULL</td></tr><tr><td>AND 或 &amp;&amp;</td><td>并且</td></tr><tr><td>OR 或 ||</td><td>或者</td></tr><tr><td>NOT 或 !</td><td>非，不是</td></tr></tbody></table><ul><li>条件查询语法</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 标准语法</span><span class="token keyword">SELECT</span> 列名 <span class="token keyword">FROM</span> 表名 <span class="token keyword">WHERE</span> 条件<span class="token punctuation">;</span><span class="token comment">-- 查询库存大于20的商品信息</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> product <span class="token keyword">WHERE</span> stock <span class="token operator">></span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token comment">-- 查询品牌为华为的商品信息</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> product <span class="token keyword">WHERE</span> brand<span class="token operator">=</span><span class="token string">'华为'</span><span class="token punctuation">;</span><span class="token comment">-- 查询金额在4000 ~ 6000之间的商品信息</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> product <span class="token keyword">WHERE</span> price <span class="token operator">>=</span> <span class="token number">4000</span> <span class="token operator">AND</span> price <span class="token operator">&lt;=</span> <span class="token number">6000</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> product <span class="token keyword">WHERE</span> price <span class="token operator">BETWEEN</span> <span class="token number">4000</span> <span class="token operator">AND</span> <span class="token number">6000</span><span class="token punctuation">;</span><span class="token comment">-- 查询库存为14、30、23的商品信息</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> product <span class="token keyword">WHERE</span> stock<span class="token operator">=</span><span class="token number">14</span> <span class="token operator">OR</span> stock<span class="token operator">=</span><span class="token number">30</span> <span class="token operator">OR</span> stock<span class="token operator">=</span><span class="token number">23</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> product <span class="token keyword">WHERE</span> stock <span class="token operator">IN</span><span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 查询库存为null的商品信息</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> product <span class="token keyword">WHERE</span> stock <span class="token operator">IS</span> <span class="token boolean">NULL</span><span class="token punctuation">;</span><span class="token comment">-- 查询库存不为null的商品信息</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> product <span class="token keyword">WHERE</span> stock <span class="token operator">IS</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">;</span><span class="token comment">-- 查询名称以小米为开头的商品信息</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> product <span class="token keyword">WHERE</span> NAME <span class="token operator">LIKE</span> <span class="token string">'小米%'</span><span class="token punctuation">;</span><span class="token comment">-- 查询名称第二个字是为的商品信息</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> product <span class="token keyword">WHERE</span> NAME <span class="token operator">LIKE</span> <span class="token string">'_为%'</span><span class="token punctuation">;</span><span class="token comment">-- 查询名称为四个字符的商品信息</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> product <span class="token keyword">WHERE</span> NAME <span class="token operator">LIKE</span> <span class="token string">'____'</span><span class="token punctuation">;</span><span class="token comment">-- 查询名称中包含电脑的商品信息</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> product <span class="token keyword">WHERE</span> NAME <span class="token operator">LIKE</span> <span class="token string">'%电脑%'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>聚合函数</p><ul><li>将一列数据作为一个整体，进行纵向的计算</li><li>聚合函数分类</li></ul><table><thead><tr><th>函数名</th><th>功能</th></tr></thead><tbody><tr><td>count(列名)</td><td>统计数量(一般选用不为null的列)</td></tr><tr><td>max(列名)</td><td>最大值</td></tr><tr><td>min(列名)</td><td>最小值</td></tr><tr><td>sum(列名)</td><td>求和</td></tr><tr><td>avg(列名)</td><td>平均值</td></tr></tbody></table><ul><li>聚合函数语法</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 标准语法</span><span class="token keyword">SELECT</span> 函数名<span class="token punctuation">(</span>列名<span class="token punctuation">)</span> <span class="token keyword">FROM</span> 表名 <span class="token punctuation">[</span><span class="token keyword">WHERE</span> 条件<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">-- 计算product表中总记录条数</span><span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> product<span class="token punctuation">;</span><span class="token comment">-- 获取最高价格</span><span class="token keyword">SELECT</span> <span class="token function">MAX</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span> <span class="token keyword">FROM</span> product<span class="token punctuation">;</span><span class="token comment">-- 获取最高价格的商品名称</span><span class="token keyword">SELECT</span> NAME<span class="token punctuation">,</span>price <span class="token keyword">FROM</span> product <span class="token keyword">WHERE</span> price <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token function">MAX</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span> <span class="token keyword">FROM</span> product<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 获取最低库存</span><span class="token keyword">SELECT</span> <span class="token function">MIN</span><span class="token punctuation">(</span>stock<span class="token punctuation">)</span> <span class="token keyword">FROM</span> product<span class="token punctuation">;</span><span class="token comment">-- 获取最低库存的商品名称</span><span class="token keyword">SELECT</span> NAME<span class="token punctuation">,</span>stock <span class="token keyword">FROM</span> product <span class="token keyword">WHERE</span> stock <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token function">MIN</span><span class="token punctuation">(</span>stock<span class="token punctuation">)</span> <span class="token keyword">FROM</span> product<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 获取总库存数量</span><span class="token keyword">SELECT</span> <span class="token function">SUM</span><span class="token punctuation">(</span>stock<span class="token punctuation">)</span> <span class="token keyword">FROM</span> product<span class="token punctuation">;</span><span class="token comment">-- 获取品牌为苹果的总库存数量</span><span class="token keyword">SELECT</span> <span class="token function">SUM</span><span class="token punctuation">(</span>stock<span class="token punctuation">)</span> <span class="token keyword">FROM</span> product <span class="token keyword">WHERE</span> brand<span class="token operator">=</span><span class="token string">'苹果'</span><span class="token punctuation">;</span><span class="token comment">-- 获取品牌为小米的平均商品价格</span><span class="token keyword">SELECT</span> <span class="token function">AVG</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span> <span class="token keyword">FROM</span> product <span class="token keyword">WHERE</span> brand<span class="token operator">=</span><span class="token string">'小米'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>排序查询</p><ul><li>排序分类<ul><li>注意：多个排序条件，当前边的条件值一样时，才会判断第二条件</li></ul></li></ul><table><thead><tr><th>关键词</th><th>功能</th></tr></thead><tbody><tr><td>ORDER BY 列名1 排序方式1,列名2 排序方式2</td><td>对指定列排序，ASC升序(默认的)  DESC降序</td></tr></tbody></table><ul><li>排序语法</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 标准语法</span><span class="token keyword">SELECT</span> 列名 <span class="token keyword">FROM</span> 表名 <span class="token punctuation">[</span><span class="token keyword">WHERE</span> 条件<span class="token punctuation">]</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> 列名<span class="token number">1</span> 排序方式<span class="token number">1</span><span class="token punctuation">,</span>列名<span class="token number">2</span> 排序方式<span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">-- 按照库存升序排序</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> product <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> stock <span class="token keyword">ASC</span><span class="token punctuation">;</span><span class="token comment">-- 查询名称中包含手机的商品信息。按照金额降序排序</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> product <span class="token keyword">WHERE</span> NAME <span class="token operator">LIKE</span> <span class="token string">'%手机%'</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> price <span class="token keyword">DESC</span><span class="token punctuation">;</span><span class="token comment">-- 按照金额升序排序，如果金额相同，按照库存降序排列</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> product <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> price <span class="token keyword">ASC</span><span class="token punctuation">,</span>stock <span class="token keyword">DESC</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>分组查询</p></li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 标准语法</span><span class="token keyword">SELECT</span> 列名 <span class="token keyword">FROM</span> 表名 <span class="token punctuation">[</span><span class="token keyword">WHERE</span> 条件<span class="token punctuation">]</span> <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> 分组列名 <span class="token punctuation">[</span><span class="token keyword">HAVING</span> 分组后条件过滤<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> 排序列名 排序方式<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">-- 按照品牌分组，获取每组商品的总金额</span><span class="token keyword">SELECT</span> brand<span class="token punctuation">,</span><span class="token function">SUM</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span> <span class="token keyword">FROM</span> product <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> brand<span class="token punctuation">;</span><span class="token comment">-- 对金额大于4000元的商品，按照品牌分组,获取每组商品的总金额</span><span class="token keyword">SELECT</span> brand<span class="token punctuation">,</span><span class="token function">SUM</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span> <span class="token keyword">FROM</span> product <span class="token keyword">WHERE</span> price <span class="token operator">></span> <span class="token number">4000</span> <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> brand<span class="token punctuation">;</span><span class="token comment">-- 对金额大于4000元的商品，按照品牌分组，获取每组商品的总金额，只显示总金额大于7000元的</span><span class="token keyword">SELECT</span> brand<span class="token punctuation">,</span><span class="token function">SUM</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span> <span class="token keyword">AS</span> getSum <span class="token keyword">FROM</span> product <span class="token keyword">WHERE</span> price <span class="token operator">></span> <span class="token number">4000</span> <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> brand <span class="token keyword">HAVING</span> getSum <span class="token operator">></span> <span class="token number">7000</span><span class="token punctuation">;</span><span class="token comment">-- 对金额大于4000元的商品，按照品牌分组，获取每组商品的总金额，只显示总金额大于7000元的、并按照总金额的降序排列</span><span class="token keyword">SELECT</span> brand<span class="token punctuation">,</span><span class="token function">SUM</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span> <span class="token keyword">AS</span> getSum <span class="token keyword">FROM</span> product <span class="token keyword">WHERE</span> price <span class="token operator">></span> <span class="token number">4000</span> <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> brand <span class="token keyword">HAVING</span> getSum <span class="token operator">></span> <span class="token number">7000</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> getSum <span class="token keyword">DESC</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>分页查询</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 标准语法</span><span class="token keyword">SELECT</span> 列名 <span class="token keyword">FROM</span> 表名 <span class="token punctuation">[</span><span class="token keyword">WHERE</span> 条件<span class="token punctuation">]</span> <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> 分组列名 <span class="token punctuation">[</span><span class="token keyword">HAVING</span> 分组后条件过滤<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> 排序列名 排序方式<span class="token punctuation">]</span> <span class="token keyword">LIMIT</span> 开始索引<span class="token punctuation">,</span>查询条数<span class="token punctuation">;</span><span class="token comment">-- 公式：开始索引 = (当前页码-1) * 每页显示的条数</span><span class="token comment">-- 每页显示2条数据</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> product <span class="token keyword">LIMIT</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">;</span>  <span class="token comment">-- 第一页 开始索引=(1-1) * 2</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> product <span class="token keyword">LIMIT</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">;</span>  <span class="token comment">-- 第二页 开始索引=(2-1) * 2</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> product <span class="token keyword">LIMIT</span> <span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">;</span>  <span class="token comment">-- 第三页 开始索引=(3-1) * 2</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> product <span class="token keyword">LIMIT</span> <span class="token number">6</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">;</span>  <span class="token comment">-- 第四页 开始索引=(4-1) * 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>分页查询图解</li></ul><p><img src="https://i.loli.net/2021/05/22/NfMbZQi4uXe2H3h.png" alt="05"></p><h3 id="四、约束"><a href="#四、约束" class="headerlink" title="四、约束"></a>四、约束</h3><h4 id="1-约束的概念和分类"><a href="#1-约束的概念和分类" class="headerlink" title="1.约束的概念和分类"></a>1.约束的概念和分类</h4><ul><li>约束的概念<ul><li>对表中的数据进行限定，保证数据的正确性、有效性、完整性！</li></ul></li><li>约束的分类</li></ul><table><thead><tr><th>约束</th><th>说明</th></tr></thead><tbody><tr><td>PRIMARY KEY</td><td>主键约束</td></tr><tr><td>PRIMARY KEY AUTO_INCREMENT</td><td>主键、自动增长</td></tr><tr><td>UNIQUE</td><td>唯一约束</td></tr><tr><td>NOT NULL</td><td>非空约束</td></tr><tr><td>FOREIGN KEY</td><td>外键约束</td></tr><tr><td>FOREIGN KEY ON UPDATE CASCADE</td><td>外键级联更新</td></tr><tr><td>FOREIGN KEY ON DELETE CASCADE</td><td>外键级联删除</td></tr></tbody></table><h4 id="2-主键约束"><a href="#2-主键约束" class="headerlink" title="2.主键约束"></a>2.主键约束</h4><ul><li>主键约束特点<ul><li>主键约束包含：非空和唯一两个功能</li><li>一张表只能有一个列作为主键</li><li>主键一般用于表中数据的唯一标识</li></ul></li><li>建表时添加主键约束</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 标准语法</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> 表名<span class="token punctuation">(</span>列名 数据类型 <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">,</span>    列名 数据类型<span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 创建student表</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> student<span class="token punctuation">(</span>id <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span>  <span class="token comment">-- 给id添加主键约束</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 添加数据</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> student <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 主键默认唯一，添加重复数据，会报错</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> student <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 主键默认非空，不能添加null的数据</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> student <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 查询student表</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> student<span class="token punctuation">;</span><span class="token comment">-- 查询student表详细</span><span class="token keyword">DESC</span> student<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>删除主键</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 标准语法</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> 表名 <span class="token keyword">DROP</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">;</span><span class="token comment">-- 删除主键</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> student <span class="token keyword">DROP</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>建表后单独添加主键</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 标准语法</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> 表名 <span class="token keyword">MODIFY</span> 列名 数据类型 <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">;</span><span class="token comment">-- 添加主键</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> student <span class="token keyword">MODIFY</span> id <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-主键自动增长约束"><a href="#3-主键自动增长约束" class="headerlink" title="3.主键自动增长约束"></a>3.主键自动增长约束</h4><ul><li>建表时添加主键自增约束</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 标准语法</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> 表名<span class="token punctuation">(</span>列名 数据类型 <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>    列名 数据类型<span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 创建student2表</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> student2<span class="token punctuation">(</span>id <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">AUTO_INCREMENT</span>    <span class="token comment">-- 给id添加主键自增约束</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 添加数据</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> student2 <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 添加null值，会自动增长</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> student2 <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 查询student2表</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> student2<span class="token punctuation">;</span><span class="token comment">-- student2表详细</span><span class="token keyword">DESC</span> student2<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>删除自动增长</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 标准语法</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> 表名 <span class="token keyword">MODIFY</span> 列名 数据类型<span class="token punctuation">;</span><span class="token comment">-- 删除自动增长</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> student2 <span class="token keyword">MODIFY</span> id <span class="token keyword">INT</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>建表后单独添加自动增长</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 标准语法</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> 表名 <span class="token keyword">MODIFY</span> 列名 数据类型 <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">;</span><span class="token comment">-- 添加自动增长</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> student2 <span class="token keyword">MODIFY</span> id <span class="token keyword">INT</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-唯一约束"><a href="#4-唯一约束" class="headerlink" title="4.唯一约束"></a>4.唯一约束</h4><ul><li>建表时添加唯一约束</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 标准语法</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> 表名<span class="token punctuation">(</span>列名 数据类型 <span class="token keyword">UNIQUE</span><span class="token punctuation">,</span>    列名 数据类型<span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 创建student3表</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> student3<span class="token punctuation">(</span>id <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>tel <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">UNIQUE</span>    <span class="token comment">-- 给tel列添加唯一约束</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 添加数据</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> student3 <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token string">'18888888888'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token string">'18666666666'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 添加重复数据，会报错</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> student3 <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token string">'18666666666'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 查询student3数据表</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> student3<span class="token punctuation">;</span><span class="token comment">-- student3表详细</span><span class="token keyword">DESC</span> student3<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>删除唯一约束</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 标准语法</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> 表名 <span class="token keyword">DROP</span> <span class="token keyword">INDEX</span> 列名<span class="token punctuation">;</span><span class="token comment">-- 删除唯一约束</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> student3 <span class="token keyword">DROP</span> <span class="token keyword">INDEX</span> tel<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>建表后单独添加唯一约束</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 标准语法</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> 表名 <span class="token keyword">MODIFY</span> 列名 数据类型 <span class="token keyword">UNIQUE</span><span class="token punctuation">;</span><span class="token comment">-- 添加唯一约束</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> student3 <span class="token keyword">MODIFY</span> tel <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">UNIQUE</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-非空约束"><a href="#5-非空约束" class="headerlink" title="5.非空约束"></a>5.非空约束</h4><ul><li>建表时添加非空约束</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 标准语法</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> 表名<span class="token punctuation">(</span>列名 数据类型 <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    列名 数据类型<span class="token punctuation">,</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 创建student4表</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> student4<span class="token punctuation">(</span>id <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>NAME <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span>    <span class="token comment">-- 给name添加非空约束</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 添加数据</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> student4 <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token string">'张三'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token string">'李四'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 添加null值，会报错</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> student4 <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span><span class="token boolean">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>删除非空约束</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 标准语法</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> 表名 <span class="token keyword">MODIFY</span> 列名 数据类型<span class="token punctuation">;</span><span class="token comment">-- 删除非空约束</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> student4 <span class="token keyword">MODIFY</span> NAME <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>建表后单独添加非空约束</p><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">-- 标准语法ALTER TABLE 表名 MODIFY 列名 数据类型 NOT NULL;-- 添加非空约束ALTER TABLE student4 MODIFY NAME VARCHAR(20) NOT NULL;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis基础</title>
      <link href="/2021/04/20/redis-ji-chu/"/>
      <url>/2021/04/20/redis-ji-chu/</url>
      
        <content type="html"><![CDATA[<p>埋坑</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络-TCP三次握手与四次挥手</title>
      <link href="/2021/04/08/ji-suan-ji-wang-luo-tcp-san-ci-wo-shou-yu-si-ci-hui-shou/"/>
      <url>/2021/04/08/ji-suan-ji-wang-luo-tcp-san-ci-wo-shou-yu-si-ci-hui-shou/</url>
      
        <content type="html"><![CDATA[<h2 id="TCP是可靠协议"><a href="#TCP是可靠协议" class="headerlink" title="TCP是可靠协议?"></a>TCP是可靠协议?</h2><p>很明确地说，从通信意义上推敲，TCP一点都不可靠。一个抽象的协议，怎么可能左右介质来保证可靠，不存在的。但凡是经由某种介质的通信行为均不可能是绝对可靠的！</p><p>正好比我们现实生活中的保险，其实它什么都不能阻止，什么风险也保证不了它的不发生，它保证不了飞机不会掉下来，也无法阻止人生病…事实上，TCP就是通信中的保险业。</p><p>参考<a href="https://en.wikipedia.org/wiki/Two_Generals'_Problem">两军问题</a>我们知道网络通信中存在<strong>一致性确认问题</strong>，通信双方都要保证数据一致性。但是<strong>一致性是不可能的</strong>，谁也无法保证数据在传输过程中是否丢失。那么通信技术还有什么意义呢？</p><p>那么信道到底不可靠到什么程度？是100%不可靠吗？如果是的话，意味着断路，即双方是不可达的，无论我们发送多少次数据包，均会丢失，这样我们马上可以结束这个没有意义的讨论，因此，所谓的不可靠只是说信道会出现概率性丢包，丢包概率pp一定是介于开区间(0,1)之间的！</p><p>这个意义十分重大，这意味着，只要我们重试消息的次数足够多，就一定能收到来自对端针对消息的确认！，这是完全确定的一个结论。</p><p>事实上，通信协议从来都不是为了满足完全的一致性需求，其次，通信传输的是字节电脉冲，消息可以重发，这使得我们的TCP协议在信道传输不可靠程度上得到缓和，也就是我们买保险一样，规避损失。</p><h2 id="TCP为何要三次握手"><a href="#TCP为何要三次握手" class="headerlink" title="TCP为何要三次握手"></a>TCP为何要三次握手</h2><p>TCP为什么是3次握手，而不是2次，也不是4次，5次呢？所谓的TCP建立连接的握手，实质上就是建立一个双向的可靠通信连接，一边一个来回，每一边都自带超时重传来确保可靠性(而不是靠握手的次数)。TCP的3次握手是优化的结果，其实它应该是4次握手，由于是从零开始的建立连接，因此将SYN的ACK以及被动打开的SYN合并成了一个SYN-ACK，仅此而已。</p><p>这个问题的本质是, 信道不可靠, 但是通信双发需要就某个问题达成一致. 而要解决这个问题, 无论你在消息中包含什么信息, 三次通信是理论上的最小值. 所以三次握手不是TCP本身的要求, 而是为了满足”在不可靠信道上可靠地传输信息”这一需求所导致的. 请注意这里的本质需求,<strong>信道不可靠, 数据传输要可靠</strong>. 三次达到了, 那后面你想接着握手也好, 发数据也好, 跟进行可靠信息传输的需求就没关系了. 因此,如果信道是可靠的, 即无论什么时候发出消息, 对方一定能收到, 或者你不关心是否要保证对方收到你的消息, 那就能像UDP那样直接发送消息就可以了”。</p><h2 id="TCP请求报文内容"><a href="#TCP请求报文内容" class="headerlink" title="TCP请求报文内容"></a>TCP请求报文内容</h2><ul><li>Seq：序号，用来标识TCP发端向TCP收端发送的数据字节流，是本报文段发送的数据组的第一个字节的序号，在TCP传送的流中，每一个字节一个序号。一个报文段的序号为300，此报文段数据部分共有100字节，则下一个报文段的序号<strong>Seq=400</strong>。序号确保了TCP传输的有序性。</li><li>Ack：确认序号，即接收到的上一次远端主机传来的seq+1，再发送给远端主机。提示远端主机已经成功接收上一次所有数据。只有ACK标志位为1时，Ack才有效。</li><li>ACK：确认序号有效</li><li>SYN：同步，在连接建立时用来同步序号。当SYN=1而ACK=0时，表明这是一个连接请求报文。对方若同意建立连接，则应在响应报文中使SYN=1和ACK=1. 因此,SYN置1就表示这是一个连接请求或连接接受报文。</li><li>FIN：当 FIN = 1 时，表明此报文段的发送方的数据已经发送完毕，并要求释放连接。</li></ul><h2 id="TCP11种状态"><a href="#TCP11种状态" class="headerlink" title="TCP11种状态"></a>TCP11种状态</h2><ol><li><strong>CLOSED</strong>：初始状态，表示TCP连接是“关闭着的”或“未打开的”。</li><li><strong>LISTEN</strong> ：表示服务器端的某个SOCKET处于监听状态，可以接受客户端的连接。</li><li><strong>SYN_RCVD</strong> ：表示服务器接收到了来自客户端请求连接的SYN报文。在正常情况下，这个状态是服务器端的SOCKET在建立TCP连接时的三次握手会话过程中的一个中间状态，很短暂，基本上用netstat很难看到这种状态，除非故意写一个监测程序，将三次TCP握手过程中最后一个ACK报文不予发送。当TCP连接处于此状态时，再收到客户端的ACK报文，它就会进入到ESTABLISHED 状态。</li><li><strong>SYN_SENT</strong> ：这个状态与SYN_RCVD 状态相呼应，当客户端SOCKET执行connect()进行连接时，它首先发送SYN报文，然后随即进入到SYN_SENT 状态，并等待服务端的发送三次握手中的第2个报文。SYN_SENT 状态表示客户端已发送SYN报文。</li><li><strong>ESTABLISHED</strong> ：表示TCP连接已经成功建立。</li><li><strong>FIN_WAIT_1</strong> ：这个状态得好好解释一下，其实FIN_WAIT_1 和FIN_WAIT_2 两种状态的真正含义都是表示等待对方的FIN报文。而这两种状态的区别是：FIN_WAIT_1状态实际上是当SOCKET在ESTABLISHED状态时，它想主动关闭连接，向对方发送了FIN报文，此时该SOCKET进入到FIN_WAIT_1 状态。而当对方回应ACK报文后，则进入到FIN_WAIT_2 状态。当然在实际的正常情况下，无论对方处于任何种情况下，都应该马上回应ACK报文，所以FIN_WAIT_1 状态一般是比较难见到的，而FIN_WAIT_2 状态有时仍可以用netstat看到。</li><li><strong>FIN_WAIT_2</strong> ：上面已经解释了这种状态的由来，实际上FIN_WAIT_2状态下的SOCKET表示半连接，即有一方调用close()主动要求关闭连接。注意：FIN_WAIT_2 是没有超时的（不像TIME_WAIT 状态），这种状态下如果对方不关闭（不配合完成4次挥手过程），那这个 FIN_WAIT_2 状态将一直保持到系统重启，越来越多的FIN_WAIT_2 状态会导致内核crash。</li><li><strong>TIME_WAIT</strong> ：表示收到了对方的FIN报文，并发送出了ACK报文。 TIME_WAIT状态下的TCP连接会等待2*MSL（Max Segment Lifetime，最大分段生存期，指一个TCP报文在Internet上的最长生存时间。每个具体的TCP协议实现都必须选择一个确定的MSL值，RFC 1122建议是2分钟，但BSD传统实现采用了30秒，Linux可以cat /proc/sys/net/ipv4/tcp_fin_timeout看到本机的这个值），然后即可回到CLOSED 可用状态了。如果FIN_WAIT_1状态下，收到了对方同时带FIN标志和ACK标志的报文时，可以直接进入到TIME_WAIT状态，而无须经过FIN_WAIT_2状态。（这种情况应该就是四次挥手变成三次挥手的那种情况）</li><li><strong>CLOSING</strong> ：这种状态在实际情况中应该很少见，属于一种比较罕见的例外状态。正常情况下，当一方发送FIN报文后，按理来说是应该先收到（或同时收到）对方的ACK报文，再收到对方的FIN报文。但是CLOSING 状态表示一方发送FIN报文后，并没有收到对方的ACK报文，反而却也收到了对方的FIN报文。什么情况下会出现此种情况呢？那就是当双方几乎在同时close()一个SOCKET的话，就出现了双方同时发送FIN报文的情况，这是就会出现CLOSING 状态，表示双方都正在关闭SOCKET连接。</li><li><strong>CLOSE_WAIT</strong> ：表示正在等待关闭。怎么理解呢？当对方close()一个SOCKET后发送FIN报文给自己，你的系统毫无疑问地将会回应一个ACK报文给对方，此时TCP连接则进入到CLOSE_WAIT状态。接下来呢，你需要检查自己是否还有数据要发送给对方，如果没有的话，那你也就可以close()这个SOCKET并发送FIN报文给对方，即关闭自己到对方这个方向的连接。有数据的话则看程序的策略，继续发送或丢弃。简单地说，当你处于CLOSE_WAIT 状态下，需要完成的事情是等待你去关闭连接。</li><li><strong>LAST_ACK</strong> ：当被动关闭的一方在发送FIN报文后，等待对方的ACK报文的时候，就处于LAST_ACK 状态。当收到对方的ACK报文后，也就可以进入到CLOSED 可用状态了。</li></ol><h2 id="TCP三次握手的目的"><a href="#TCP三次握手的目的" class="headerlink" title="TCP三次握手的目的"></a>TCP三次握手的目的</h2><p>三次握手的目的是同步连接双方的序列号和确认号并交换 TCP 窗口大小信息。旨在<strong>确定两个双向的初始序列号</strong>，TCP用<strong>序列号</strong>来编址传输的字节，由于是两个方向的连接，所以需要两个序列号，握手过程不传输任何字节，仅仅确定<strong>初始序列号</strong></p><h2 id="TCP三次握手原理"><a href="#TCP三次握手原理" class="headerlink" title="TCP三次握手原理"></a>TCP三次握手原理</h2><p>假设客户端为A，服务端为B。</p><table><thead><tr><th>握手</th><th>源端:状态</th><th>数据报文</th><th>目的端:状态</th></tr></thead><tbody><tr><td>第一次</td><td>A:SYN_SENT</td><td>SYN=1,ACK=0,Ack=无效,Seq=2019</td><td>B:空闲</td></tr></tbody></table><p>在第一次握手过程中，发起连接请求报文，使得SYN=1,ACK=0,因为ACK=0,导致Ack无效。假设客户端A向服务端B发送请求，报文序号Seq=2019。</p><p>发送完毕后，客户端进入SYN_SENT状态，等待服务端接受(服务端此时不知道A发来消息，处于空闲状态)</p><table><thead><tr><th>握手</th><th>源端:状态</th><th>数据报文</th><th>目的端:状态</th></tr></thead><tbody><tr><td>第二次</td><td>B:空闲-&gt;SYN_RCVD</td><td>SYN=1,ACK=1,Ack=2020,Seq=2333</td><td>A:SYN_SENT</td></tr></tbody></table><p>在第二次握手过程中，服务端接受客户端请求，使得SYN=1,ACK=1,激活Ack，Ack=2019+1=2020。假设服务端B向服务端B发送确认请求，报文序号Seq=2333。</p><p>发送完毕后，服务端马上从空闲状态进入SYN_RCVD状态。</p><table><thead><tr><th>握手</th><th>源端:状态</th><th>数据报文</th><th>目的端:状态</th></tr></thead><tbody><tr><td>第三次</td><td>A:TABLISHED</td><td>SYN=0,ACK=1,Ack=2334,Seq=2021</td><td>B:SYN_RCVD-&gt;TABLISHED</td></tr></tbody></table><p>在第三次握手过程中，客户端接收到来自服务端的确认后，进行数据检测，判断Ack==Seq(第一次客户端自己的序号)+1，ACK==1。满足条件，置得ACK=1,Ack=Seq(第二次握手服务端发送过来的序号)+1，注意此时不再使用SYN了，因为SYN做同步用，能够第三次握手表明前面双方序号确认没问题。</p><p>发送完毕后，客户端进入TABLISHED(连接)状态，等待服务端接受，服务端接受后，判断Ack==Seq(第二次握手服务端自己的序号)+1,ACK==1,满足条件，服务端进入TABLISHED状态，连接建立完毕。</p><p><img src="https://shp.qpic.cn/collector/1562492775/9c1c8c30-ec38-488c-881c-74a034f191b0/0" alt="TCP三次握手"></p><h2 id="TCP四次挥手原理"><a href="#TCP四次挥手原理" class="headerlink" title="TCP四次挥手原理"></a>TCP四次挥手原理</h2><p>实际上客户端和服务端任何一方都可以来进行CLOSE操作，因为TCP是全双工通信的。仍然指定A为客户端，B为服务端，且设定由客户端执行CLOSE操作请求。</p><table><thead><tr><th>挥手</th><th>源端:状态</th><th>数据报文</th><th>目的端:状态</th></tr></thead><tbody><tr><td>第一次</td><td>A:TABLISHED-&gt;FIN_WAIT_1</td><td>SYN=1,ACK=0,Ack=无效,FIN=1,Seq=4096</td><td>B:TABLISHED</td></tr></tbody></table><p>在第一次挥手过程中，客户端发起关闭请求报文，此时不需要同步和确认，所以置SYN=0,ACK=0,Ack=无效,发送FIN=1，假设客户端A向服务端B发送关闭请求，报文序号Seq=4096。</p><p>发送完毕后，客户端由TABLISHED连接状态进入FIN_WAIT_1(关闭等待1)状态，等待服务端接受(服务端此时不知道A发来消息，仍然处于连接状态)</p><table><thead><tr><th>挥手</th><th>源端:状态</th><th>数据报文</th><th>目的端:状态</th></tr></thead><tbody><tr><td>第二次</td><td>B:TABLISHED-&gt;CLOSE_WAIT</td><td>SYN=0,ACK=1,Ack=4097,Seq=2333</td><td>A:FIN_WAIT_1-&gt;FIN_WAIT_2</td></tr></tbody></table><p>在第二次挥手过程中，服务端接受客户端请求，不需要请求同步使得SYN=0,该次回应需要确定序号使得ACK=1,激活Ack=4096+1=4097。假设服务端B向客户端A发送确认请求，报文序号Seq=2333。</p><p>发送完毕后，服务端马上从连接状态进入CLOSE_WAIT(等待确认关闭)状态。</p><table><thead><tr><th>挥手</th><th>源端:状态</th><th>数据报文</th><th>目的端:状态</th></tr></thead><tbody><tr><td>第三次</td><td>B:CLOSE_WAIT-&gt;LAST_ACK</td><td>SYN=0,ACK=1,Ack=4097,Seq=9999</td><td>A:FIN_WAIT_2</td></tr></tbody></table><p>在第三次挥手过程中，服务端发送FIN=1，确认服务端可以关闭了，置ACK=1，激活Ack=4096+1=4097，假设服务端B向客户端A发送确认请求，报文序号Seq=9999。</p><table><thead><tr><th>挥手</th><th>源端:状态</th><th>数据报文</th><th>目的端:状态</th></tr></thead><tbody><tr><td>第四次</td><td>A:FIN_WAIT_2-&gt;TIME_WAIT</td><td>SYN=0,ACK=1,Ack=10000,Seq=4097</td><td>B:CLOSED</td></tr></tbody></table><p>客户端接收到FIN后，进入TIME_WAIT状态，接着向服务端发送一个请求，服务端彻底关闭连接</p><p>发送完毕后，连接关闭完成。</p><p><img src="https://shp.qpic.cn/collector/1562492775/55a163e6-5ec2-4a88-a46f-5c6a8842de8b/0" alt="TCP四次挥手"></p><h2 id="TCP面试问题"><a href="#TCP面试问题" class="headerlink" title="TCP面试问题"></a>TCP面试问题</h2><p><strong>1. 为什么要TIME_WAIT等待呢？</strong></p><p>为了防止这种情况：A接到B的释放连接请求后会发送一个确认信息，但是如果这个确认信息丢了，也就是B没有收到确认释放连接，那么B就会重发一个释放连接请求，这时候A还处于TIME_WAIT状态，所以会再次发送一个确认信息。</p><p><strong>2. 为什么TIME_WAIT 状态还需要等2MSL秒之后才能返回到CLOSED 状态呢？</strong></p><p>因为虽然双方都同意关闭连接了，而且握手的4个报文也都发送完毕，按理可以直接回到CLOSED 状态（就好比从SYN_SENT 状态到ESTABLISH 状态那样），但是我们必须假想网络是不可靠的，你无法保证你最后发送的ACK报文一定会被对方收到，就是说对方处于LAST_ACK 状态下的SOCKET可能会因为超时未收到ACK报文，而重发FIN报文，所以这个TIME_WAIT 状态的作用就是用来重发可能丢失的ACK报文。</p><p><strong>3. 为什么不能用两次握手进行连接</strong></p><p>3次握手完成两个重要的功能，既要双方做好发送数据的准备工作(双方都知道彼此已准备好)，也要允许双方就初始序列号进行协商，这个序列号在握手过程中被发送和确认。现在把三次握手改成仅需要两次握手，死锁是可能发生的。作为例子，考虑计算机S和C之间的通信，假定C给S发送一个连接请求分组，S收到了这个分组，并发送了确认应答分组。按照两次握手的协定，S认为连接已经成功地建立了，可以开始发送数据分组。可是，C在S的应答分组在传输中被丢失的情况下，将不知道S 是否已准备好，不知道S建立什么样的序列号，C甚至怀疑S是否收到自己的连接请求分组。在这种情况下，C认为连接还未建立成功，将忽略S发来的任何数据分 组，只等待连接确认应答分组。而S在发出的分组超时后，重复发送同样的分组。这样就形成了死锁。</p><p><strong>4. 如果已经建立了连接，但是客户端突然出现故障了怎么办</strong></p><p>TCP还设有一个保活计时器，显然，客户端如果出现故障，服务器不能一直等下去，白白浪费资源。服务器每收到一次客户端的请求后都会重新复位这个计时器，时间通常是设置为2小时，若两小时还没有收到客户端的任何数据，服务器就会发送一个探测报文段，以后每隔75分钟发送一次。若一连发送10个探测报文仍然没反应，服务器就认为客户端出了故障，接着就关闭连接。</p><h2 id="TCP相比UDP为什么是可靠的"><a href="#TCP相比UDP为什么是可靠的" class="headerlink" title="TCP相比UDP为什么是可靠的"></a>TCP相比UDP为什么是可靠的</h2><ul><li><p>确认和重传机制</p><p>建立连接时三次握手同步双方的“序列号 + 确认号 + 窗口大小信息”，是确认重传、流控的基础传输过程中，如果Checksum校验失败、丢包或延时，发送端重传</p></li><li><p>数据排序</p><p>TCP有专门的序列号SN字段，可提供数据re-order重排序</p></li><li><p>流量控制</p><p>窗口和计时器的使用。TCP窗口中会指明双方能够发送接收的最大数据量</p></li><li><p>拥塞控制</p><p>TCP的拥塞控制由4个核心算法组成。</p><ol><li>“慢启动”（Slow Start）</li><li>“拥塞避免”（Congestion avoidance）</li><li>“快速重传 ”（Fast Retransmit）</li><li>“快速恢复”（Fast Recovery）</li></ol></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TCP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>按摩椅抓包修改享受新用户优惠</title>
      <link href="/2021/03/04/an-mo-yi-zhua-bao-xiu-gai-xiang-shou-xin-yong-hu-you-hui/"/>
      <url>/2021/03/04/an-mo-yi-zhua-bao-xiu-gai-xiang-shou-xin-yong-hu-you-hui/</url>
      
        <content type="html"><![CDATA[<p>​    前几天去商场里吃饭，吃完饭发现商场里的按摩椅有活动，地上一个超大的二维码，新用户19.9购买四张按摩券。<img src="https://shp.qpic.cn/collector/1562492775/adbd2b45-996a-42c9-b5d9-c57f2edfecbd/0" alt="img"></p><p>​    可惜我不是新用户，直接扫码付款按摩了。然后按摩的时候想着抓包测试一下。发现有个请求链接是判断用户是否有购买资格。如下。<img src="https://shp.qpic.cn/collector/1562492775/c8826a91-19b7-4b31-a3d0-55d6fb8408fc/0" alt="img"><br>​        响应参数返回322，来告诉前端页面这不是新用户。点击购买会显示您未满足该活动的参与资格，我猜测后端返回code 322后就交给前端处理了，让前端保证收到322状态码的用户不能购买。于是我尝试了下拦截修改322为常见的100、200，都没有成功，修改为1之后，神奇的事情发生了，点击购买就直接调用微信付款了，付款后成功收到了四张按摩券。</p><p><img src="https://shp.qpic.cn/collector/1562492775/43ba3c0c-f7c4-493b-ab28-291d9834f6ed/0" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> 抓包 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>nginx配置url重写</title>
      <link href="/2021/01/28/nginx-pei-zhi-url-chong-xie/"/>
      <url>/2021/01/28/nginx-pei-zhi-url-chong-xie/</url>
      
        <content type="html"><![CDATA[<p>url重写是指通过配置conf文件，以让网站的url中达到某种状态时则定向/跳转到某个规则，比如常见的伪静态、301重定向、浏览器定向等</p><h2 id="rewrite"><a href="#rewrite" class="headerlink" title="rewrite"></a>rewrite</h2><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p>在配置文件的<code>server</code>块中写，如：</p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">&#123;</span>    <span class="token directive"><span class="token keyword">rewrite</span> 规则 定向路径 重写类型</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>规则：可以是字符串或者正则来表示想匹配的目标url</li><li>定向路径：表示匹配到规则后要定向的路径，如果规则里有正则，则可以使用<code>$index</code>来表示正则里的捕获分组</li><li>重写类型：<ul><li>last ：相当于Apache里德(L)标记，表示完成rewrite，浏览器地址栏URL地址不变</li><li>break；本条规则匹配完成后，终止匹配，不再匹配后面的规则，浏览器地址栏URL地址不变</li><li>redirect：返回302临时重定向，浏览器地址会显示跳转后的URL地址</li><li>permanent：返回301永久重定向，浏览器地址栏会显示跳转后的URL地址</li></ul></li></ul><h3 id="简单例子"><a href="#简单例子" class="headerlink" title="简单例子"></a>简单例子</h3><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">&#123;</span>    <span class="token comment"># 访问 /last.html 的时候，页面内容重写到 /index.html 中</span>    <span class="token directive"><span class="token keyword">rewrite</span> /last.html /index.html last</span><span class="token punctuation">;</span>    <span class="token comment"># 访问 /break.html 的时候，页面内容重写到 /index.html 中，并停止后续的匹配</span>    <span class="token directive"><span class="token keyword">rewrite</span> /break.html /index.html break</span><span class="token punctuation">;</span>    <span class="token comment"># 访问 /redirect.html 的时候，页面直接302定向到 /index.html中</span>    <span class="token directive"><span class="token keyword">rewrite</span> /redirect.html /index.html redirect</span><span class="token punctuation">;</span>    <span class="token comment"># 访问 /permanent.html 的时候，页面直接301定向到 /index.html中</span>    <span class="token directive"><span class="token keyword">rewrite</span> /permanent.html /index.html permanent</span><span class="token punctuation">;</span>    <span class="token comment"># 把 /html/*.html => /post/*.html ，301定向</span>    <span class="token directive"><span class="token keyword">rewrite</span> ^/html/(.+?).html$ /post/<span class="token variable">$1</span>.html permanent</span><span class="token punctuation">;</span>    <span class="token comment"># 把 /search/key => /search.html?keyword=key</span>    <span class="token directive"><span class="token keyword">rewrite</span> ^/search\/([^\/]+?)(\/|$) /search.html?keyword=<span class="token variable">$1</span> permanent</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="last和break的区别"><a href="#last和break的区别" class="headerlink" title="last和break的区别"></a>last和break的区别</h4><p>因为301和302不能简单的只返回状态码，还必须有重定向的URL，这就是return指令无法返回301,302的原因了。这里 last 和 break 区别有点难以理解：</p><ul><li>last一般写在server和if中，而break一般使用在location中</li><li>last不终止重写后的url匹配，即新的url会再从server走一遍匹配流程，而break终止重写后的匹配</li><li>break和last都能组织继续执行后面的rewrite指令</li></ul><p>在<code>location</code>里一旦返回<code>break</code>则直接生效并停止后续的匹配<code>location</code></p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">&#123;</span>    <span class="token directive"><span class="token keyword">location</span> /</span> <span class="token punctuation">&#123;</span>        <span class="token directive"><span class="token keyword">rewrite</span> /last/ /q.html last</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">rewrite</span> /break/ /q.html break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token directive"><span class="token keyword">location</span> = /q.html</span> <span class="token punctuation">&#123;</span>        <span class="token directive"><span class="token keyword">return</span> <span class="token number">400</span></span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>访问<code>/last/</code>时重写到<code>/q.html</code>，然后使用新的<code>uri</code>再匹配，正好匹配到<code>locatoin = /q.html</code>然后返回了<code>400</code></li><li>访问<code>/break</code>时重写到<code>/q.html</code>，由于返回了<code>break</code>，则直接停止了</li></ul><h2 id="if判断"><a href="#if判断" class="headerlink" title="if判断"></a>if判断</h2><p>只是上面的简单重写很多时候满足不了需求，比如需要判断当文件不存在时、当路径包含xx时等条件，则需要用到<code>if</code></p><h3 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h3><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">if</span> (表达式)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>当表达式只是一个变量时，如果值为空或任何以0开头的字符串都会当做false</li><li>直接比较变量和内容时，使用=或!=</li><li><del>正则表达式匹配，</del>*不区分大小写的匹配，!~区分大小写的不匹配</li></ul><p>一些内置的条件判断：</p><ul><li>-f和!-f用来判断是否存在文件</li><li>-d和!-d用来判断是否存在目录</li><li>-e和!-e用来判断是否存在文件或目录</li><li>-x和!-x用来判断文件是否可执行</li></ul><h3 id="内置的全局变量"><a href="#内置的全局变量" class="headerlink" title="内置的全局变量"></a>内置的全局变量</h3><pre class="line-numbers language-gams" data-language="gams"><code class="language-gams">$args ：这个变量等于请求行中的参数，同$query_string$content_length ： 请求头中的Content-length字段。$content_type ： 请求头中的Content-Type字段。$document_root ： 当前请求在root指令中指定的值。$host ： 请求主机头字段，否则为服务器名称。$http_user_agent ： 客户端agent信息$http_cookie ： 客户端cookie信息$limit_rate ： 这个变量可以限制连接速率。$request_method ： 客户端请求的动作，通常为GET或POST。$remote_addr ： 客户端的IP地址。$remote_port ： 客户端的端口。$remote_user ： 已经经过Auth Basic Module验证的用户名。$request_filename ： 当前请求的文件路径，由root或alias指令与URI请求生成。$scheme ： HTTP方法（如http，https）。$server_protocol ： 请求使用的协议，通常是HTTP&#x2F;1.0或HTTP&#x2F;1.1。$server_addr ： 服务器地址，在完成一次系统调用后可以确定这个值。$server_name ： 服务器名称。$server_port ： 请求到达服务器的端口号。$request_uri ： 包含请求参数的原始URI，不包含主机名，如：”&#x2F;foo&#x2F;bar.php?arg&#x3D;baz”。$uri ： 不带请求参数的当前URI，$uri不包含主机名，如”&#x2F;foo&#x2F;bar.html”。$document_uri ： 与$uri相同。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如：</p><pre class="line-numbers language-stylus" data-language="stylus"><code class="language-stylus">访问链接是：http<span class="token punctuation">:</span><span class="token comment">//localhost:88/test1/test2/test.php </span>网站路径是：/var/www/html$host：localhost$server_port：88$request_uri：http<span class="token punctuation">:</span><span class="token comment">//localhost:88/test1/test2/test.php</span>$document_uri：/test1/test2/test<span class="token punctuation">.</span>php$document_root：/var/www/html$request_filename：/var/www/html/test1/test2/test<span class="token punctuation">.</span>php<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token comment"># 如果文件不存在则返回400</span><span class="token directive"><span class="token keyword">if</span> (!-f <span class="token variable">$request_filename</span>)</span> <span class="token punctuation">&#123;</span>    <span class="token directive"><span class="token keyword">return</span> <span class="token number">400</span></span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment"># 如果host不是xuexb.com，则301到xuexb.com中</span><span class="token directive"><span class="token keyword">if</span> ( <span class="token variable">$host</span> != <span class="token string">"xuexb.com"</span> )</span><span class="token punctuation">&#123;</span>    <span class="token directive"><span class="token keyword">rewrite</span> ^/(.*)$ https://xuexb.com/<span class="token variable">$1</span> permanent</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment"># 如果请求类型不是POST则返回405</span><span class="token directive"><span class="token keyword">if</span> (<span class="token variable">$request_method</span> = POST)</span> <span class="token punctuation">&#123;</span>    <span class="token directive"><span class="token keyword">return</span> <span class="token number">405</span></span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment"># 如果参数中有 a=1 则301到指定域名</span><span class="token directive"><span class="token keyword">if</span> (<span class="token variable">$args</span> ~ a=1)</span> <span class="token punctuation">&#123;</span>    <span class="token directive"><span class="token keyword">rewrite</span> ^ http://example.com/ permanent</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在某种场景下可结合<code>location</code>规则来使用，如：</p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token comment"># 访问 /test.html 时</span><span class="token directive"><span class="token keyword">location</span> = /test.html</span> <span class="token punctuation">&#123;</span>    <span class="token comment"># 默认值为xiaowu</span>    <span class="token directive"><span class="token keyword">set</span> <span class="token variable">$name</span> xiaowu</span><span class="token punctuation">;</span>    <span class="token comment"># 如果参数中有 name=xx 则使用该值</span>    <span class="token directive"><span class="token keyword">if</span> (<span class="token variable">$args</span> ~* name=(\w+?)(&amp;|$))</span> <span class="token punctuation">&#123;</span>        <span class="token directive"><span class="token keyword">set</span> <span class="token variable">$name</span> <span class="token variable">$1</span></span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment"># 301</span>    <span class="token directive"><span class="token keyword">rewrite</span> ^ /<span class="token variable">$name</span>.html permanent</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面表示：</p><ul><li>/test.html =&gt; /xiaowu.html</li><li>/test.html?name=ok =&gt; /ok.html?name=ok</li></ul><h2 id="location"><a href="#location" class="headerlink" title="location"></a>location</h2><h3 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h3><p>在<code>server</code>块中使用，如：</p><pre class="line-numbers language-undefined" data-language="undefined"><code class="language-undefined">server &#123;    location 表达式 &#123;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>location表达式类型</p><ul><li>如果直接写一个路径，则匹配该路径下的</li><li>~ 表示执行一个正则匹配，区分大小写</li><li>~* 表示执行一个正则匹配，不区分大小写</li><li>^~ 表示普通字符匹配。使用前缀匹配。如果匹配成功，则不再匹配其他location。</li><li>= 进行普通字符精确匹配。也就是完全匹配。</li></ul><h3 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h3><ol><li>等号类型（=）的优先级最高。一旦匹配成功，则不再查找其他匹配项。</li><li>^~类型表达式。一旦匹配成功，则不再查找其他匹配项。</li><li>正则表达式类型（~ ~*）的优先级次之。如果有多个location的正则能匹配的话，则使用正则表达式最长的那个。</li><li>常规字符串匹配类型。按前缀匹配。</li></ol><h3 id="例子-假地址掩饰真地址"><a href="#例子-假地址掩饰真地址" class="headerlink" title="例子 - 假地址掩饰真地址"></a>例子 - 假地址掩饰真地址</h3><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">&#123;</span>    <span class="token comment"># 用 xxoo_admin 来掩饰 admin</span>    <span class="token directive"><span class="token keyword">location</span> /</span> <span class="token punctuation">&#123;</span>        <span class="token comment"># 使用break拿一旦匹配成功则忽略后续location</span>        <span class="token directive"><span class="token keyword">rewrite</span> /xxoo_admin /admin break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment"># 访问真实地址直接报没权限</span>    <span class="token directive"><span class="token keyword">location</span> /admin</span> <span class="token punctuation">&#123;</span>        <span class="token directive"><span class="token keyword">return</span> <span class="token number">403</span></span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分享一个获取qq头像的接口</title>
      <link href="/2020/12/05/fen-xiang-yi-ge-huo-qu-qq-tou-xiang-de-jie-kou/"/>
      <url>/2020/12/05/fen-xiang-yi-ge-huo-qu-qq-tou-xiang-de-jie-kou/</url>
      
        <content type="html"><![CDATA[<h2 id="接口地址"><a href="#接口地址" class="headerlink" title="接口地址"></a>接口地址</h2><p>接口地址:<a href="https://q1.qlogo.cn/g?b=qq&amp;nk=1162106378&amp;src_uin=www.apibug.com&amp;s=0">https://q1.qlogo.cn/g?b=qq&amp;nk=1162106378&amp;src_uin=www.apibug.com&amp;s=0</a></p><p>请求方式：GET/POST</p><p>返回格式：图片</p><h2 id="请求参数"><a href="#请求参数" class="headerlink" title="请求参数"></a>请求参数</h2><table><thead><tr><th>名称</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>nk</td><td>string</td><td>qq号</td></tr></tbody></table><h2 id="返回示例"><a href="#返回示例" class="headerlink" title="返回示例"></a>返回示例</h2><p><img src="https://q1.qlogo.cn/g?b=qq&nk=1162106378&src_uin=www.apibug.com&s=0"></p>]]></content>
      
      
      <categories>
          
          <category> 折腾 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>github pages配置CDN加速</title>
      <link href="/2020/12/04/github-pages-pei-zhi-cdn-jia-su/"/>
      <url>/2020/12/04/github-pages-pei-zhi-cdn-jia-su/</url>
      
        <content type="html"><![CDATA[<blockquote><p>github pages服务器在海外，速度不敢恭维，快的时候能秒开网页，慢的时候一分钟都打不开。</p></blockquote><h2 id="配置又拍云"><a href="#配置又拍云" class="headerlink" title="配置又拍云"></a>配置又拍云</h2><ol><li>创建CDN服务</li><li>加速域名填写github绑定的你的个人域名</li><li>应用场景选全站加速</li><li>源站设置填写你的github pages地址，即xxx.github.io</li><li>选择国内加速</li><li>创建好后会生成CNMAE</li><li>在个人域名解析中添加一条CNMAE指向又拍云</li></ol><h2 id="网站测速"><a href="#网站测速" class="headerlink" title="网站测速"></a>网站测速</h2><p>又拍云28个解析ip分发网络，测速全绿。</p><p><img src="http://shp.qpic.cn/collector/1562492775/566fbbb6-fe21-44cb-befc-8c26fa447d6e/0"></p><p><img src="http://shp.qpic.cn/collector/1562492775/b9df33a8-fe7a-4f8e-bb86-51a9db1b997c/0"></p><h2 id="又拍云联盟"><a href="#又拍云联盟" class="headerlink" title="又拍云联盟"></a>又拍云联盟</h2><p>又拍云联盟为个人开发者提供了每个月免费 15G 流量的 cdn 服务。</p><h3 id="又拍云联盟申请流程"><a href="#又拍云联盟申请流程" class="headerlink" title="又拍云联盟申请流程"></a>又拍云联盟申请流程</h3><ol><li>又拍云联盟官网：<a href="https://www.upyun.com/league">https://www.upyun.com/league</a></li><li>只需要在你网站底部加上又拍云的 logo 和超链接即可申请填表，一般又拍云会在每周五审核。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Github </tag>
            
            <tag> CDN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简喵网吧自动抢红包2.0</title>
      <link href="/2020/09/15/jian-miao-wang-ba-zi-dong-qiang-hong-bao-2.0/"/>
      <url>/2020/09/15/jian-miao-wang-ba-zi-dong-qiang-hong-bao-2.0/</url>
      
        <content type="html"><![CDATA[<p>简喵更新了app，红包请求api加了十几个header参数，添加了token验证登录。</p><h2 id="抓包分析"><a href="#抓包分析" class="headerlink" title="抓包分析"></a>抓包分析</h2><p>抓包后分析</p><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token request-line"><span class="token method property">POST</span> <span class="token request-target url">/redpacket/v5130/getPacket.html</span> <span class="token http-version property">HTTP/1.1</span></span><span class="token header-name keyword">Host:</span> api.sw0013.com<span class="token header-name keyword">clientVersionCode:</span> 59143<span class="token header-name keyword">clientVersionName:</span> 5.13.6<span class="token header-name keyword">appName:</span> app_jm<span class="token header-name keyword">bindType:</span> 1<span class="token header-name keyword">sessionId:</span> 600ad435-25af-4ff0-805b-1b1e2ebe6578<span class="token header-name keyword">deviceId:</span>假装打码<span class="token header-name keyword">userId:</span> 假装打码<span class="token header-name keyword">mac:</span> 9a:cc:cd:38:82:b7<span class="token header-name keyword">token:</span> 7a6c0a1a8f7dfd7c6ca720ff5711f8f2<span class="token header-name keyword">market:</span> main<span class="token header-name keyword">osVersion:</span> 27<span class="token header-name keyword">builder:</span> 01<span class="token header-name keyword">client:</span> android<span class="token header-name keyword">model:</span> Mi Note 3<span class="token header-name keyword">networkType:</span> LTE<span class="token header-name keyword">brand:</span> Xiaomi<span class="token header-name keyword">userId0013:</span> 假装打码<span class="token header-name keyword">timestamp:</span> 1600053106106body=%7B%22snbid%22%3A%22iynx%22%7D<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>重发之后发现token可以再次使用，修改header中任意一个参数，token都会验证错误。遂逆向分析加密算法。</p><h2 id="逆向"><a href="#逆向" class="headerlink" title="逆向"></a>逆向</h2><p>简喵有360的一个简单加固，脱壳之后用jadx打开分析。直接搜索token定位代码块，找到了加密部分的代码，原理是将header的那十几个参数排序后用url参数键值对形式连接后再加上一段密钥后进行md5加密，返回的32位md5就是token。</p><h2 id="token伪造"><a href="#token伪造" class="headerlink" title="token伪造"></a>token伪造</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">get_token</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment">#headers是请求头，每次请求变化的只有请求体和请求头中的时间戳</span>    self<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">'timestamp'</span><span class="token punctuation">]</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>time    body <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f"body=</span><span class="token interpolation"><span class="token punctuation">&#123;</span>hashlib<span class="token punctuation">.</span>md5<span class="token punctuation">(</span>self<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'body'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">&amp;"</span></span>    sb <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        str2 <span class="token operator">=</span> self<span class="token punctuation">.</span>arraylist<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        str3 <span class="token operator">=</span> self<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>get<span class="token punctuation">(</span>str2<span class="token punctuation">)</span>        sb<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>str2<span class="token punctuation">&#125;</span></span><span class="token string">=</span><span class="token interpolation"><span class="token punctuation">&#123;</span>str3<span class="token punctuation">&#125;</span></span><span class="token string">&amp;'</span></span><span class="token punctuation">)</span>    sb<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'key=50U0XyKHG4hDjzaWA9sONCOimSx2E91YjhOVjXIWB6rdQyh1Eul74VF6CkD/GlwJFx6sp8APFCA='</span><span class="token punctuation">)</span>    sb <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>sb<span class="token punctuation">)</span>    body <span class="token operator">+=</span> sb    <span class="token comment"># print(sb)</span>    <span class="token keyword">return</span> hashlib<span class="token punctuation">.</span>md5<span class="token punctuation">(</span>body<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="模拟请求"><a href="#模拟请求" class="headerlink" title="模拟请求"></a>模拟请求</h2><p>使用python requests模块</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">headers <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">'clientVersionCode'</span><span class="token punctuation">:</span> <span class="token string">'59143'</span><span class="token punctuation">,</span>    <span class="token string">'clientVersionName'</span><span class="token punctuation">:</span> <span class="token string">'5.13.6'</span><span class="token punctuation">,</span>    <span class="token string">'appName'</span><span class="token punctuation">:</span> <span class="token string">'app_jm'</span><span class="token punctuation">,</span>    <span class="token string">'bindType'</span><span class="token punctuation">:</span> <span class="token string">'1'</span><span class="token punctuation">,</span>    <span class="token string">'sessionId'</span><span class="token punctuation">:</span> <span class="token string">'600ad435-25af-4ff0-805b-1b1e2ebe6578'</span><span class="token punctuation">,</span>    <span class="token string">'deviceId'</span><span class="token punctuation">:</span> 假装打码<span class="token punctuation">,</span>    <span class="token string">'userId'</span><span class="token punctuation">:</span> 假装打码<span class="token punctuation">,</span>    <span class="token string">'mac'</span><span class="token punctuation">:</span> <span class="token string">'9a:cc:cd:38:82:b7'</span><span class="token punctuation">,</span>    <span class="token string">'token'</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>    <span class="token string">'market'</span><span class="token punctuation">:</span> <span class="token string">'main'</span><span class="token punctuation">,</span>    <span class="token string">'osVersion'</span><span class="token punctuation">:</span> <span class="token string">'27'</span><span class="token punctuation">,</span>    <span class="token string">'builder'</span><span class="token punctuation">:</span> <span class="token string">'01'</span><span class="token punctuation">,</span>    <span class="token string">'client'</span><span class="token punctuation">:</span> <span class="token string">'android'</span><span class="token punctuation">,</span>    <span class="token string">'model'</span><span class="token punctuation">:</span> <span class="token string">'Mi Note 3'</span><span class="token punctuation">,</span>    <span class="token string">'networkType'</span><span class="token punctuation">:</span> <span class="token string">'LTE'</span><span class="token punctuation">,</span>    <span class="token string">'brand'</span><span class="token punctuation">:</span> <span class="token string">'Xiaomi'</span><span class="token punctuation">,</span>    <span class="token string">'userId0013'</span><span class="token punctuation">:</span> <span class="token string">'513760598'</span><span class="token punctuation">,</span>    <span class="token string">'timestamp'</span><span class="token punctuation">:</span> <span class="token string">'1600053106106'</span><span class="token punctuation">,</span>    <span class="token string">'Content-Type'</span><span class="token punctuation">:</span> <span class="token string">'application/x-www-form-urlencoded'</span><span class="token punctuation">,</span>    <span class="token string">'Content-Length'</span><span class="token punctuation">:</span> <span class="token string">'39'</span><span class="token punctuation">,</span>    <span class="token string">'Host'</span><span class="token punctuation">:</span> <span class="token string">'api.sw0013.com'</span><span class="token punctuation">,</span>    <span class="token string">'Connection'</span><span class="token punctuation">:</span> <span class="token string">'Keep-Alive'</span><span class="token punctuation">,</span>    <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Linux; U; Android 27; zh-cn; Mi Note 3 Build/FRF91) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0 Mobile Safari/533.1'</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span>data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token string">'body'</span><span class="token punctuation">:</span> <span class="token string">'&#123;"snbid":"iynx1777"&#125;'</span><span class="token punctuation">&#125;</span>headers<span class="token punctuation">[</span><span class="token string">'token'</span><span class="token punctuation">]</span> <span class="token operator">=</span> get_token<span class="token punctuation">(</span>headers<span class="token punctuation">,</span> data<span class="token punctuation">)</span>response <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">'https://api.sw0013.com/redpacket/v5130/getPacket.html'</span><span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="服务器推送到qq"><a href="#服务器推送到qq" class="headerlink" title="服务器推送到qq"></a>服务器推送到qq</h2><p>这里我用的是自己的机器人，将抢红包的返回信息处理之后请求机器人推送api，推送到qq。</p><h2 id="效果如下"><a href="#效果如下" class="headerlink" title="效果如下"></a>效果如下</h2><p><img src="https://shp.qpic.cn/collector/1562492775/1f276c55-66a0-4029-9de1-fd92239f109e/0"></p>]]></content>
      
      
      <categories>
          
          <category> 折腾 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>简喵网吧自动抢红包</title>
      <link href="/2020/04/23/jian-miao-wang-ba-zi-dong-qiang-hong-bao/"/>
      <url>/2020/04/23/jian-miao-wang-ba-zi-dong-qiang-hong-bao/</url>
      
        <content type="html"><![CDATA[<p>网吧每天都有网费红包，但是要准时抢，经常忘记了，今天尝试了下直接构造请求。直接抓包分析查看，一个get请求，两个参数，无验证。</p><h2 id="url及参数如下"><a href="#url及参数如下" class="headerlink" title="url及参数如下"></a>url及参数如下</h2><pre class="line-numbers language-none"><code class="language-none">url:&quot;http:&#x2F;&#x2F;hz.interface.sw0013.com&#x2F;redpacket&#x2F;h5&#x2F;getPacket.html&quot;参数:&quot;snbid&#x3D;(网吧id)&amp;userId&#x3D;(网瞄会员id)&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>直接挂服务器，每天定时get。</p><h2 id="效果如下"><a href="#效果如下" class="headerlink" title="效果如下"></a>效果如下</h2><p><img src="https://shp.qpic.cn/collector/1562492775/ea8fbb7e-ea3d-4e6d-935f-9c417aefd0cc/0#vwid=828&vhei=1792"></p>]]></content>
      
      
      <categories>
          
          <category> 折腾 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>记某品牌共享按摩椅支付安全测试</title>
      <link href="/2020/03/23/ji-mou-pin-pai-gong-xiang-an-mo-yi-zhi-fu-an-quan-ce-shi/"/>
      <url>/2020/03/23/ji-mou-pin-pai-gong-xiang-an-mo-yi-zhi-fu-an-quan-ce-shi/</url>
      
        <content type="html"><![CDATA[<!--markdown-->坐按摩椅的时候无聊试了下抓包，发现价格参数外放。<h2 id="参数如图"><a href="#参数如图" class="headerlink" title="参数如图"></a>参数如图</h2><img src="https://shp.qpic.cn/collector/1562492775/074458ac-48f8-4363-9323-c0789ceeb631/0#vwid=828&vhei=723"  /><p>直接拦截修改价格为0，成功跳支付。</p><h2 id="效果如下"><a href="#效果如下" class="headerlink" title="效果如下"></a>效果如下</h2><img src="https://shp.qpic.cn/collector/1562492775/65b5b029-900c-4750-b5b1-e0208a562e31/0#vwid=828&vhei=1792"  />望早日修复。]]></content>
      
      
      <categories>
          
          <category> 抓包 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>记交通支付app湘行一卡通安全测试</title>
      <link href="/2020/02/08/ji-jiao-tong-zhi-fu-app-xiang-xing-yi-qia-tong-an-quan-ce-shi/"/>
      <url>/2020/02/08/ji-jiao-tong-zhi-fu-app-xiang-xing-yi-qia-tong-an-quan-ce-shi/</url>
      
        <content type="html"><![CDATA[<!--markdown-->疫情期间太无聊了，于是想着测试一下手机上的app，以前就一直觉得湘行一卡通做得很简陋，感觉漏洞很多。刚好余额里有10块钱，于是试了一下拦截第一次提现请求，然后复制同时重放10次，接着神奇的事情发生了，成功了八次请求。10块钱提现了八次(???????) ，开始有点慌了。:@(无奈) 过了几天看记录，幸好没有提现成功，不然就要去派出所喝茶了。<p><img src="https://shp.qpic.cn/collector/1562492775/dc22f853-61a5-4bdd-8540-2a57955759d5/0#vwid=1080&vhei=1335" alt="提现记录"></p><p>不过神奇的事情还是发生了，看了下余额发现提现失败的钱退到了余额，然后预提现金额变成了负数。<br><img src="https://shp.qpic.cn/collector/1562492775/639937bb-46b0-4fc0-a830-a5b8460c2be4/0#vwid=828&vhei=1792" alt="余额截图"></p><p>猜测一下，应该是app后端收到一个提现请求时未及时对余额加锁，导致并发请求多个成功，还是希望官方尽快修复吧。</p>]]></content>
      
      
      <categories>
          
          <category> 抓包 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
